
tpms_progr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e4  0800a9e4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d1c  20000078  0800aa64  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d94  0800aa64  00024d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a381  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ec  00000000  00000000  0003a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cc  00000000  00000000  0003fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006374  00000000  00000000  0004104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2b6  00000000  00000000  000473c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098204  00000000  00000000  00065676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c98  00000000  00000000  000fd87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00104514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a634 	.word	0x0800a634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800a634 	.word	0x0800a634

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8000590:	f008 fe1a 	bl	80091c8 <initialise_monitor_handles>
  HAL_Init();
 8000594:	f000 ffd6 	bl	8001544 <HAL_Init>
  SystemClock_Config();
 8000598:	f000 f822 	bl	80005e0 <SystemClock_Config>
  if(init_tasks()) printf("Tasks was initialized\n");
 800059c:	f000 ff34 	bl	8001408 <init_tasks>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <main+0x20>
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x48>)
 80005a8:	f008 ffba 	bl	8009520 <puts>
  if(i2c_init()) printf("I2C1 was init success\n");
 80005ac:	f000 fd50 	bl	8001050 <i2c_init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <main+0x30>
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x4c>)
 80005b8:	f008 ffb2 	bl	8009520 <puts>

  MX_USART2_UART_Init();
 80005bc:	f000 f89c 	bl	80006f8 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 80005c0:	f000 f878 	bl	80006b4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005c4:	f005 f99a 	bl	80058fc <MX_FATFS_Init>

  osKernelStart();
 80005c8:	f005 fc96 	bl	8005ef8 <osKernelStart>
  printf("osKernelStart();\n");
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0x50>)
 80005ce:	f008 ffa7 	bl	8009520 <puts>

  while (1){
 80005d2:	e7fe      	b.n	80005d2 <main+0x46>
 80005d4:	0800a64c 	.word	0x0800a64c
 80005d8:	0800a664 	.word	0x0800a664
 80005dc:	0800a67c 	.word	0x0800a67c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f009 f8aa 	bl	8009748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xd0>)
 800062e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fbf3 	bl	8002e54 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f86a 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fe55 	bl	8003344 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 f854 	bl	800074c <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <MX_SDIO_SD_Init+0x40>)
 80006bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <MX_SDIO_SD_Init+0x3c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	200000d8 	.word	0x200000d8
 80006f4:	40012c00 	.word	0x40012c00

080006f8 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f004 f8c1 	bl	80048b6 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f807 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000094 	.word	0x20000094
 8000748:	40004400 	.word	0x40004400

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x54>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_MspInit+0x54>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x54>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_MspInit+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_MspInit+0x54>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	f06f 0001 	mvn.w	r0, #1
 800079e:	f001 f824 	bl	80017ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_I2C_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12b      	bne.n	800082a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_I2C_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_I2C_MspInit+0x88>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80007ee:	23c0      	movs	r3, #192	; 0xc0
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f2:	2312      	movs	r3, #18
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fe:	2304      	movs	r3, #4
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <HAL_I2C_MspInit+0x8c>)
 800080a:	f001 f8a9 	bl	8001960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_I2C_MspInit+0x88>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_I2C_MspInit+0x88>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_I2C_MspInit+0x88>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40005400 	.word	0x40005400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400

08000840 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <HAL_SD_MspInit+0xc0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d14a      	bne.n	80008f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_SD_MspInit+0xc4>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <HAL_SD_MspInit+0xc4>)
 800086c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <HAL_SD_MspInit+0xc4>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <HAL_SD_MspInit+0xc4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <HAL_SD_MspInit+0xc4>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_SD_MspInit+0xc4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_SD_MspInit+0xc4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_SD_MspInit+0xc4>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_SD_MspInit+0xc4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008c8:	230c      	movs	r3, #12
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <HAL_SD_MspInit+0xc8>)
 80008d4:	f001 f844 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d8:	2304      	movs	r3, #4
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008e8:	230c      	movs	r3, #12
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <HAL_SD_MspInit+0xcc>)
 80008f4:	f001 f834 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40012c00 	.word	0x40012c00
 8000904:	40023800 	.word	0x40023800
 8000908:	40020800 	.word	0x40020800
 800090c:	40020c00 	.word	0x40020c00

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12b      	bne.n	800098a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_UART_MspInit+0x88>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096a:	230c      	movs	r3, #12
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097a:	2307      	movs	r3, #7
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_UART_MspInit+0x8c>)
 8000986:	f000 ffeb 	bl	8001960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40004400 	.word	0x40004400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 fe0a 	bl	80015e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009d4:	f007 f968 	bl	8007ca8 <xTaskGetSchedulerState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d001      	beq.n	80009e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009de:	f007 ff53 	bl	8008888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f008 fee4 	bl	80097e4 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20018000 	.word	0x20018000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	2000015c 	.word	0x2000015c
 8000a50:	20004d98 	.word	0x20004d98

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a94:	4c0b      	ldr	r4, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff ffd7 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f008 fea3 	bl	80097f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fd6f 	bl	800058c <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000abc:	0800a9ec 	.word	0x0800a9ec
  ldr r2, =_sbss
 8000ac0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ac4:	20004d94 	.word	0x20004d94

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <reset_to_factory>:
static BOOLEAN prep_firmware(void);
static BOOLEAN reset_to_factory(void);
//static BOOLEAN set_lockbyte(UINT16 lock_addr, char value);


static BOOLEAN reset_to_factory(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
     // 1) write to 0x36 ack data: 0xA2 0x01 0x76 0x32
     uint8_t reset_cmd_1[4] = {0xA2, 0x01, 0x76, 0x32};
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <reset_to_factory+0x44>)
 8000ad4:	607b      	str	r3, [r7, #4]
     if(!i2c_send_data_to_device(SNP_ADDR, &reset_cmd_1, 4)) return FALSE;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2204      	movs	r2, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	2036      	movs	r0, #54	; 0x36
 8000ade:	f000 fbab 	bl	8001238 <i2c_send_data_to_device>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d101      	bne.n	8000aec <reset_to_factory+0x20>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e00d      	b.n	8000b08 <reset_to_factory+0x3c>

     // 2) write to 0x36 ack data: 0xA2, 0x02, 0x46, 0x51
     uint8_t reset_cmd_2[4] = {0xA2, 0x02, 0x46, 0x51};
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <reset_to_factory+0x48>)
 8000aee:	603b      	str	r3, [r7, #0]
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;
 8000af0:	463b      	mov	r3, r7
 8000af2:	2204      	movs	r2, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	2036      	movs	r0, #54	; 0x36
 8000af8:	f000 fb9e 	bl	8001238 <i2c_send_data_to_device>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <reset_to_factory+0x3a>
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <reset_to_factory+0x3c>

     return TRUE;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	327601a2 	.word	0x327601a2
 8000b14:	514602a2 	.word	0x514602a2

08000b18 <update_firmware>:

extern BOOLEAN update_firmware(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0aa      	sub	sp, #168	; 0xa8
 8000b1c:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 8000b1e:	f000 f90b 	bl	8000d38 <prep_firmware>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <update_firmware+0x1a>
    	printf("Can't switch SNP73X to programming mode\n");
 8000b28:	487d      	ldr	r0, [pc, #500]	; (8000d20 <update_firmware+0x208>)
 8000b2a:	f008 fcf9 	bl	8009520 <puts>
    	return FALSE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e0f2      	b.n	8000d18 <update_firmware+0x200>
    }
    printf("Switch SNP73X to factory state was success\n");
 8000b32:	487c      	ldr	r0, [pc, #496]	; (8000d24 <update_firmware+0x20c>)
 8000b34:	f008 fcf4 	bl	8009520 <puts>

    // Возврат заводской прошивки
    if(!reset_to_factory()) {
 8000b38:	f7ff ffc8 	bl	8000acc <reset_to_factory>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <update_firmware+0x34>
    	printf("Can't rollback SNP76X to factory state\n");
 8000b42:	4879      	ldr	r0, [pc, #484]	; (8000d28 <update_firmware+0x210>)
 8000b44:	f008 fcec 	bl	8009520 <puts>
    	return FALSE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e0e5      	b.n	8000d18 <update_firmware+0x200>
    }
    printf("Reset to factory was success\n");
 8000b4c:	4877      	ldr	r0, [pc, #476]	; (8000d2c <update_firmware+0x214>)
 8000b4e:	f008 fce7 	bl	8009520 <puts>
//    //                  0x00  0x00  0x80  0x0E  0xFF  0xFF  0xFF  0xFF  0xFF  0xFF  0x56  0x31  0x2E  0x32  0xFF  0xFF  0xFF  0xFF  0x75  0xA2  0x04  0x53  0x89  0xFC  0x75  0x81  0x26  0x12  0x02  0x22  0x53  0xC0  0x9F  0x43  0xC0  0x20  0x75  0xD8  0x00  0x75  0xE8  0x00  0x75  0xF8  0x00  0x90  0x60  0x73  0xE0  0x54  0x1F  0xF5  0xA3  0x43  0xC0  0x40  0x75  0x8A  0x00  0x43  0x89  0x02  0x43  0x8D  0x80  0x75  0x6A  0x38
//    i2c_send_data_to_device(0x36, data_3, 68);
//
//
    // 4) write to 0x36 ack data: 0x40 0x00 0x00 0x00 0x00 0x08 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x05 0x69
    char data_4[100] = {0x40, 0x00, sensor_number, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x69};
 8000b52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b56:	2264      	movs	r2, #100	; 0x64
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fdf4 	bl	8009748 <memset>
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000b66:	4b72      	ldr	r3, [pc, #456]	; (8000d30 <update_firmware+0x218>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000b6e:	2308      	movs	r3, #8
 8000b70:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8000b74:	23ff      	movs	r3, #255	; 0xff
 8000b76:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8000b7a:	23ff      	movs	r3, #255	; 0xff
 8000b7c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000b80:	23ff      	movs	r3, #255	; 0xff
 8000b82:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000b86:	23ff      	movs	r3, #255	; 0xff
 8000b88:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000b8c:	23ff      	movs	r3, #255	; 0xff
 8000b8e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000b98:	23ff      	movs	r3, #255	; 0xff
 8000b9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8000b9e:	23ff      	movs	r3, #255	; 0xff
 8000ba0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8000ba4:	23ff      	movs	r3, #255	; 0xff
 8000ba6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8000baa:	23ff      	movs	r3, #255	; 0xff
 8000bac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000bb0:	23ff      	movs	r3, #255	; 0xff
 8000bb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000bbc:	23ff      	movs	r3, #255	; 0xff
 8000bbe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8000bc2:	23ff      	movs	r3, #255	; 0xff
 8000bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000bc8:	23ff      	movs	r3, #255	; 0xff
 8000bca:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8000bce:	23ff      	movs	r3, #255	; 0xff
 8000bd0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8000bd4:	23ff      	movs	r3, #255	; 0xff
 8000bd6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8000bda:	23ff      	movs	r3, #255	; 0xff
 8000bdc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000be0:	23ff      	movs	r3, #255	; 0xff
 8000be2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000be6:	23ff      	movs	r3, #255	; 0xff
 8000be8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000bec:	23ff      	movs	r3, #255	; 0xff
 8000bee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8000bf2:	23ff      	movs	r3, #255	; 0xff
 8000bf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8000bfe:	23ff      	movs	r3, #255	; 0xff
 8000c00:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8000c10:	23ff      	movs	r3, #255	; 0xff
 8000c12:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8000c1c:	23ff      	movs	r3, #255	; 0xff
 8000c1e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000c22:	23ff      	movs	r3, #255	; 0xff
 8000c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000c28:	23ff      	movs	r3, #255	; 0xff
 8000c2a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8000c34:	23ff      	movs	r3, #255	; 0xff
 8000c36:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8000c3a:	23ff      	movs	r3, #255	; 0xff
 8000c3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000c40:	23ff      	movs	r3, #255	; 0xff
 8000c42:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8000c46:	23ff      	movs	r3, #255	; 0xff
 8000c48:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8000c4c:	23ff      	movs	r3, #255	; 0xff
 8000c4e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000c58:	23ff      	movs	r3, #255	; 0xff
 8000c5a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000c5e:	23ff      	movs	r3, #255	; 0xff
 8000c60:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000c70:	23ff      	movs	r3, #255	; 0xff
 8000c72:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000c7c:	23ff      	movs	r3, #255	; 0xff
 8000c7e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000c82:	23ff      	movs	r3, #255	; 0xff
 8000c84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000c8e:	23ff      	movs	r3, #255	; 0xff
 8000c90:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8000c94:	23ff      	movs	r3, #255	; 0xff
 8000c96:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8000c9a:	23ff      	movs	r3, #255	; 0xff
 8000c9c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000ca6:	23ff      	movs	r3, #255	; 0xff
 8000ca8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000cac:	23ff      	movs	r3, #255	; 0xff
 8000cae:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000cb2:	23ff      	movs	r3, #255	; 0xff
 8000cb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000cb8:	23ff      	movs	r3, #255	; 0xff
 8000cba:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8000cbe:	23ff      	movs	r3, #255	; 0xff
 8000cc0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8000cca:	23ff      	movs	r3, #255	; 0xff
 8000ccc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000cd6:	23ff      	movs	r3, #255	; 0xff
 8000cd8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000cdc:	2305      	movs	r3, #5
 8000cde:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000ce2:	2369      	movs	r3, #105	; 0x69
 8000ce4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    i2c_send_data_to_device(0x36, data_4, 68);
 8000ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cec:	2244      	movs	r2, #68	; 0x44
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2036      	movs	r0, #54	; 0x36
 8000cf2:	f000 faa1 	bl	8001238 <i2c_send_data_to_device>

    //write to 0x36 ack data: 0x40 0x00
    //read to 0x36 ack data: 0x00 0x00 0x00 0x08 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x03 0x97
    //                        1     2    3   4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66
    char buff[66];
    memset(&buff[0], 0x00, 66);
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2242      	movs	r2, #66	; 0x42
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f008 fd23 	bl	8009748 <memset>
    i2c_read_data_from_device(0x36, 0x4000, buff, 66);
 8000d02:	463a      	mov	r2, r7
 8000d04:	2342      	movs	r3, #66	; 0x42
 8000d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0a:	2036      	movs	r0, #54	; 0x36
 8000d0c:	f000 fa38 	bl	8001180 <i2c_read_data_from_device>

    printf("FW was finish\n");
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <update_firmware+0x21c>)
 8000d12:	f008 fc05 	bl	8009520 <puts>
    return TRUE;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	37a8      	adds	r7, #168	; 0xa8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0800a690 	.word	0x0800a690
 8000d24:	0800a6b8 	.word	0x0800a6b8
 8000d28:	0800a6e4 	.word	0x0800a6e4
 8000d2c:	0800a70c 	.word	0x0800a70c
 8000d30:	20000004 	.word	0x20000004
 8000d34:	0800a72c 	.word	0x0800a72c

08000d38 <prep_firmware>:

static BOOLEAN prep_firmware(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
	switch_mode_sda_scl(GPIO_M);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f841 	bl	8000dc4 <switch_mode_sda_scl>

	set_sda(GPIO_PIN_RESET);   // SDA off
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f932 	bl	8000fac <set_sda>
	set_scl(GPIO_PIN_RESET);   // SCL off
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 f949 	bl	8000fe0 <set_scl>
	set_power(GPIO_PIN_RESET); // VDD off
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f91a 	bl	8000f88 <set_power>
	osDelay(1000);
 8000d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d58:	f005 f99b 	bl	8006092 <osDelay>
 	set_power(GPIO_PIN_SET);   // VDD on
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 f913 	bl	8000f88 <set_power>

	// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
	set_sda(GPIO_PIN_RESET);    // SDA on
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f922 	bl	8000fac <set_sda>
	set_scl(GPIO_PIN_SET);  // SCL off
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 f939 	bl	8000fe0 <set_scl>
	osDelay(2000);
 8000d6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d72:	f005 f98e 	bl	8006092 <osDelay>

	// Перевод SDA/SCL пинов в режим I2C
	switch_mode_sda_scl(I2C_M);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 f824 	bl	8000dc4 <switch_mode_sda_scl>
	osDelay(1000);
 8000d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d80:	f005 f987 	bl	8006092 <osDelay>

	// Убедиться, что на шине появилось устройство с адресом 0x36
    scan_bus_and_print();
 8000d84:	f000 faae 	bl	80012e4 <scan_bus_and_print>
	return has_device(SNP_ADDR);
 8000d88:	2036      	movs	r0, #54	; 0x36
 8000d8a:	f000 fa81 	bl	8001290 <has_device>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b2db      	uxtb	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <gpio_start+0x28>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <gpio_start+0x10>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e008      	b.n	8000dba <gpio_start+0x22>
   is_init = init_io();
 8000da8:	f000 f88c 	bl	8000ec4 <init_io>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <gpio_start+0x28>)
 8000db2:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 8000db4:	f000 f876 	bl	8000ea4 <gpio_watcher>
   return TRUE;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000160 	.word	0x20000160

08000dc4 <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <switch_mode_sda_scl+0x16>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d00d      	beq.n	8000df4 <switch_mode_sda_scl+0x30>
 8000dd8:	e01f      	b.n	8000e1a <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 8000dda:	482a      	ldr	r0, [pc, #168]	; (8000e84 <switch_mode_sda_scl+0xc0>)
 8000ddc:	f008 fba0 	bl	8009520 <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <switch_mode_sda_scl+0xcc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
		break;
 8000df2:	e017      	b.n	8000e24 <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <switch_mode_sda_scl+0xd0>)
 8000df6:	f008 fb93 	bl	8009520 <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e08:	2212      	movs	r2, #18
 8000e0a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000e0e:	2212      	movs	r2, #18
 8000e10:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <switch_mode_sda_scl+0xcc>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
        break;
 8000e18:	e004      	b.n	8000e24 <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 8000e1a:	481f      	ldr	r0, [pc, #124]	; (8000e98 <switch_mode_sda_scl+0xd4>)
 8000e1c:	f008 fb80 	bl	8009520 <puts>
		return FALSE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e02a      	b.n	8000e7a <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <switch_mode_sda_scl+0xd8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <switch_mode_sda_scl+0xd8>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <switch_mode_sda_scl+0xd8>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4e:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e5e:	2203      	movs	r2, #3
 8000e60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <switch_mode_sda_scl+0xc8>)
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <switch_mode_sda_scl+0xdc>)
 8000e6c:	f000 fd78 	bl	8001960 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 8000e70:	4905      	ldr	r1, [pc, #20]	; (8000e88 <switch_mode_sda_scl+0xc4>)
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <switch_mode_sda_scl+0xdc>)
 8000e74:	f000 fd74 	bl	8001960 <HAL_GPIO_Init>
	return TRUE;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800a73c 	.word	0x0800a73c
 8000e88:	200001a0 	.word	0x200001a0
 8000e8c:	2000018c 	.word	0x2000018c
 8000e90:	20000005 	.word	0x20000005
 8000e94:	0800a754 	.word	0x0800a754
 8000e98:	0800a76c 	.word	0x0800a76c
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <gpio_watcher>:

static void gpio_watcher(void){
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	while(is_init){
 8000ea8:	bf00      	nop
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <gpio_watcher+0x1c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1fb      	bne.n	8000eaa <gpio_watcher+0x6>

	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000160 	.word	0x20000160

08000ec4 <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <init_io+0xac>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <init_io+0xac>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <init_io+0xac>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <init_io+0xb0>)
 8000ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eec:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <init_io+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <init_io+0xb0>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <init_io+0xb0>)
 8000efc:	2203      	movs	r2, #3
 8000efe:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 8000f00:	491c      	ldr	r1, [pc, #112]	; (8000f74 <init_io+0xb0>)
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <init_io+0xb4>)
 8000f04:	f000 fd2c 	bl	8001960 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <init_io+0xac>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <init_io+0xac>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <init_io+0xac>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <init_io+0xb8>)
 8000f26:	2220      	movs	r2, #32
 8000f28:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <init_io+0xb8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <init_io+0xb8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <init_io+0xb8>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 8000f3c:	490f      	ldr	r1, [pc, #60]	; (8000f7c <init_io+0xb8>)
 8000f3e:	4810      	ldr	r0, [pc, #64]	; (8000f80 <init_io+0xbc>)
 8000f40:	f000 fd0e 	bl	8001960 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <init_io+0xc0>)
 8000f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4a:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <init_io+0xc0>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <init_io+0xc0>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <init_io+0xc0>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 8000f5e:	4909      	ldr	r1, [pc, #36]	; (8000f84 <init_io+0xc0>)
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <init_io+0xbc>)
 8000f62:	f000 fcfd 	bl	8001960 <HAL_GPIO_Init>

	 return TRUE;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	20000164 	.word	0x20000164
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	20000178 	.word	0x20000178
 8000f80:	40020000 	.word	0x40020000
 8000f84:	200001b4 	.word	0x200001b4

08000f88 <set_power>:

extern void set_power(GPIO_PinState state){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	461a      	mov	r2, r3
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <set_power+0x20>)
 8000f9c:	f000 fe7c 	bl	8001c98 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020000 	.word	0x40020000

08000fac <set_sda>:

extern void set_sda(GPIO_PinState state){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <set_sda+0x2c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d107      	bne.n	8000fce <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <set_sda+0x30>)
 8000fc8:	f000 fe66 	bl	8001c98 <HAL_GPIO_WritePin>
 8000fcc:	e000      	b.n	8000fd0 <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 8000fce:	bf00      	nop
}
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000005 	.word	0x20000005
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <set_scl>:

extern void set_scl(GPIO_PinState state){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <set_scl+0x2c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d107      	bne.n	8001002 <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <set_scl+0x30>)
 8000ffc:	f000 fe4c 	bl	8001c98 <HAL_GPIO_WritePin>
 8001000:	e000      	b.n	8001004 <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 8001002:	bf00      	nop
}
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000005 	.word	0x20000005
 8001010:	40020400 	.word	0x40020400

08001014 <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	461a      	mov	r2, r3
 8001022:	2120      	movs	r1, #32
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <set_green_led+0x20>)
 8001026:	f000 fe37 	bl	8001c98 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000

08001038 <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 800103c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <get_current_button_state+0x14>)
 8001042:	f000 fe11 	bl	8001c68 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020800 	.word	0x40020800

08001050 <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <i2c_init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <i2c_init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <i2c_init+0x58>)
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <i2c_init+0x60>)
 800105e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <i2c_init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <i2c_init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <i2c_init+0x58>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <i2c_init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <i2c_init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <i2c_init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <i2c_init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]


	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <i2c_init+0x58>)
 800108e:	f000 fe1d 	bl	8001ccc <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <i2c_init+0x4c>
	  {
	    return FALSE;
 8001098:	2300      	movs	r3, #0
 800109a:	e003      	b.n	80010a4 <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fe91 	bl	8000dc4 <switch_mode_sda_scl>
      return TRUE;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001c8 	.word	0x200001c8
 80010ac:	40005400 	.word	0x40005400
 80010b0:	000186a0 	.word	0x000186a0

080010b4 <print_hex>:

void print_hex(char *caption, unsigned char *m, int length) {
 80010b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b8:	b08d      	sub	sp, #52	; 0x34
 80010ba:	af02      	add	r7, sp, #8
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	466b      	mov	r3, sp
 80010c4:	461e      	mov	r6, r3
    int size = sizeof(caption) + 30 + length * 3 + 1;
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	3323      	adds	r3, #35	; 0x23
 80010d0:	61fb      	str	r3, [r7, #28]
    char buf[size];
 80010d2:	69f9      	ldr	r1, [r7, #28]
 80010d4:	1e4b      	subs	r3, r1, #1
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	460a      	mov	r2, r1
 80010da:	2300      	movs	r3, #0
 80010dc:	4690      	mov	r8, r2
 80010de:	4699      	mov	r9, r3
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010f4:	460a      	mov	r2, r1
 80010f6:	2300      	movs	r3, #0
 80010f8:	4614      	mov	r4, r2
 80010fa:	461d      	mov	r5, r3
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	00eb      	lsls	r3, r5, #3
 8001106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800110a:	00e2      	lsls	r2, r4, #3
 800110c:	460b      	mov	r3, r1
 800110e:	3307      	adds	r3, #7
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	ebad 0d03 	sub.w	sp, sp, r3
 8001118:	ab02      	add	r3, sp, #8
 800111a:	3300      	adds	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
    unsigned int pos = snprintf(buf, size, "%s [%i]: ", caption, length);
 800111e:	69f9      	ldr	r1, [r7, #28]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <print_hex+0xc4>)
 8001128:	6978      	ldr	r0, [r7, #20]
 800112a:	f008 fa01 	bl	8009530 <sniprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < length; i++) pos += snprintf(buf + pos, 4, "%2.2X ", m[i]);
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	e012      	b.n	800115e <print_hex+0xaa>
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	18d0      	adds	r0, r2, r3
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4a0d      	ldr	r2, [pc, #52]	; (800117c <print_hex+0xc8>)
 8001148:	2104      	movs	r1, #4
 800114a:	f008 f9f1 	bl	8009530 <sniprintf>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	4413      	add	r3, r2
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	3301      	adds	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbe8      	blt.n	8001138 <print_hex+0x84>
    printf("%s\n", buf);
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f008 f9da 	bl	8009520 <puts>
 800116c:	46b5      	mov	sp, r6
}
 800116e:	bf00      	nop
 8001170:	372c      	adds	r7, #44	; 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001178:	0800a78c 	.word	0x0800a78c
 800117c:	0800a798 	.word	0x0800a798

08001180 <i2c_read_data_from_device>:

extern BOOLEAN i2c_read_data_from_device(uint16_t device_addr, uint16_t reg_addr, uint8_t *buffer, uint16_t buffer_size){
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	81fb      	strh	r3, [r7, #14]
 800118e:	460b      	mov	r3, r1
 8001190:	81bb      	strh	r3, [r7, #12]
 8001192:	4613      	mov	r3, r2
 8001194:	80fb      	strh	r3, [r7, #6]
	 uint8_t reg[2] = {reg_addr >> 8, reg_addr};
 8001196:	89bb      	ldrh	r3, [r7, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	b29b      	uxth	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	753b      	strb	r3, [r7, #20]
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	757b      	strb	r3, [r7, #21]

	 // Подготовка к чтению
	 if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, reg, 2, HAL_MAX_DELAY) != HAL_OK){
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	b299      	uxth	r1, r3
 80011ac:	f107 0214 	add.w	r2, r7, #20
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <i2c_read_data_from_device+0xa4>)
 80011ba:	f000 fecb 	bl	8001f54 <HAL_I2C_Master_Transmit>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <i2c_read_data_from_device+0x56>
	    	printf("Error prepare to read register %02X %02X\n", reg[0], reg[1]);
 80011c4:	7d3b      	ldrb	r3, [r7, #20]
 80011c6:	4619      	mov	r1, r3
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <i2c_read_data_from_device+0xa8>)
 80011ce:	f008 f939 	bl	8009444 <iprintf>
	    	return FALSE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e022      	b.n	800121c <i2c_read_data_from_device+0x9c>
	 }
     print_hex("ack data: ", reg, 2);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2202      	movs	r2, #2
 80011dc:	4619      	mov	r1, r3
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <i2c_read_data_from_device+0xac>)
 80011e0:	f7ff ff68 	bl	80010b4 <print_hex>


	 // Чтение
  	 uint8_t res = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) device_addr << 1, &buffer[0], buffer_size, HAL_MAX_DELAY);
 80011e4:	89fb      	ldrh	r3, [r7, #14]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b299      	uxth	r1, r3
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	9200      	str	r2, [sp, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <i2c_read_data_from_device+0xa4>)
 80011f6:	f000 ffab 	bl	8002150 <HAL_I2C_Master_Receive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
	 if(res != HAL_OK){
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <i2c_read_data_from_device+0x8e>
      	 printf("Error read data\n");
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <i2c_read_data_from_device+0xb0>)
 8001206:	f008 f98b 	bl	8009520 <puts>
    	 return FALSE;
 800120a:	2300      	movs	r3, #0
 800120c:	e006      	b.n	800121c <i2c_read_data_from_device+0x9c>
     }
     print_hex("read data: ", buffer, buffer_size);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	461a      	mov	r2, r3
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <i2c_read_data_from_device+0xb4>)
 8001216:	f7ff ff4d 	bl	80010b4 <print_hex>
     return TRUE;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001c8 	.word	0x200001c8
 8001228:	0800a7a0 	.word	0x0800a7a0
 800122c:	0800a7cc 	.word	0x0800a7cc
 8001230:	0800a7d8 	.word	0x0800a7d8
 8001234:	0800a7e8 	.word	0x0800a7e8

08001238 <i2c_send_data_to_device>:

extern BOOLEAN i2c_send_data_to_device(uint16_t device_addr, uint8_t *data, uint16_t data_size){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	4613      	mov	r3, r2
 8001246:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, &data[0], data_size, HAL_MAX_DELAY) != HAL_OK){
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	b299      	uxth	r1, r3
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <i2c_send_data_to_device+0x4c>)
 800125a:	f000 fe7b 	bl	8001f54 <HAL_I2C_Master_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <i2c_send_data_to_device+0x36>
    	printf("Error during data transfer\n");
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <i2c_send_data_to_device+0x50>)
 8001266:	f008 f95b 	bl	8009520 <puts>
    	return FALSE;
 800126a:	2300      	movs	r3, #0
 800126c:	e006      	b.n	800127c <i2c_send_data_to_device+0x44>
    }
    print_hex("ack data: ", data, data_size);
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	461a      	mov	r2, r3
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <i2c_send_data_to_device+0x54>)
 8001276:	f7ff ff1d 	bl	80010b4 <print_hex>
	return TRUE;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001c8 	.word	0x200001c8
 8001288:	0800a7f4 	.word	0x0800a7f4
 800128c:	0800a7cc 	.word	0x0800a7cc

08001290 <has_device>:


extern BOOLEAN has_device(UINT16 addr){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	UINT8 state = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
	state = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 30, 5000);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b299      	uxth	r1, r3
 80012a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a8:	221e      	movs	r2, #30
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <has_device+0x48>)
 80012ac:	f001 f976 	bl	800259c <HAL_I2C_IsDeviceReady>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
	if(state == HAL_OK){
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <has_device+0x36>
	    printf("Has device 0x%02X\n", addr);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <has_device+0x4c>)
 80012c0:	f008 f8c0 	bl	8009444 <iprintf>
 80012c4:	e002      	b.n	80012cc <has_device+0x3c>
	} else {
		printf("Device was not found\n");
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <has_device+0x50>)
 80012c8:	f008 f92a 	bl	8009520 <puts>
	}
    return TRUE;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001c8 	.word	0x200001c8
 80012dc:	0800a810 	.word	0x0800a810
 80012e0:	0800a824 	.word	0x0800a824

080012e4 <scan_bus_and_print>:


extern void scan_bus_and_print(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	UINT8 state = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	70fb      	strb	r3, [r7, #3]
	printf("Start scanning slaves I2C:\n");
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <scan_bus_and_print+0x80>)
 80012f0:	f008 f916 	bl	8009520 <puts>
	for(int  i = 0; i < 128; i++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	e02a      	b.n	8001350 <scan_bus_and_print+0x6c>
		state = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 30, 5000);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	b299      	uxth	r1, r3
 8001302:	f241 3388 	movw	r3, #5000	; 0x1388
 8001306:	221e      	movs	r2, #30
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <scan_bus_and_print+0x84>)
 800130a:	f001 f947 	bl	800259c <HAL_I2C_IsDeviceReady>
 800130e:	4603      	mov	r3, r0
 8001310:	70fb      	strb	r3, [r7, #3]
		if(state == HAL_OK){
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d104      	bne.n	8001322 <scan_bus_and_print+0x3e>
			printf(" 0x%02X", i);
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <scan_bus_and_print+0x88>)
 800131c:	f008 f892 	bl	8009444 <iprintf>
 8001320:	e002      	b.n	8001328 <scan_bus_and_print+0x44>
		} else {
			printf("  .  ");
 8001322:	4813      	ldr	r0, [pc, #76]	; (8001370 <scan_bus_and_print+0x8c>)
 8001324:	f008 f88e 	bl	8009444 <iprintf>
		}

		if(i % 12 == 0){
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <scan_bus_and_print+0x90>)
 800132c:	fb83 2301 	smull	r2, r3, r3, r1
 8001330:	105a      	asrs	r2, r3, #1
 8001332:	17cb      	asrs	r3, r1, #31
 8001334:	1ad2      	subs	r2, r2, r3
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	1aca      	subs	r2, r1, r3
 8001340:	2a00      	cmp	r2, #0
 8001342:	d102      	bne.n	800134a <scan_bus_and_print+0x66>
			printf("\n");
 8001344:	200a      	movs	r0, #10
 8001346:	f008 f88f 	bl	8009468 <putchar>
	for(int  i = 0; i < 128; i++){
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3301      	adds	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b7f      	cmp	r3, #127	; 0x7f
 8001354:	ddd1      	ble.n	80012fa <scan_bus_and_print+0x16>
		}
	}
	printf("\nStop scanning.\n");
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <scan_bus_and_print+0x94>)
 8001358:	f008 f8e2 	bl	8009520 <puts>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800a83c 	.word	0x0800a83c
 8001368:	200001c8 	.word	0x200001c8
 800136c:	0800a858 	.word	0x0800a858
 8001370:	0800a860 	.word	0x0800a860
 8001374:	2aaaaaab 	.word	0x2aaaaaab
 8001378:	0800a868 	.word	0x0800a868

0800137c <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <start_indication+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d102      	bne.n	8001392 <start_indication+0x16>
             case 1:
            	 firmware_update();
 800138c:	f000 f806 	bl	800139c <firmware_update>
            	 break;
 8001390:	e000      	b.n	8001394 <start_indication+0x18>
             default:
            	 break;
 8001392:	bf00      	nop
        switch(current_task){
 8001394:	e7f6      	b.n	8001384 <start_indication+0x8>
 8001396:	bf00      	nop
 8001398:	2000021c 	.word	0x2000021c

0800139c <firmware_update>:
        }
	}
}

static void firmware_update(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	if(state == 0){
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <firmware_update+0x30>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <firmware_update+0x1a>
		state = 1;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <firmware_update+0x30>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fe30 	bl	8001014 <set_green_led>
 80013b4:	e005      	b.n	80013c2 <firmware_update+0x26>
	} else {
	    state = 0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <firmware_update+0x30>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fe29 	bl	8001014 <set_green_led>
	}
	osDelay(50);
 80013c2:	2032      	movs	r0, #50	; 0x32
 80013c4:	f004 fe65 	bl	8006092 <osDelay>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000021d 	.word	0x2000021d

080013d0 <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	reset_task();
 80013da:	f000 f809 	bl	80013f0 <reset_task>
	current_task = cmd;
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <set_indication_task+0x1c>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	7013      	strb	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000021c 	.word	0x2000021c

080013f0 <reset_task>:

static void reset_task(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	state = 0;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <reset_task+0x14>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fe0a 	bl	8001014 <set_green_led>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000021d 	.word	0x2000021d

08001408 <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 800140e:	f004 fd2d 	bl	8005e6c <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 8001416:	4a20      	ldr	r2, [pc, #128]	; (8001498 <init_tasks+0x90>)
 8001418:	2100      	movs	r1, #0
 800141a:	4820      	ldr	r0, [pc, #128]	; (800149c <init_tasks+0x94>)
 800141c:	f004 fda7 	bl	8005f6e <osThreadNew>
 8001420:	4603      	mov	r3, r0
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <init_tasks+0x98>)
 8001424:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <init_tasks+0x98>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <init_tasks+0x32>
		 printf("Error init gpio task\n");
 800142e:	481d      	ldr	r0, [pc, #116]	; (80014a4 <init_tasks+0x9c>)
 8001430:	f008 f876 	bl	8009520 <puts>
		 fail_cnt++;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	3301      	adds	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 800143a:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <init_tasks+0xa0>)
 800143c:	2100      	movs	r1, #0
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <init_tasks+0xa4>)
 8001440:	f004 fd95 	bl	8005f6e <osThreadNew>
 8001444:	4603      	mov	r3, r0
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <init_tasks+0xa8>)
 8001448:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <init_tasks+0xa8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <init_tasks+0x56>
		 printf("Error init i2c task\n");
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <init_tasks+0xac>)
 8001454:	f008 f864 	bl	8009520 <puts>
		 fail_cnt++;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3301      	adds	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <init_tasks+0xb0>)
 8001460:	2100      	movs	r1, #0
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <init_tasks+0xb4>)
 8001464:	f004 fd83 	bl	8005f6e <osThreadNew>
 8001468:	4603      	mov	r3, r0
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <init_tasks+0xb8>)
 800146c:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <init_tasks+0xb8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d105      	bne.n	8001482 <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <init_tasks+0xbc>)
 8001478:	f008 f852 	bl	8009520 <puts>
	 	 fail_cnt++;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0800a90c 	.word	0x0800a90c
 800149c:	080014c9 	.word	0x080014c9
 80014a0:	20000220 	.word	0x20000220
 80014a4:	0800a89c 	.word	0x0800a89c
 80014a8:	0800a930 	.word	0x0800a930
 80014ac:	080014f5 	.word	0x080014f5
 80014b0:	20000224 	.word	0x20000224
 80014b4:	0800a8b4 	.word	0x0800a8b4
 80014b8:	0800a954 	.word	0x0800a954
 80014bc:	080014dd 	.word	0x080014dd
 80014c0:	20000228 	.word	0x20000228
 80014c4:	0800a8c8 	.word	0x0800a8c8

080014c8 <init_gpio_task>:


static void init_gpio_task(void *argument){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	gpio_start();
 80014d0:	f7ff fc62 	bl	8000d98 <gpio_start>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <init_ind_task>:

static void init_ind_task(void *argument){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ff49 	bl	800137c <start_indication>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fd43 	bl	8000f88 <set_power>
	osDelay(1000);
 8001502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001506:	f004 fdc4 	bl	8006092 <osDelay>
	while(1){
		osDelay(100);
 800150a:	2064      	movs	r0, #100	; 0x64
 800150c:	f004 fdc1 	bl	8006092 <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001510:	f7ff fd92 	bl	8001038 <get_current_button_state>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f7      	bne.n	800150a <init_i2c_task+0x16>
			if(!is_start){
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <init_i2c_task+0x4c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f3      	bne.n	800150a <init_i2c_task+0x16>
				is_start = TRUE;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <init_i2c_task+0x4c>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff ff51 	bl	80013d0 <set_indication_task>
				update_firmware();
 800152e:	f7ff faf3 	bl	8000b18 <update_firmware>
				is_start = FALSE;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <init_i2c_task+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff ff49 	bl	80013d0 <set_indication_task>
		osDelay(100);
 800153e:	e7e4      	b.n	800150a <init_i2c_task+0x16>
 8001540:	2000022c 	.word	0x2000022c

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f931 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff f8ee 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f93b 	bl	8001822 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f911 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000008 	.word	0x20000008

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000230 	.word	0x20000230

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000230 	.word	0x20000230

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff47 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5c 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_DMA_Start_IT+0x26>
 800185c:	2302      	movs	r3, #2
 800185e:	e040      	b.n	80018e2 <HAL_DMA_Start_IT+0xa8>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d12f      	bne.n	80018d4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f83a 	bl	8001902 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	223f      	movs	r2, #63	; 0x3f
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0216 	orr.w	r2, r2, #22
 80018a8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0208 	orr.w	r2, r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e005      	b.n	80018e0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
 80018de:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800191e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b40      	cmp	r3, #64	; 0x40
 800192e:	d108      	bne.n	8001942 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001940:	e007      	b.n	8001952 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	60da      	str	r2, [r3, #12]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	e159      	b.n	8001c30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 8148 	bne.w	8001c2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d005      	beq.n	80019b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d130      	bne.n	8001a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 0201 	and.w	r2, r3, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d017      	beq.n	8001a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d123      	bne.n	8001aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	08da      	lsrs	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3208      	adds	r2, #8
 8001a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	69b9      	ldr	r1, [r7, #24]
 8001aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0203 	and.w	r2, r3, #3
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80a2 	beq.w	8001c2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a56      	ldr	r2, [pc, #344]	; (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b02:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x202>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_GPIO_Init+0x2f4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x1fe>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_GPIO_Init+0x2f8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x1fa>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_GPIO_Init+0x2fc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x1f6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <HAL_GPIO_Init+0x300>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x1f2>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x204>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c24:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f aea2 	bls.w	800197c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e12b      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fd5c 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d30:	f001 fd00 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a81      	ldr	r2, [pc, #516]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d807      	bhi.n	8001d50 <HAL_I2C_Init+0x84>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_I2C_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e006      	b.n	8001d5e <HAL_I2C_Init+0x92>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a7d      	ldr	r2, [pc, #500]	; (8001f48 <HAL_I2C_Init+0x27c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0e7      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a78      	ldr	r2, [pc, #480]	; (8001f4c <HAL_I2C_Init+0x280>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9b      	lsrs	r3, r3, #18
 8001d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a6a      	ldr	r2, [pc, #424]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d802      	bhi.n	8001da0 <HAL_I2C_Init+0xd4>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	e009      	b.n	8001db4 <HAL_I2C_Init+0xe8>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4a69      	ldr	r2, [pc, #420]	; (8001f50 <HAL_I2C_Init+0x284>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	3301      	adds	r3, #1
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	495c      	ldr	r1, [pc, #368]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001dd0:	428b      	cmp	r3, r1
 8001dd2:	d819      	bhi.n	8001e08 <HAL_I2C_Init+0x13c>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001de8:	400b      	ands	r3, r1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_I2C_Init+0x138>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1e59      	subs	r1, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	e051      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e04f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <HAL_I2C_Init+0x168>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e012      	b.n	8001e5a <HAL_I2C_Init+0x18e>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Init+0x196>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e022      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <HAL_I2C_Init+0x1bc>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e58      	subs	r0, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	440b      	add	r3, r1
 8001e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	e00f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6809      	ldr	r1, [r1, #0]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6911      	ldr	r1, [r2, #16]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	000186a0 	.word	0x000186a0
 8001f44:	001e847f 	.word	0x001e847f
 8001f48:	003d08ff 	.word	0x003d08ff
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	10624dd3 	.word	0x10624dd3

08001f54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	817b      	strh	r3, [r7, #10]
 8001f64:	4613      	mov	r3, r2
 8001f66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fb52 	bl	8001610 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 80e0 	bne.w	800213c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4970      	ldr	r1, [pc, #448]	; (8002148 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fd86 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0d3      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Master_Transmit+0x50>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0cc      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d007      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2221      	movs	r2, #33	; 0x21
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	893a      	ldrh	r2, [r7, #8]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_I2C_Master_Transmit+0x1f8>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fbf0 	bl	80027f8 <I2C_MasterRequestWrite>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e08d      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002038:	e066      	b.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fe00 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x188>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	6a39      	ldr	r1, [r7, #32]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fdf0 	bl	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e01a      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d194      	bne.n	800203a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000

08002150 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fa54 	bl	8001610 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 820b 	bne.w	800258e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	497c      	ldr	r1, [pc, #496]	; (8002374 <HAL_I2C_Master_Receive+0x224>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fc88 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e1fe      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2C_Master_Receive+0x50>
 800219c:	2302      	movs	r3, #2
 800219e:	e1f7      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d007      	beq.n	80021c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2222      	movs	r2, #34	; 0x22
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a5c      	ldr	r2, [pc, #368]	; (8002378 <HAL_I2C_Master_Receive+0x228>)
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fb74 	bl	80028fc <I2C_MasterRequestRead>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1b8      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d113      	bne.n	800224e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e18c      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	2b01      	cmp	r3, #1
 8002254:	d11b      	bne.n	800228e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002264:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e16c      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	2b02      	cmp	r3, #2
 8002294:	d11b      	bne.n	80022ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	e14c      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022f4:	e138      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	f200 80f1 	bhi.w	80024e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b01      	cmp	r3, #1
 8002306:	d123      	bne.n	8002350 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fd1b 	bl	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e139      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800234e:	e10b      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b02      	cmp	r3, #2
 8002356:	d14e      	bne.n	80023f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	2200      	movs	r2, #0
 8002360:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_I2C_Master_Receive+0x22c>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fb98 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e10e      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
 8002372:	bf00      	nop
 8002374:	00100002 	.word	0x00100002
 8002378:	ffff0000 	.word	0xffff0000
 800237c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f4:	e0b8      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	2200      	movs	r2, #0
 80023fe:	4966      	ldr	r1, [pc, #408]	; (8002598 <HAL_I2C_Master_Receive+0x448>)
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fb49 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0bf      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	2200      	movs	r2, #0
 800245a:	494f      	ldr	r1, [pc, #316]	; (8002598 <HAL_I2C_Master_Receive+0x448>)
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fb1b 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e091      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e0:	e042      	b.n	8002568 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fc2e 	bl	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e04c      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d118      	bne.n	8002568 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	f47f aec2 	bne.w	80022f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	00010004 	.word	0x00010004

0800259c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff f830 	bl	8001610 <HAL_GetTick>
 80025b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 8111 	bne.w	80027e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	4988      	ldr	r1, [pc, #544]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fa62 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	e104      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2C_IsDeviceReady+0x50>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e0fd      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d007      	beq.n	8002612 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2224      	movs	r2, #36	; 0x24
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <HAL_I2C_IsDeviceReady+0x258>)
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002644:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2200      	movs	r2, #0
 800264e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa20 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266c:	d103      	bne.n	8002676 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0b6      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002688:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800268a:	f7fe ffc1 	bl	8001610 <HAL_GetTick>
 800268e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b02      	cmp	r3, #2
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026be:	e025      	b.n	800270c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7fe ffa6 	bl	8001610 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <HAL_I2C_IsDeviceReady+0x13a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22a0      	movs	r2, #160	; 0xa0
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2ba0      	cmp	r3, #160	; 0xa0
 8002716:	d005      	beq.n	8002724 <HAL_I2C_IsDeviceReady+0x188>
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_I2C_IsDeviceReady+0x188>
 800271e:	7dbb      	ldrb	r3, [r7, #22]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0cd      	beq.n	80026c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d129      	bne.n	800278e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	4921      	ldr	r1, [pc, #132]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f994 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e036      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e02c      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	490f      	ldr	r1, [pc, #60]	; (80027f0 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f970 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e012      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f4ff af32 	bcc.w	8002636 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	00100002 	.word	0x00100002
 80027f4:	ffff0000 	.word	0xffff0000

080027f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	460b      	mov	r3, r1
 8002806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d006      	beq.n	8002822 <I2C_MasterRequestWrite+0x2a>
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d003      	beq.n	8002822 <I2C_MasterRequestWrite+0x2a>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002820:	d108      	bne.n	8002834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e00b      	b.n	800284c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	2b12      	cmp	r3, #18
 800283a:	d107      	bne.n	800284c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f91d 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002872:	d103      	bne.n	800287c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e035      	b.n	80028ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002888:	d108      	bne.n	800289c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	e01b      	b.n	80028d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800289c:	897b      	ldrh	r3, [r7, #10]
 800289e:	11db      	asrs	r3, r3, #7
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0306 	and.w	r3, r3, #6
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f063 030f 	orn	r3, r3, #15
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <I2C_MasterRequestWrite+0xfc>)
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f943 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e010      	b.n	80028ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <I2C_MasterRequestWrite+0x100>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f933 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010008 	.word	0x00010008
 80028f8:	00010002 	.word	0x00010002

080028fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d006      	beq.n	8002936 <I2C_MasterRequestRead+0x3a>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <I2C_MasterRequestRead+0x3a>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002934:	d108      	bne.n	8002948 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e00b      	b.n	8002960 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b11      	cmp	r3, #17
 800294e:	d107      	bne.n	8002960 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f893 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002986:	d103      	bne.n	8002990 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e079      	b.n	8002a88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299c:	d108      	bne.n	80029b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e05f      	b.n	8002a70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	11db      	asrs	r3, r3, #7
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f003 0306 	and.w	r3, r3, #6
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f063 030f 	orn	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4930      	ldr	r1, [pc, #192]	; (8002a90 <I2C_MasterRequestRead+0x194>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8b9 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e054      	b.n	8002a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4929      	ldr	r1, [pc, #164]	; (8002a94 <I2C_MasterRequestRead+0x198>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f8a9 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e044      	b.n	8002a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f831 	bl	8002a98 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d103      	bne.n	8002a54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e017      	b.n	8002a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	11db      	asrs	r3, r3, #7
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 0306 	and.w	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f063 030e 	orn	r3, r3, #14
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <I2C_MasterRequestRead+0x198>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f865 	bl	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	00010008 	.word	0x00010008
 8002a94:	00010002 	.word	0x00010002

08002a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa8:	e025      	b.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d021      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe fdad 	bl	8001610 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e023      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	e00c      	b.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d0b6      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b54:	e051      	b.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d123      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e046      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fd2b 	bl	8001610 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e020      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10c      	bne.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e00b      	b.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d18d      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e02d      	b.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8ce 	bl	8002df4 <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e02d      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fcd1 	bl	8001610 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e007      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d1ca      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd2:	e02d      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f88d 	bl	8002df4 <I2C_IsAcknowledgeFailed>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e02d      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cea:	d021      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe fc90 	bl	8001610 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d1ca      	bne.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d54:	e042      	b.n	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d119      	bne.n	8002d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e029      	b.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7fe fc3a 	bl	8001610 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e007      	b.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d1b5      	bne.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d11b      	bne.n	8002e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e267      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d075      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b85      	ldr	r3, [pc, #532]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e242      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x74>
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a75      	ldr	r2, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6c      	ldr	r2, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a68      	ldr	r2, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fb80 	bl	8001610 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fb7c 	bl	8001610 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e207      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fb6c 	bl	8001610 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fb68 	bl	8001610 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1f3      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1c7      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x244>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe fb21 	bl	8001610 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fb1d 	bl	8001610 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a8      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4925      	ldr	r1, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x244>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fb00 	bl	8001610 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe fafc 	bl	8001610 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e187      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d036      	beq.n	80030ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x248>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fae0 	bl	8001610 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe fadc 	bl	8001610 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e167      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x240>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x200>
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x248>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fac9 	bl	8001610 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e00e      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe fac5 	bl	8001610 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e150      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8097 	beq.w	80031e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a7c      	ldr	r2, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b77      	ldr	r3, [pc, #476]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b74      	ldr	r3, [pc, #464]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe fa85 	bl	8001610 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe fa81 	bl	8001610 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e10c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_OscConfig+0x474>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x2ea>
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	e01c      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x30c>
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5b      	ldr	r2, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	4b55      	ldr	r3, [pc, #340]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 0304 	bic.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fa46 	bl	8001610 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe fa42 	bl	8001610 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0cb      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ee      	beq.n	8003188 <HAL_RCC_OscConfig+0x334>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fe fa30 	bl	8001610 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe fa2c 	bl	8001610 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0b5      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ee      	bne.n	80031b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a1 	beq.w	8003334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d05c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d141      	bne.n	800328a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fa00 	bl	8001610 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe f9fc 	bl	8001610 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e087      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe f9d5 	bl	8001610 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe f9d1 	bl	8001610 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e05c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x416>
 8003288:	e054      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x478>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe f9be 	bl	8001610 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe f9ba 	bl	8001610 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e045      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x470>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x444>
 80032b6:	e03d      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e038      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d028      	beq.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d121      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d11a      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d111      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fe f8ec 	bl	8001610 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe f8e8 	bl	8001610 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe f84c 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	0800a8f4 	.word	0x0800a8f4
 8003508:	20000000 	.word	0x20000000
 800350c:	20000008 	.word	0x20000008

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b094      	sub	sp, #80	; 0x50
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
 800351c:	2300      	movs	r3, #0
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003520:	2300      	movs	r3, #0
 8003522:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b79      	ldr	r3, [pc, #484]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80e1 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e0db      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003548:	e0db      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b73      	ldr	r3, [pc, #460]	; (8003718 <HAL_RCC_GetSysClockFreq+0x208>)
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354e:	e0d8      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b6f      	ldr	r3, [pc, #444]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b6d      	ldr	r3, [pc, #436]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003570:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
 800357e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003582:	4622      	mov	r2, r4
 8003584:	462b      	mov	r3, r5
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	0159      	lsls	r1, r3, #5
 8003590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003594:	0150      	lsls	r0, r2, #5
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4621      	mov	r1, r4
 800359c:	1a51      	subs	r1, r2, r1
 800359e:	6139      	str	r1, [r7, #16]
 80035a0:	4629      	mov	r1, r5
 80035a2:	eb63 0301 	sbc.w	r3, r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	018b      	lsls	r3, r1, #6
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035be:	4651      	mov	r1, sl
 80035c0:	018a      	lsls	r2, r1, #6
 80035c2:	4651      	mov	r1, sl
 80035c4:	ebb2 0801 	subs.w	r8, r2, r1
 80035c8:	4659      	mov	r1, fp
 80035ca:	eb63 0901 	sbc.w	r9, r3, r1
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e2:	4690      	mov	r8, r2
 80035e4:	4699      	mov	r9, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	eb18 0303 	adds.w	r3, r8, r3
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	462b      	mov	r3, r5
 80035f0:	eb49 0303 	adc.w	r3, r9, r3
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003602:	4629      	mov	r1, r5
 8003604:	024b      	lsls	r3, r1, #9
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360c:	4621      	mov	r1, r4
 800360e:	024a      	lsls	r2, r1, #9
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003620:	f7fc fe36 	bl	8000290 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362c:	e058      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362e:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	2200      	movs	r2, #0
 8003636:	4618      	mov	r0, r3
 8003638:	4611      	mov	r1, r2
 800363a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	0159      	lsls	r1, r3, #5
 8003656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365a:	0150      	lsls	r0, r2, #5
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4641      	mov	r1, r8
 8003662:	ebb2 0a01 	subs.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb63 0b01 	sbc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800367c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003680:	ebb2 040a 	subs.w	r4, r2, sl
 8003684:	eb63 050b 	sbc.w	r5, r3, fp
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	00eb      	lsls	r3, r5, #3
 8003692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003696:	00e2      	lsls	r2, r4, #3
 8003698:	4614      	mov	r4, r2
 800369a:	461d      	mov	r5, r3
 800369c:	4643      	mov	r3, r8
 800369e:	18e3      	adds	r3, r4, r3
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	464b      	mov	r3, r9
 80036a4:	eb45 0303 	adc.w	r3, r5, r3
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036b6:	4629      	mov	r1, r5
 80036b8:	028b      	lsls	r3, r1, #10
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c0:	4621      	mov	r1, r4
 80036c2:	028a      	lsls	r2, r1, #10
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ca:	2200      	movs	r2, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d4:	f7fc fddc 	bl	8000290 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4613      	mov	r3, r2
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003704:	4618      	mov	r0, r3
 8003706:	3750      	adds	r7, #80	; 0x50
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4903      	ldr	r1, [pc, #12]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	0800a904 	.word	0x0800a904

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffdc 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0b5b      	lsrs	r3, r3, #13
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0800a904 	.word	0x0800a904

08003784 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd f849 	bl	8000840 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2203      	movs	r2, #3
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f814 	bl	80037e4 <HAL_SD_InitCard>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00a      	b.n	80037dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
 80037e8:	af04      	add	r7, sp, #16
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003800:	2376      	movs	r3, #118	; 0x76
 8003802:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681d      	ldr	r5, [r3, #0]
 8003808:	466c      	mov	r4, sp
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381c:	4628      	mov	r0, r5
 800381e:	f001 fb0b 	bl	8004e38 <SDIO_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e04f      	b.n	80038d4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_SD_InitCard+0xf8>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb32 	bl	8004ea8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_SD_InitCard+0xf8>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800384a:	2002      	movs	r0, #2
 800384c:	f7fd feec 	bl	8001628 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fe11 	bl	8004478 <SD_PowerON>
 8003856:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e02e      	b.n	80038d4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fd30 	bl	80042dc <SD_InitCard>
 800387c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e01b      	b.n	80038d4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fb91 	bl	8004fcc <SDMMC_CmdBlockLength>
 80038aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00f      	beq.n	80038d2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_SD_InitCard+0xfc>)
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bdb0      	pop	{r4, r5, r7, pc}
 80038dc:	422580a0 	.word	0x422580a0
 80038e0:	004005ff 	.word	0x004005ff

080038e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	; 0x30
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0c0      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 80b9 	bne.w	8003a8c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	429a      	cmp	r2, r3
 800392c:	d907      	bls.n	800393e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0a7      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2203      	movs	r2, #3
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a4b      	ldr	r2, [pc, #300]	; (8003a9c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3380      	adds	r3, #128	; 0x80
 80039a8:	4619      	mov	r1, r3
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	f7fd ff42 	bl	800183a <HAL_DMA_Start_IT>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a33      	ldr	r2, [pc, #204]	; (8003aa0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e050      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	025b      	lsls	r3, r3, #9
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	025b      	lsls	r3, r3, #9
 8003a0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003a0c:	2390      	movs	r3, #144	; 0x90
 8003a0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a10:	2302      	movs	r3, #2
 8003a12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 faa4 	bl	8004f74 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d90a      	bls.n	8003a48 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2282      	movs	r2, #130	; 0x82
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fb08 	bl	8005054 <SDMMC_CmdReadMultiBlock>
 8003a44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a46:	e009      	b.n	8003a5c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2281      	movs	r2, #129	; 0x81
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fadb 	bl	8005010 <SDMMC_CmdReadSingleBlock>
 8003a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e002      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	080041c7 	.word	0x080041c7
 8003a9c:	08004239 	.word	0x08004239
 8003aa0:	004005ff 	.word	0x004005ff
 8003aa4:	4225858c 	.word	0x4225858c

08003aa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	; 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0c5      	b.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 80be 	bne.w	8003c5a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	441a      	add	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d907      	bls.n	8003b02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0ac      	b.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	4a4e      	ldr	r2, [pc, #312]	; (8003c64 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4a4d      	ldr	r2, [pc, #308]	; (8003c68 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003b34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d002      	beq.n	8003b4c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	025b      	lsls	r3, r3, #9
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d90a      	bls.n	8003b68 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	22a0      	movs	r2, #160	; 0xa0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fabc 	bl	80050dc <SDMMC_CmdWriteMultiBlock>
 8003b64:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b66:	e009      	b.n	8003b7c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2290      	movs	r2, #144	; 0x90
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fa8f 	bl	8005098 <SDMMC_CmdWriteSingleBlock>
 8003b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a39      	ldr	r2, [pc, #228]	; (8003c6c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e059      	b.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3380      	adds	r3, #128	; 0x80
 8003bde:	461a      	mov	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	f7fd fe28 	bl	800183a <HAL_DMA_Start_IT>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01c      	beq.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003bfe:	f023 0302 	bic.w	r3, r3, #2
 8003c02:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e018      	b.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	025b      	lsls	r3, r3, #9
 8003c34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c36:	2390      	movs	r3, #144	; 0x90
 8003c38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f107 0210 	add.w	r2, r7, #16
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f98f 	bl	8004f74 <SDIO_ConfigData>

      return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3730      	adds	r7, #48	; 0x30
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	0800419d 	.word	0x0800419d
 8003c68:	08004239 	.word	0x08004239
 8003c6c:	004005ff 	.word	0x004005ff
 8003c70:	4225858c 	.word	0x4225858c

08003c74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c96:	0f9b      	lsrs	r3, r3, #30
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb4:	0e1b      	lsrs	r3, r3, #24
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce8:	0d1b      	lsrs	r3, r3, #20
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d06:	0bdb      	lsrs	r3, r3, #15
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	0b9b      	lsrs	r3, r3, #14
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3c:	0b1b      	lsrs	r3, r3, #12
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d163      	bne.n	8003e20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5c:	009a      	lsls	r2, r3, #2
 8003d5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d62:	4013      	ands	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d68:	0f92      	lsrs	r2, r2, #30
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	0edb      	lsrs	r3, r3, #27
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	0e1b      	lsrs	r3, r3, #24
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	0d5b      	lsrs	r3, r3, #21
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbc:	0bdb      	lsrs	r3, r3, #15
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	7e1b      	ldrb	r3, [r3, #24]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	3302      	adds	r3, #2
 8003de0:	2201      	movs	r2, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	7a1b      	ldrb	r3, [r3, #8]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e0c:	0a52      	lsrs	r2, r2, #9
 8003e0e:	fb03 f202 	mul.w	r2, r3, r2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60
 8003e1e:	e031      	b.n	8003e84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d11d      	bne.n	8003e64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	3301      	adds	r3, #1
 8003e44:	029a      	lsls	r2, r3, #10
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60
 8003e62:	e00f      	b.n	8003e84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_SD_GetCardCSD+0x344>)
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e09d      	b.n	8003fc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e88:	0b9b      	lsrs	r3, r3, #14
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	09db      	lsrs	r3, r3, #7
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	0fdb      	lsrs	r3, r3, #31
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	0f5b      	lsrs	r3, r3, #29
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	0d9b      	lsrs	r3, r3, #22
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	0d5b      	lsrs	r3, r3, #21
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	0bdb      	lsrs	r3, r3, #15
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	0b9b      	lsrs	r3, r3, #14
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	0b5b      	lsrs	r3, r3, #13
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	0b1b      	lsrs	r3, r3, #12
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	0a9b      	lsrs	r3, r3, #10
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	004005ff 	.word	0x004005ff

08003fd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004028:	b5b0      	push	{r4, r5, r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af04      	add	r7, sp, #16
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2203      	movs	r2, #3
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	2b03      	cmp	r3, #3
 8004046:	d02e      	beq.n	80040a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	d106      	bne.n	800405e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
 800405c:	e029      	b.n	80040b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004064:	d10a      	bne.n	800407c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fabc 	bl	80045e4 <SD_WideBus_Enable>
 800406c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
 800407a:	e01a      	b.n	80040b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 faf9 	bl	800467a <SD_WideBus_Disable>
 8004088:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
 8004096:	e00c      	b.n	80040b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
 80040a4:	e005      	b.n	80040b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040d0:	e01f      	b.n	8004112 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681d      	ldr	r5, [r3, #0]
 80040f8:	466c      	mov	r4, sp
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fe93 	bl	8004e38 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f44f 7100 	mov.w	r1, #512	; 0x200
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ff56 	bl	8004fcc <SDMMC_CmdBlockLength>
 8004120:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00c      	beq.n	8004142 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <HAL_SD_ConfigWideBusOperation+0x130>)
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800414a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bdb0      	pop	{r4, r5, r7, pc}
 8004156:	bf00      	nop
 8004158:	004005ff 	.word	0x004005ff

0800415c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa10 	bl	8004594 <SD_SendStatus>
 8004174:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004192:	693b      	ldr	r3, [r7, #16]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	2b82      	cmp	r3, #130	; 0x82
 80041da:	d111      	bne.n	8004200 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ff9d 	bl	8005120 <SDMMC_CmdStopTransfer>
 80041e6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fd3a 	bl	8003c74 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0208 	bic.w	r2, r2, #8
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f240 523a 	movw	r2, #1338	; 0x53a
 8004218:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f001 fbf1 	bl	8005a10 <HAL_SD_RxCpltCallback>
#endif
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fb4f 	bl	80018ea <HAL_DMA_GetError>
 800424c:	4603      	mov	r3, r0
 800424e:	2b02      	cmp	r3, #2
 8004250:	d03e      	beq.n	80042d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d002      	beq.n	800426e <SD_DMAError+0x36>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d12d      	bne.n	80042ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <SD_DMAError+0xa0>)
 8004274:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7ff ff62 	bl	800415c <HAL_SD_GetCardState>
 8004298:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b06      	cmp	r3, #6
 800429e:	d002      	beq.n	80042a6 <SD_DMAError+0x6e>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d10a      	bne.n	80042bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ff38 	bl	8005120 <SDMMC_CmdStopTransfer>
 80042b0:	4602      	mov	r2, r0
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	431a      	orrs	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff fcd2 	bl	8003c74 <HAL_SD_ErrorCallback>
#endif
  }
}
 80042d0:	bf00      	nop
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	004005ff 	.word	0x004005ff

080042dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042dc:	b5b0      	push	{r4, r5, r7, lr}
 80042de:	b094      	sub	sp, #80	; 0x50
 80042e0:	af04      	add	r7, sp, #16
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80042e4:	2301      	movs	r3, #1
 80042e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fde9 	bl	8004ec4 <SDIO_GetPowerState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042fc:	e0b8      	b.n	8004470 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	2b03      	cmp	r3, #3
 8004304:	d02f      	beq.n	8004366 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f812 	bl	8005334 <SDMMC_CmdSendCID>
 8004310:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <SD_InitCard+0x40>
    {
      return errorstate;
 8004318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431a:	e0a9      	b.n	8004470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fe13 	bl	8004f4e <SDIO_GetResponse>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2104      	movs	r1, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fe0a 	bl	8004f4e <SDIO_GetResponse>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2108      	movs	r1, #8
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fe01 	bl	8004f4e <SDIO_GetResponse>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	210c      	movs	r1, #12
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fdf8 	bl	8004f4e <SDIO_GetResponse>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2b03      	cmp	r3, #3
 800436c:	d00d      	beq.n	800438a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f107 020e 	add.w	r2, r7, #14
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f818 	bl	80053ae <SDMMC_CmdSetRelAdd>
 800437e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <SD_InitCard+0xae>
    {
      return errorstate;
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	e072      	b.n	8004470 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	2b03      	cmp	r3, #3
 8004390:	d036      	beq.n	8004400 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 ffe2 	bl	8005370 <SDMMC_CmdSendCSD>
 80043ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80043b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b6:	e05b      	b.n	8004470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fdc5 	bl	8004f4e <SDIO_GetResponse>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2104      	movs	r1, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fdbc 	bl	8004f4e <SDIO_GetResponse>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2108      	movs	r1, #8
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fdb3 	bl	8004f4e <SDIO_GetResponse>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	210c      	movs	r1, #12
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fdaa 	bl	8004f4e <SDIO_GetResponse>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2104      	movs	r1, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fda1 	bl	8004f4e <SDIO_GetResponse>
 800440c:	4603      	mov	r3, r0
 800440e:	0d1a      	lsrs	r2, r3, #20
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fc34 	bl	8003c88 <HAL_SD_GetCardCSD>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004426:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800442a:	e021      	b.n	8004470 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	2200      	movs	r2, #0
 8004438:	461c      	mov	r4, r3
 800443a:	4615      	mov	r5, r2
 800443c:	4622      	mov	r2, r4
 800443e:	462b      	mov	r3, r5
 8004440:	4608      	mov	r0, r1
 8004442:	f000 fe8f 	bl	8005164 <SDMMC_CmdSelDesel>
 8004446:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <SD_InitCard+0x176>
  {
    return errorstate;
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	e00e      	b.n	8004470 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681d      	ldr	r5, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	466c      	mov	r4, sp
 800445a:	f103 0210 	add.w	r2, r3, #16
 800445e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004464:	3304      	adds	r3, #4
 8004466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004468:	4628      	mov	r0, r5
 800446a:	f000 fce5 	bl	8004e38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3740      	adds	r7, #64	; 0x40
 8004474:	46bd      	mov	sp, r7
 8004476:	bdb0      	pop	{r4, r5, r7, pc}

08004478 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fe8a 	bl	80051aa <SDMMC_CmdGoIdleState>
 8004496:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	e072      	b.n	8004588 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fe9d 	bl	80051e6 <SDMMC_CmdOperCond>
 80044ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fe73 	bl	80051aa <SDMMC_CmdGoIdleState>
 80044c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	e05b      	b.n	8004588 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d137      	bne.n	800454e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fe9d 	bl	8005224 <SDMMC_CmdAppCommand>
 80044ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d02d      	beq.n	800454e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044f6:	e047      	b.n	8004588 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fe90 	bl	8005224 <SDMMC_CmdAppCommand>
 8004504:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <SD_PowerON+0x98>
    {
      return errorstate;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e03b      	b.n	8004588 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	491e      	ldr	r1, [pc, #120]	; (8004590 <SD_PowerON+0x118>)
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fea6 	bl	8005268 <SDMMC_CmdAppOperCommand>
 800451c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004528:	e02e      	b.n	8004588 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd0c 	bl	8004f4e <SDIO_GetResponse>
 8004536:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	0fdb      	lsrs	r3, r3, #31
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <SD_PowerON+0xcc>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <SD_PowerON+0xce>
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]

    count++;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3301      	adds	r3, #1
 800454c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004554:	4293      	cmp	r3, r2
 8004556:	d802      	bhi.n	800455e <SD_PowerON+0xe6>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0cc      	beq.n	80044f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004564:	4293      	cmp	r3, r2
 8004566:	d902      	bls.n	800456e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800456c:	e00c      	b.n	8004588 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
 800457e:	e002      	b.n	8004586 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	c1100000 	.word	0xc1100000

08004594 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80045a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045a8:	e018      	b.n	80045dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f000 ff1a 	bl	80053f0 <SDMMC_CmdSendStatus>
 80045bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	e009      	b.n	80045dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fcbd 	bl	8004f4e <SDIO_GetResponse>
 80045d4:	4602      	mov	r2, r0
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fca7 	bl	8004f4e <SDIO_GetResponse>
 8004600:	4603      	mov	r3, r0
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800460a:	d102      	bne.n	8004612 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800460c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004610:	e02f      	b.n	8004672 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f879 	bl	8004710 <SD_FindSCR>
 800461e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	e023      	b.n	8004672 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01c      	beq.n	800466e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	041b      	lsls	r3, r3, #16
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 fdef 	bl	8005224 <SDMMC_CmdAppCommand>
 8004646:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e00f      	b.n	8004672 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fe28 	bl	80052ae <SDMMC_CmdBusWidth>
 800465e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	e003      	b.n	8004672 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800466a:	2300      	movs	r3, #0
 800466c:	e001      	b.n	8004672 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800466e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fc5c 	bl	8004f4e <SDIO_GetResponse>
 8004696:	4603      	mov	r3, r0
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a0:	d102      	bne.n	80046a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80046a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046a6:	e02f      	b.n	8004708 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f82e 	bl	8004710 <SD_FindSCR>
 80046b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	e023      	b.n	8004708 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01c      	beq.n	8004704 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 fda4 	bl	8005224 <SDMMC_CmdAppCommand>
 80046dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	e00f      	b.n	8004708 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fddd 	bl	80052ae <SDMMC_CmdBusWidth>
 80046f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	e003      	b.n	8004708 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004700:	2300      	movs	r3, #0
 8004702:	e001      	b.n	8004708 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004704:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b08f      	sub	sp, #60	; 0x3c
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800471a:	f7fc ff79 	bl	8001610 <HAL_GetTick>
 800471e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2108      	movs	r1, #8
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fc48 	bl	8004fcc <SDMMC_CmdBlockLength>
 800473c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	e0b2      	b.n	80048ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fd65 	bl	8005224 <SDMMC_CmdAppCommand>
 800475a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	e0a3      	b.n	80048ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800476c:	2308      	movs	r3, #8
 800476e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004770:	2330      	movs	r3, #48	; 0x30
 8004772:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004774:	2302      	movs	r3, #2
 8004776:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800477c:	2301      	movs	r3, #1
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f107 0210 	add.w	r2, r7, #16
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fbf2 	bl	8004f74 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fdac 	bl	80052f2 <SDMMC_CmdSendSCR>
 800479a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d02a      	beq.n	80047f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	e083      	b.n	80048ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00f      	beq.n	80047d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	f107 0208 	add.w	r2, r7, #8
 80047c0:	18d4      	adds	r4, r2, r3
 80047c2:	4608      	mov	r0, r1
 80047c4:	f000 fb63 	bl	8004e8e <SDIO_ReadFIFO>
 80047c8:	4603      	mov	r3, r0
 80047ca:	6023      	str	r3, [r4, #0]
      index++;
 80047cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ce:	3301      	adds	r3, #1
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	e006      	b.n	80047e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d012      	beq.n	8004808 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80047e2:	f7fc ff15 	bl	8001610 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d102      	bne.n	80047f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80047f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047f6:	e05a      	b.n	80048ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0cf      	beq.n	80047a6 <SD_FindSCR+0x96>
 8004806:	e000      	b.n	800480a <SD_FindSCR+0xfa>
      break;
 8004808:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2208      	movs	r2, #8
 800481e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004820:	2308      	movs	r3, #8
 8004822:	e044      	b.n	80048ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2202      	movs	r2, #2
 8004838:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800483a:	2302      	movs	r3, #2
 800483c:	e037      	b.n	80048ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2220      	movs	r2, #32
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004854:	2320      	movs	r3, #32
 8004856:	e02a      	b.n	80048ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004860:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	061a      	lsls	r2, r3, #24
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800486e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004878:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	601a      	str	r2, [r3, #0]
    scr++;
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	3304      	adds	r3, #4
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	061a      	lsls	r2, r3, #24
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004896:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	373c      	adds	r7, #60	; 0x3c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}

080048b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e03f      	b.n	8004948 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fc f817 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2224      	movs	r2, #36	; 0x24
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f828 	bl	8004950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800492e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004954:	b0c0      	sub	sp, #256	; 0x100
 8004956:	af00      	add	r7, sp, #0
 8004958:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	68d9      	ldr	r1, [r3, #12]
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	ea40 0301 	orr.w	r3, r0, r1
 8004978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	431a      	orrs	r2, r3
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049a8:	f021 010c 	bic.w	r1, r1, #12
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b6:	430b      	orrs	r3, r1
 80049b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	6999      	ldr	r1, [r3, #24]
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	ea40 0301 	orr.w	r3, r0, r1
 80049d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b8f      	ldr	r3, [pc, #572]	; (8004c1c <UART_SetConfig+0x2cc>)
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d005      	beq.n	80049f0 <UART_SetConfig+0xa0>
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b8d      	ldr	r3, [pc, #564]	; (8004c20 <UART_SetConfig+0x2d0>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d104      	bne.n	80049fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7fe feb4 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80049f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049f8:	e003      	b.n	8004a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049fa:	f7fe fe9b 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 80049fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	f040 810c 	bne.w	8004c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a22:	4622      	mov	r2, r4
 8004a24:	462b      	mov	r3, r5
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a32:	4621      	mov	r1, r4
 8004a34:	eb12 0801 	adds.w	r8, r2, r1
 8004a38:	4629      	mov	r1, r5
 8004a3a:	eb43 0901 	adc.w	r9, r3, r1
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a52:	4690      	mov	r8, r2
 8004a54:	4699      	mov	r9, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	eb18 0303 	adds.w	r3, r8, r3
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a60:	462b      	mov	r3, r5
 8004a62:	eb49 0303 	adc.w	r3, r9, r3
 8004a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a7e:	460b      	mov	r3, r1
 8004a80:	18db      	adds	r3, r3, r3
 8004a82:	653b      	str	r3, [r7, #80]	; 0x50
 8004a84:	4613      	mov	r3, r2
 8004a86:	eb42 0303 	adc.w	r3, r2, r3
 8004a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a94:	f7fb fbfc 	bl	8000290 <__aeabi_uldivmod>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	011c      	lsls	r4, r3, #4
 8004aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ac8:	4641      	mov	r1, r8
 8004aca:	eb12 0a01 	adds.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae8:	4692      	mov	sl, r2
 8004aea:	469b      	mov	fp, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	eb1a 0303 	adds.w	r3, sl, r3
 8004af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004af6:	464b      	mov	r3, r9
 8004af8:	eb4b 0303 	adc.w	r3, fp, r3
 8004afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b14:	460b      	mov	r3, r1
 8004b16:	18db      	adds	r3, r3, r3
 8004b18:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
 8004b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b2a:	f7fb fbb1 	bl	8000290 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004b36:	fba3 2301 	umull	r2, r3, r3, r1
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2264      	movs	r2, #100	; 0x64
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	1acb      	subs	r3, r1, r3
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b4a:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b58:	441c      	add	r4, r3
 8004b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	1891      	adds	r1, r2, r2
 8004b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b74:	415b      	adcs	r3, r3
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	1851      	adds	r1, r2, r1
 8004b80:	6339      	str	r1, [r7, #48]	; 0x30
 8004b82:	4649      	mov	r1, r9
 8004b84:	414b      	adcs	r3, r1
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b94:	4659      	mov	r1, fp
 8004b96:	00cb      	lsls	r3, r1, #3
 8004b98:	4651      	mov	r1, sl
 8004b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	00ca      	lsls	r2, r1, #3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4642      	mov	r2, r8
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	460a      	mov	r2, r1
 8004bb4:	eb42 0303 	adc.w	r3, r2, r3
 8004bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	18db      	adds	r3, r3, r3
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	eb42 0303 	adc.w	r3, r2, r3
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004be6:	f7fb fb53 	bl	8000290 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	2164      	movs	r1, #100	; 0x64
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	3332      	adds	r3, #50	; 0x32
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <UART_SetConfig+0x2d4>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	f003 0207 	and.w	r2, r3, #7
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4422      	add	r2, r4
 8004c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c18:	e106      	b.n	8004e28 <UART_SetConfig+0x4d8>
 8004c1a:	bf00      	nop
 8004c1c:	40011000 	.word	0x40011000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	6239      	str	r1, [r7, #32]
 8004c42:	415b      	adcs	r3, r3
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	1854      	adds	r4, r2, r1
 8004c4e:	4649      	mov	r1, r9
 8004c50:	eb43 0501 	adc.w	r5, r3, r1
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	00eb      	lsls	r3, r5, #3
 8004c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c62:	00e2      	lsls	r2, r4, #3
 8004c64:	4614      	mov	r4, r2
 8004c66:	461d      	mov	r5, r3
 8004c68:	4643      	mov	r3, r8
 8004c6a:	18e3      	adds	r3, r4, r3
 8004c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c70:	464b      	mov	r3, r9
 8004c72:	eb45 0303 	adc.w	r3, r5, r3
 8004c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c96:	4629      	mov	r1, r5
 8004c98:	008b      	lsls	r3, r1, #2
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	008a      	lsls	r2, r1, #2
 8004ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ca8:	f7fb faf2 	bl	8000290 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4b60      	ldr	r3, [pc, #384]	; (8004e34 <UART_SetConfig+0x4e4>)
 8004cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	011c      	lsls	r4, r3, #4
 8004cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	1891      	adds	r1, r2, r2
 8004cd2:	61b9      	str	r1, [r7, #24]
 8004cd4:	415b      	adcs	r3, r3
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cdc:	4641      	mov	r1, r8
 8004cde:	1851      	adds	r1, r2, r1
 8004ce0:	6139      	str	r1, [r7, #16]
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	414b      	adcs	r3, r1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	00cb      	lsls	r3, r1, #3
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cfe:	4651      	mov	r1, sl
 8004d00:	00ca      	lsls	r2, r1, #3
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	4642      	mov	r2, r8
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d10:	464b      	mov	r3, r9
 8004d12:	460a      	mov	r2, r1
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d34:	4649      	mov	r1, r9
 8004d36:	008b      	lsls	r3, r1, #2
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d3e:	4641      	mov	r1, r8
 8004d40:	008a      	lsls	r2, r1, #2
 8004d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d46:	f7fb faa3 	bl	8000290 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 2301 	umull	r2, r3, r3, r1
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2264      	movs	r2, #100	; 0x64
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	1acb      	subs	r3, r1, r3
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	3332      	adds	r3, #50	; 0x32
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <UART_SetConfig+0x4e4>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	673b      	str	r3, [r7, #112]	; 0x70
 8004d7a:	677a      	str	r2, [r7, #116]	; 0x74
 8004d7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d90:	4641      	mov	r1, r8
 8004d92:	1851      	adds	r1, r2, r1
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	4649      	mov	r1, r9
 8004d98:	414b      	adcs	r3, r1
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004da8:	4659      	mov	r1, fp
 8004daa:	00cb      	lsls	r3, r1, #3
 8004dac:	4651      	mov	r1, sl
 8004dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db2:	4651      	mov	r1, sl
 8004db4:	00ca      	lsls	r2, r1, #3
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	460a      	mov	r2, r1
 8004dc6:	eb42 0303 	adc.w	r3, r2, r3
 8004dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd6:	667a      	str	r2, [r7, #100]	; 0x64
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004de4:	4649      	mov	r1, r9
 8004de6:	008b      	lsls	r3, r1, #2
 8004de8:	4641      	mov	r1, r8
 8004dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dee:	4641      	mov	r1, r8
 8004df0:	008a      	lsls	r2, r1, #2
 8004df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004df6:	f7fb fa4b 	bl	8000290 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <UART_SetConfig+0x4e4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	; 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	3332      	adds	r3, #50	; 0x32
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <UART_SetConfig+0x4e4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 020f 	and.w	r2, r3, #15
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4422      	add	r2, r4
 8004e26:	609a      	str	r2, [r3, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e34:	51eb851f 	.word	0x51eb851f

08004e38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e38:	b084      	sub	sp, #16
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	f107 001c 	add.w	r0, r7, #28
 8004e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004e56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004e5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004e5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	b004      	add	sp, #16
 8004e8c:	4770      	bx	lr

08004e8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004efe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f04:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f1a:	f023 030f 	bic.w	r3, r3, #15
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	b2db      	uxtb	r3, r3
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
}  
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f9a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004fa0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004fa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0

}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004fda:	2310      	movs	r3, #16
 8004fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fde:	2340      	movs	r3, #64	; 0x40
 8004fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff ff74 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	2110      	movs	r1, #16
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa18 	bl	8005434 <SDMMC_GetCmdResp1>
 8005004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005006:	69fb      	ldr	r3, [r7, #28]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800501e:	2311      	movs	r3, #17
 8005020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800502a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff52 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	2111      	movs	r1, #17
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9f6 	bl	8005434 <SDMMC_GetCmdResp1>
 8005048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005062:	2312      	movs	r3, #18
 8005064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ff30 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	2112      	movs	r1, #18
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f9d4 	bl	8005434 <SDMMC_GetCmdResp1>
 800508c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800508e:	69fb      	ldr	r3, [r7, #28]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80050a6:	2318      	movs	r3, #24
 80050a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff0e 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	2118      	movs	r1, #24
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9b2 	bl	8005434 <SDMMC_GetCmdResp1>
 80050d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d2:	69fb      	ldr	r3, [r7, #28]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80050ea:	2319      	movs	r3, #25
 80050ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050fc:	f107 0308 	add.w	r3, r7, #8
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff feec 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	2119      	movs	r1, #25
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f990 	bl	8005434 <SDMMC_GetCmdResp1>
 8005114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005116:	69fb      	ldr	r3, [r7, #28]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800512c:	230c      	movs	r3, #12
 800512e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005130:	2340      	movs	r3, #64	; 0x40
 8005132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800513e:	f107 0308 	add.w	r3, r7, #8
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fecb 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <SDMMC_CmdStopTransfer+0x40>)
 800514c:	210c      	movs	r1, #12
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f970 	bl	8005434 <SDMMC_GetCmdResp1>
 8005154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	05f5e100 	.word	0x05f5e100

08005164 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005174:	2307      	movs	r3, #7
 8005176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005184:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fea7 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	2107      	movs	r1, #7
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f94b 	bl	8005434 <SDMMC_GetCmdResp1>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b088      	sub	sp, #32
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c8:	f107 0308 	add.w	r3, r7, #8
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fe86 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb65 	bl	80058a4 <SDMMC_GetCmdError>
 80051da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80051ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80051f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80051f4:	2308      	movs	r3, #8
 80051f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005204:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fe67 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 faf8 	bl	8005808 <SDMMC_GetCmdResp7>
 8005218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800521a:	69fb      	ldr	r3, [r7, #28]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005232:	2337      	movs	r3, #55	; 0x37
 8005234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800523e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fe48 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005250:	f241 3288 	movw	r2, #5000	; 0x1388
 8005254:	2137      	movs	r1, #55	; 0x37
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8ec 	bl	8005434 <SDMMC_GetCmdResp1>
 800525c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800525e:	69fb      	ldr	r3, [r7, #28]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800527e:	2329      	movs	r3, #41	; 0x29
 8005280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005282:	2340      	movs	r3, #64	; 0x40
 8005284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800528a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005290:	f107 0308 	add.w	r3, r7, #8
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fe22 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f9ff 	bl	80056a0 <SDMMC_GetCmdResp3>
 80052a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a4:	69fb      	ldr	r3, [r7, #28]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b088      	sub	sp, #32
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80052bc:	2306      	movs	r3, #6
 80052be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fe03 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	2106      	movs	r1, #6
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f8a7 	bl	8005434 <SDMMC_GetCmdResp1>
 80052e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e8:	69fb      	ldr	r3, [r7, #28]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b088      	sub	sp, #32
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80052fe:	2333      	movs	r3, #51	; 0x33
 8005300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800530a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fde2 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	2133      	movs	r1, #51	; 0x33
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f886 	bl	8005434 <SDMMC_GetCmdResp1>
 8005328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532a:	69fb      	ldr	r3, [r7, #28]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005340:	2302      	movs	r3, #2
 8005342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005344:	23c0      	movs	r3, #192	; 0xc0
 8005346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800534c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fdc1 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f956 	bl	8005610 <SDMMC_GetCmdResp2>
 8005364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005366:	69fb      	ldr	r3, [r7, #28]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800537e:	2309      	movs	r3, #9
 8005380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005382:	23c0      	movs	r3, #192	; 0xc0
 8005384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800538a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fda2 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f937 	bl	8005610 <SDMMC_GetCmdResp2>
 80053a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a4:	69fb      	ldr	r3, [r7, #28]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80053bc:	2303      	movs	r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053c0:	2340      	movs	r3, #64	; 0x40
 80053c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff fd83 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	2103      	movs	r1, #3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f99c 	bl	800571c <SDMMC_GetCmdResp6>
 80053e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053e6:	69fb      	ldr	r3, [r7, #28]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80053fe:	230d      	movs	r3, #13
 8005400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005410:	f107 0308 	add.w	r3, r7, #8
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fd62 	bl	8004ee0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800541c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005420:	210d      	movs	r1, #13
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f806 	bl	8005434 <SDMMC_GetCmdResp1>
 8005428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	460b      	mov	r3, r1
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005442:	4b70      	ldr	r3, [pc, #448]	; (8005604 <SDMMC_GetCmdResp1+0x1d0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a70      	ldr	r2, [pc, #448]	; (8005608 <SDMMC_GetCmdResp1+0x1d4>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	0a5a      	lsrs	r2, r3, #9
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	1e5a      	subs	r2, r3, #1
 800545a:	61fa      	str	r2, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005464:	e0c9      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ea      	bne.n	8005456 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2204      	movs	r2, #4
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005492:	2304      	movs	r3, #4
 8005494:	e0b1      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0a6      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	22c5      	movs	r2, #197	; 0xc5
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff fd3e 	bl	8004f34 <SDIO_GetCommandResponse>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	7afb      	ldrb	r3, [r7, #11]
 80054be:	4293      	cmp	r3, r2
 80054c0:	d001      	beq.n	80054c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e099      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80054c6:	2100      	movs	r1, #0
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fd40 	bl	8004f4e <SDIO_GetResponse>
 80054ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4b4e      	ldr	r3, [pc, #312]	; (800560c <SDMMC_GetCmdResp1+0x1d8>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80054da:	2300      	movs	r3, #0
 80054dc:	e08d      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da02      	bge.n	80054ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80054e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054e8:	e087      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80054f4:	2340      	movs	r3, #64	; 0x40
 80054f6:	e080      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	e079      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005514:	e071      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005524:	e069      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005534:	e061      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005544:	e059      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005554:	e051      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005564:	e049      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005574:	e041      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005584:	e039      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005594:	e031      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80055a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055a4:	e029      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80055b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055b4:	e021      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80055c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055c4:	e019      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80055d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055d4:	e011      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80055e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055e4:	e009      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80055f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055f4:	e001      	b.n	80055fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000000 	.word	0x20000000
 8005608:	10624dd3 	.word	0x10624dd3
 800560c:	fdffe008 	.word	0xfdffe008

08005610 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005618:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <SDMMC_GetCmdResp2+0x88>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <SDMMC_GetCmdResp2+0x8c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0a5b      	lsrs	r3, r3, #9
 8005624:	f241 3288 	movw	r2, #5000	; 0x1388
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	60fa      	str	r2, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800563c:	e026      	b.n	800568c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0ef      	beq.n	800562e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ea      	bne.n	800562e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800566a:	2304      	movs	r3, #4
 800566c:	e00e      	b.n	800568c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005680:	2301      	movs	r3, #1
 8005682:	e003      	b.n	800568c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	22c5      	movs	r2, #197	; 0xc5
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000000 	.word	0x20000000
 800569c:	10624dd3 	.word	0x10624dd3

080056a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <SDMMC_GetCmdResp3+0x74>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <SDMMC_GetCmdResp3+0x78>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a5b      	lsrs	r3, r3, #9
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1e5a      	subs	r2, r3, #1
 80056c2:	60fa      	str	r2, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056cc:	e01b      	b.n	8005706 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ef      	beq.n	80056be <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ea      	bne.n	80056be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2204      	movs	r2, #4
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056fa:	2304      	movs	r3, #4
 80056fc:	e003      	b.n	8005706 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	22c5      	movs	r2, #197	; 0xc5
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000000 	.word	0x20000000
 8005718:	10624dd3 	.word	0x10624dd3

0800571c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	460b      	mov	r3, r1
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800572a:	4b35      	ldr	r3, [pc, #212]	; (8005800 <SDMMC_GetCmdResp6+0xe4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a35      	ldr	r2, [pc, #212]	; (8005804 <SDMMC_GetCmdResp6+0xe8>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	0a5b      	lsrs	r3, r3, #9
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	1e5a      	subs	r2, r3, #1
 8005744:	61fa      	str	r2, [r7, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800574a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800574e:	e052      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ef      	beq.n	8005740 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ea      	bne.n	8005740 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2204      	movs	r2, #4
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800577c:	2304      	movs	r3, #4
 800577e:	e03a      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005792:	2301      	movs	r3, #1
 8005794:	e02f      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fbcc 	bl	8004f34 <SDIO_GetCommandResponse>
 800579c:	4603      	mov	r3, r0
 800579e:	461a      	mov	r2, r3
 80057a0:	7afb      	ldrb	r3, [r7, #11]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d001      	beq.n	80057aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e025      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22c5      	movs	r2, #197	; 0xc5
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057b0:	2100      	movs	r1, #0
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fbcb 	bl	8004f4e <SDIO_GetResponse>
 80057b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e011      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057e0:	e009      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f0:	e001      	b.n	80057f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80057f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000000 	.word	0x20000000
 8005804:	10624dd3 	.word	0x10624dd3

08005808 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005810:	4b22      	ldr	r3, [pc, #136]	; (800589c <SDMMC_GetCmdResp7+0x94>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <SDMMC_GetCmdResp7+0x98>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0a5b      	lsrs	r3, r3, #9
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005834:	e02c      	b.n	8005890 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0ef      	beq.n	8005826 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ea      	bne.n	8005826 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005862:	2304      	movs	r3, #4
 8005864:	e014      	b.n	8005890 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005878:	2301      	movs	r3, #1
 800587a:	e009      	b.n	8005890 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2240      	movs	r2, #64	; 0x40
 800588c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800588e:	2300      	movs	r3, #0
  
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000000 	.word	0x20000000
 80058a0:	10624dd3 	.word	0x10624dd3

080058a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <SDMMC_GetCmdError+0x50>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a11      	ldr	r2, [pc, #68]	; (80058f8 <SDMMC_GetCmdError+0x54>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	0a5b      	lsrs	r3, r3, #9
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1e5a      	subs	r2, r3, #1
 80058c6:	60fa      	str	r2, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d0:	e009      	b.n	80058e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f1      	beq.n	80058c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	22c5      	movs	r2, #197	; 0xc5
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000000 	.word	0x20000000
 80058f8:	10624dd3 	.word	0x10624dd3

080058fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005900:	4904      	ldr	r1, [pc, #16]	; (8005914 <MX_FATFS_Init+0x18>)
 8005902:	4805      	ldr	r0, [pc, #20]	; (8005918 <MX_FATFS_Init+0x1c>)
 8005904:	f000 fa6e 	bl	8005de4 <FATFS_LinkDriver>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <MX_FATFS_Init+0x20>)
 800590e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000238 	.word	0x20000238
 8005918:	0800a978 	.word	0x0800a978
 800591c:	20000234 	.word	0x20000234

08005920 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800592a:	f000 f87b 	bl	8005a24 <BSP_SD_IsDetected>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e012      	b.n	800595e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005938:	480b      	ldr	r0, [pc, #44]	; (8005968 <BSP_SD_Init+0x48>)
 800593a:	f7fd ff23 	bl	8003784 <HAL_SD_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800594c:	4806      	ldr	r0, [pc, #24]	; (8005968 <BSP_SD_Init+0x48>)
 800594e:	f7fe fb6b 	bl	8004028 <HAL_SD_ConfigWideBusOperation>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800595c:	79fb      	ldrb	r3, [r7, #7]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200000d8 	.word	0x200000d8

0800596c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	4806      	ldr	r0, [pc, #24]	; (800599c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005984:	f7fd ffae 	bl	80038e4 <HAL_SD_ReadBlocks_DMA>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200000d8 	.word	0x200000d8

080059a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	68f9      	ldr	r1, [r7, #12]
 80059b6:	4806      	ldr	r0, [pc, #24]	; (80059d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80059b8:	f7fe f876 	bl	8003aa8 <HAL_SD_WriteBlocks_DMA>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200000d8 	.word	0x200000d8

080059d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80059d8:	4805      	ldr	r0, [pc, #20]	; (80059f0 <BSP_SD_GetCardState+0x1c>)
 80059da:	f7fe fbbf 	bl	800415c <HAL_SD_GetCardState>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	200000d8 	.word	0x200000d8

080059f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4803      	ldr	r0, [pc, #12]	; (8005a0c <BSP_SD_GetCardInfo+0x18>)
 8005a00:	f7fe fae6 	bl	8003fd0 <HAL_SD_GetCardInfo>
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200000d8 	.word	0x200000d8

08005a10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005a18:	f000 f986 	bl	8005d28 <BSP_SD_ReadCpltCallback>
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	b2db      	uxtb	r3, r3
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005a46:	f000 fa7d 	bl	8005f44 <osKernelGetTickCount>
 8005a4a:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005a4c:	e006      	b.n	8005a5c <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a4e:	f7ff ffc1 	bl	80059d4 <BSP_SD_GetCardState>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e009      	b.n	8005a70 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005a5c:	f000 fa72 	bl	8005f44 <osKernelGetTickCount>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d8f0      	bhi.n	8005a4e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <SD_CheckStatus+0x38>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a88:	f7ff ffa4 	bl	80059d4 <BSP_SD_GetCardState>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d107      	bne.n	8005aa2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <SD_CheckStatus+0x38>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <SD_CheckStatus+0x38>)
 8005aa0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005aa2:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <SD_CheckStatus+0x38>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000000d 	.word	0x2000000d

08005ab4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005abe:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <SD_initialize+0x7c>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005ac4:	f000 f9f6 	bl	8005eb4 <osKernelGetState>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d129      	bne.n	8005b22 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005ace:	f7ff ff27 	bl	8005920 <BSP_SD_Init>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d107      	bne.n	8005ae8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ffcc 	bl	8005a78 <SD_CheckStatus>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <SD_initialize+0x7c>)
 8005ae6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <SD_initialize+0x7c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d017      	beq.n	8005b22 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <SD_initialize+0x80>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005afa:	2200      	movs	r2, #0
 8005afc:	2102      	movs	r1, #2
 8005afe:	200a      	movs	r0, #10
 8005b00:	f000 fae2 	bl	80060c8 <osMessageQueueNew>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4a0b      	ldr	r2, [pc, #44]	; (8005b34 <SD_initialize+0x80>)
 8005b08:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <SD_initialize+0x80>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <SD_initialize+0x7c>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <SD_initialize+0x7c>)
 8005b20:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <SD_initialize+0x7c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	2000000d 	.word	0x2000000d
 8005b34:	2000023c 	.word	0x2000023c

08005b38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff97 	bl	8005a78 <SD_CheckStatus>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4603      	mov	r3, r0
 8005b62:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005b68:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b6c:	f7ff ff67 	bl	8005a3e <SD_CheckStatusWithTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da01      	bge.n	8005b7a <SD_read+0x26>
  {
    return res;
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	e02f      	b.n	8005bda <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f7ff fef4 	bl	800596c <BSP_SD_ReadBlocks_DMA>
 8005b84:	4603      	mov	r3, r0
 8005b86:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005b88:	7fbb      	ldrb	r3, [r7, #30]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d124      	bne.n	8005bd8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <SD_read+0x90>)
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	f107 0112 	add.w	r1, r7, #18
 8005b96:	f247 5330 	movw	r3, #30000	; 0x7530
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f000 fb68 	bl	8006270 <osMessageQueueGet>
 8005ba0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d117      	bne.n	8005bd8 <SD_read+0x84>
 8005ba8:	8a7b      	ldrh	r3, [r7, #18]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d114      	bne.n	8005bd8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8005bae:	f000 f9c9 	bl	8005f44 <osKernelGetTickCount>
 8005bb2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005bb4:	e007      	b.n	8005bc6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005bb6:	f7ff ff0d 	bl	80059d4 <BSP_SD_GetCardState>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <SD_read+0x72>
              {
                res = RES_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005bc4:	e008      	b.n	8005bd8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005bc6:	f000 f9bd 	bl	8005f44 <osKernelGetTickCount>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f247 522f 	movw	r2, #29999	; 0x752f
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d9ee      	bls.n	8005bb6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2000023c 	.word	0x2000023c

08005be8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005bfc:	f247 5030 	movw	r0, #30000	; 0x7530
 8005c00:	f7ff ff1d 	bl	8005a3e <SD_CheckStatusWithTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da01      	bge.n	8005c0e <SD_write+0x26>
  {
    return res;
 8005c0a:	7ffb      	ldrb	r3, [r7, #31]
 8005c0c:	e02d      	b.n	8005c6a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	68b8      	ldr	r0, [r7, #8]
 8005c14:	f7ff fec4 	bl	80059a0 <BSP_SD_WriteBlocks_DMA>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d124      	bne.n	8005c68 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <SD_write+0x8c>)
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f107 0112 	add.w	r1, r7, #18
 8005c26:	f247 5330 	movw	r3, #30000	; 0x7530
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f000 fb20 	bl	8006270 <osMessageQueueGet>
 8005c30:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d117      	bne.n	8005c68 <SD_write+0x80>
 8005c38:	8a7b      	ldrh	r3, [r7, #18]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d114      	bne.n	8005c68 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8005c3e:	f000 f981 	bl	8005f44 <osKernelGetTickCount>
 8005c42:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005c44:	e007      	b.n	8005c56 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005c46:	f7ff fec5 	bl	80059d4 <BSP_SD_GetCardState>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <SD_write+0x6e>
          {
            res = RES_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	77fb      	strb	r3, [r7, #31]
            break;
 8005c54:	e008      	b.n	8005c68 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005c56:	f000 f975 	bl	8005f44 <osKernelGetTickCount>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f247 522f 	movw	r2, #29999	; 0x752f
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d9ee      	bls.n	8005c46 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	2000023c 	.word	0x2000023c

08005c78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	603a      	str	r2, [r7, #0]
 8005c82:	71fb      	strb	r3, [r7, #7]
 8005c84:	460b      	mov	r3, r1
 8005c86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c8e:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <SD_ioctl+0xac>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <SD_ioctl+0x28>
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e03c      	b.n	8005d1a <SD_ioctl+0xa2>

  switch (cmd)
 8005ca0:	79bb      	ldrb	r3, [r7, #6]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d834      	bhi.n	8005d10 <SD_ioctl+0x98>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <SD_ioctl+0x34>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cf7 	.word	0x08005cf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cc2:	e028      	b.n	8005d16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fe93 	bl	80059f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cda:	e01c      	b.n	8005d16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fe87 	bl	80059f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cf4:	e00f      	b.n	8005d16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cf6:	f107 030c 	add.w	r3, r7, #12
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fe7a 	bl	80059f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	0a5a      	lsrs	r2, r3, #9
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d0e:	e002      	b.n	8005d16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3730      	adds	r7, #48	; 0x30
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000000d 	.word	0x2000000d

08005d28 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <BSP_SD_ReadCpltCallback+0x20>)
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	1db9      	adds	r1, r7, #6
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f000 fa38 	bl	80061b0 <osMessageQueuePut>
#endif
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	2000023c 	.word	0x2000023c

08005d4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005d62:	4b1f      	ldr	r3, [pc, #124]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d64:	7a5b      	ldrb	r3, [r3, #9]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d131      	bne.n	8005dd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005d6c:	4b1c      	ldr	r3, [pc, #112]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d6e:	7a5b      	ldrb	r3, [r3, #9]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d76:	2100      	movs	r1, #0
 8005d78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d7c:	7a5b      	ldrb	r3, [r3, #9]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d8c:	7a5b      	ldrb	r3, [r3, #9]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d94:	4413      	add	r3, r2
 8005d96:	79fa      	ldrb	r2, [r7, #7]
 8005d98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005d9c:	7a5b      	ldrb	r3, [r3, #9]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	b2d1      	uxtb	r1, r2
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <FATFS_LinkDriverEx+0x94>)
 8005da6:	7251      	strb	r1, [r2, #9]
 8005da8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005daa:	7dbb      	ldrb	r3, [r7, #22]
 8005dac:	3330      	adds	r3, #48	; 0x30
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	3301      	adds	r3, #1
 8005db8:	223a      	movs	r2, #58	; 0x3a
 8005dba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	222f      	movs	r2, #47	; 0x2f
 8005dc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3303      	adds	r3, #3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000240 	.word	0x20000240

08005de4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005dee:	2200      	movs	r2, #0
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ffaa 	bl	8005d4c <FATFS_LinkDriverEx>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <__NVIC_SetPriority>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	db0a      	blt.n	8005e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	490c      	ldr	r1, [pc, #48]	; (8005e50 <__NVIC_SetPriority+0x4c>)
 8005e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e22:	0112      	lsls	r2, r2, #4
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	440b      	add	r3, r1
 8005e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e2c:	e00a      	b.n	8005e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4908      	ldr	r1, [pc, #32]	; (8005e54 <__NVIC_SetPriority+0x50>)
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	0112      	lsls	r2, r2, #4
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	440b      	add	r3, r1
 8005e42:	761a      	strb	r2, [r3, #24]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	e000e100 	.word	0xe000e100
 8005e54:	e000ed00 	.word	0xe000ed00

08005e58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f06f 0004 	mvn.w	r0, #4
 8005e62:	f7ff ffcf 	bl	8005e04 <__NVIC_SetPriority>
#endif
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e72:	f3ef 8305 	mrs	r3, IPSR
 8005e76:	603b      	str	r3, [r7, #0]
  return(result);
 8005e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e7e:	f06f 0305 	mvn.w	r3, #5
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e00c      	b.n	8005ea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <osKernelInitialize+0x44>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <osKernelInitialize+0x44>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	e002      	b.n	8005ea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ea0:	687b      	ldr	r3, [r7, #4]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	2000024c 	.word	0x2000024c

08005eb4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8005eba:	f001 fef5 	bl	8007ca8 <xTaskGetSchedulerState>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <osKernelGetState+0x1a>
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d105      	bne.n	8005ed4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	607b      	str	r3, [r7, #4]
      break;
 8005ecc:	e00c      	b.n	8005ee8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	607b      	str	r3, [r7, #4]
      break;
 8005ed2:	e009      	b.n	8005ee8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <osKernelGetState+0x40>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <osKernelGetState+0x2e>
        state = osKernelReady;
 8005edc:	2301      	movs	r3, #1
 8005ede:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8005ee0:	e001      	b.n	8005ee6 <osKernelGetState+0x32>
        state = osKernelInactive;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
      break;
 8005ee6:	bf00      	nop
  }

  return (state);
 8005ee8:	687b      	ldr	r3, [r7, #4]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2000024c 	.word	0x2000024c

08005ef8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005efe:	f3ef 8305 	mrs	r3, IPSR
 8005f02:	603b      	str	r3, [r7, #0]
  return(result);
 8005f04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f0a:	f06f 0305 	mvn.w	r3, #5
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	e010      	b.n	8005f34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <osKernelStart+0x48>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d109      	bne.n	8005f2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f1a:	f7ff ff9d 	bl	8005e58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f1e:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <osKernelStart+0x48>)
 8005f20:	2202      	movs	r2, #2
 8005f22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f24:	f001 fa66 	bl	80073f4 <vTaskStartScheduler>
      stat = osOK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e002      	b.n	8005f34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f34:	687b      	ldr	r3, [r7, #4]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000024c 	.word	0x2000024c

08005f44 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f4a:	f3ef 8305 	mrs	r3, IPSR
 8005f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f50:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005f56:	f001 fb6f 	bl	8007638 <xTaskGetTickCountFromISR>
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	e002      	b.n	8005f64 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005f5e:	f001 fb5b 	bl	8007618 <xTaskGetTickCount>
 8005f62:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005f64:	687b      	ldr	r3, [r7, #4]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08e      	sub	sp, #56	; 0x38
 8005f72:	af04      	add	r7, sp, #16
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f7e:	f3ef 8305 	mrs	r3, IPSR
 8005f82:	617b      	str	r3, [r7, #20]
  return(result);
 8005f84:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d17e      	bne.n	8006088 <osThreadNew+0x11a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d07b      	beq.n	8006088 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f94:	2318      	movs	r3, #24
 8005f96:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d045      	beq.n	8006034 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <osThreadNew+0x48>
        name = attr->name;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <osThreadNew+0x6e>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b38      	cmp	r3, #56	; 0x38
 8005fce:	d805      	bhi.n	8005fdc <osThreadNew+0x6e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <osThreadNew+0x72>
        return (NULL);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e054      	b.n	800608a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <osThreadNew+0xa8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b5b      	cmp	r3, #91	; 0x5b
 8005ffe:	d90a      	bls.n	8006016 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <osThreadNew+0xa8>
        mem = 1;
 8006010:	2301      	movs	r3, #1
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e010      	b.n	8006038 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10c      	bne.n	8006038 <osThreadNew+0xca>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <osThreadNew+0xca>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <osThreadNew+0xca>
          mem = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e001      	b.n	8006038 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d110      	bne.n	8006060 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006046:	9202      	str	r2, [sp, #8]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fff7 	bl	8007048 <xTaskCreateStatic>
 800605a:	4603      	mov	r3, r0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e013      	b.n	8006088 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	b29a      	uxth	r2, r3
 800606a:	f107 0310 	add.w	r3, r7, #16
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 f842 	bl	8007102 <xTaskCreate>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <osThreadNew+0x11a>
            hTask = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006088:	693b      	ldr	r3, [r7, #16]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3728      	adds	r7, #40	; 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <osDelay+0x1c>
    stat = osErrorISR;
 80060a6:	f06f 0305 	mvn.w	r3, #5
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e007      	b.n	80060be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <osDelay+0x2c>
      vTaskDelay(ticks);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 f967 	bl	800738c <vTaskDelay>
    }
  }

  return (stat);
 80060be:	68fb      	ldr	r3, [r7, #12]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d8:	f3ef 8305 	mrs	r3, IPSR
 80060dc:	613b      	str	r3, [r7, #16]
  return(result);
 80060de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d15f      	bne.n	80061a4 <osMessageQueueNew+0xdc>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d05c      	beq.n	80061a4 <osMessageQueueNew+0xdc>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d059      	beq.n	80061a4 <osMessageQueueNew+0xdc>
    mem = -1;
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295
 80060f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d029      	beq.n	8006150 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d012      	beq.n	800612a <osMessageQueueNew+0x62>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	2b4f      	cmp	r3, #79	; 0x4f
 800610a:	d90e      	bls.n	800612a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <osMessageQueueNew+0x62>
        mem = 1;
 8006124:	2301      	movs	r3, #1
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e014      	b.n	8006154 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d110      	bne.n	8006154 <osMessageQueueNew+0x8c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800613e:	2b00      	cmp	r3, #0
 8006140:	d108      	bne.n	8006154 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <osMessageQueueNew+0x8c>
          mem = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e001      	b.n	8006154 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10b      	bne.n	8006172 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2100      	movs	r1, #0
 8006164:	9100      	str	r1, [sp, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fa2f 	bl	80065cc <xQueueGenericCreateStatic>
 800616e:	61f8      	str	r0, [r7, #28]
 8006170:	e008      	b.n	8006184 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006178:	2200      	movs	r2, #0
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fa9d 	bl	80066bc <xQueueGenericCreate>
 8006182:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00c      	beq.n	80061a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	e001      	b.n	800619c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800619c:	6979      	ldr	r1, [r7, #20]
 800619e:	69f8      	ldr	r0, [r7, #28]
 80061a0:	f000 fef4 	bl	8006f8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c8:	f3ef 8305 	mrs	r3, IPSR
 80061cc:	617b      	str	r3, [r7, #20]
  return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d028      	beq.n	8006226 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <osMessageQueuePut+0x36>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <osMessageQueuePut+0x36>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80061e6:	f06f 0303 	mvn.w	r3, #3
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e038      	b.n	8006260 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80061f2:	f107 0210 	add.w	r2, r7, #16
 80061f6:	2300      	movs	r3, #0
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	69b8      	ldr	r0, [r7, #24]
 80061fc:	f000 fbba 	bl	8006974 <xQueueGenericSendFromISR>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d003      	beq.n	800620e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006206:	f06f 0302 	mvn.w	r3, #2
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	e028      	b.n	8006260 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d025      	beq.n	8006260 <osMessageQueuePut+0xb0>
 8006214:	4b15      	ldr	r3, [pc, #84]	; (800626c <osMessageQueuePut+0xbc>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	e01c      	b.n	8006260 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <osMessageQueuePut+0x82>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006232:	f06f 0303 	mvn.w	r3, #3
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e012      	b.n	8006260 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800623a:	2300      	movs	r3, #0
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	69b8      	ldr	r0, [r7, #24]
 8006242:	f000 fa99 	bl	8006778 <xQueueGenericSend>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d009      	beq.n	8006260 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006252:	f06f 0301 	mvn.w	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e002      	b.n	8006260 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800625a:	f06f 0302 	mvn.w	r3, #2
 800625e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006260:	69fb      	ldr	r3, [r7, #28]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	e000ed04 	.word	0xe000ed04

08006270 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006286:	f3ef 8305 	mrs	r3, IPSR
 800628a:	617b      	str	r3, [r7, #20]
  return(result);
 800628c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800628e:	2b00      	cmp	r3, #0
 8006290:	d028      	beq.n	80062e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <osMessageQueueGet+0x34>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osMessageQueueGet+0x34>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80062a4:	f06f 0303 	mvn.w	r3, #3
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	e037      	b.n	800631c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80062b0:	f107 0310 	add.w	r3, r7, #16
 80062b4:	461a      	mov	r2, r3
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	69b8      	ldr	r0, [r7, #24]
 80062ba:	f000 fcd7 	bl	8006c6c <xQueueReceiveFromISR>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d003      	beq.n	80062cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80062c4:	f06f 0302 	mvn.w	r3, #2
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	e027      	b.n	800631c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d024      	beq.n	800631c <osMessageQueueGet+0xac>
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <osMessageQueueGet+0xb8>)
 80062d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	e01b      	b.n	800631c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <osMessageQueueGet+0x80>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80062f0:	f06f 0303 	mvn.w	r3, #3
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	e011      	b.n	800631c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	69b8      	ldr	r0, [r7, #24]
 80062fe:	f000 fbd5 	bl	8006aac <xQueueReceive>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d009      	beq.n	800631c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800630e:	f06f 0301 	mvn.w	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e002      	b.n	800631c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006316:	f06f 0302 	mvn.w	r3, #2
 800631a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800631c:	69fb      	ldr	r3, [r7, #28]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a07      	ldr	r2, [pc, #28]	; (8006358 <vApplicationGetIdleTaskMemory+0x2c>)
 800633c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a06      	ldr	r2, [pc, #24]	; (800635c <vApplicationGetIdleTaskMemory+0x30>)
 8006342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000250 	.word	0x20000250
 800635c:	200002ac 	.word	0x200002ac

08006360 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a07      	ldr	r2, [pc, #28]	; (800638c <vApplicationGetTimerTaskMemory+0x2c>)
 8006370:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4a06      	ldr	r2, [pc, #24]	; (8006390 <vApplicationGetTimerTaskMemory+0x30>)
 8006376:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	200004ac 	.word	0x200004ac
 8006390:	20000508 	.word	0x20000508

08006394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f103 0208 	add.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f103 0208 	add.w	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0208 	add.w	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d103      	bne.n	8006456 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e00c      	b.n	8006470 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3308      	adds	r3, #8
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e002      	b.n	8006464 <vListInsert+0x2e>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d2f6      	bcs.n	800645e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6892      	ldr	r2, [r2, #8]
 80064be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d103      	bne.n	80064dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006526:	f002 f91d 	bl	8008764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	3b01      	subs	r3, #1
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	441a      	add	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	22ff      	movs	r2, #255	; 0xff
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	22ff      	movs	r2, #255	; 0xff
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d114      	bne.n	80065a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01a      	beq.n	80065ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3310      	adds	r3, #16
 8006588:	4618      	mov	r0, r3
 800658a:	f001 f9cf 	bl	800792c <xTaskRemoveFromEventList>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d012      	beq.n	80065ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <xQueueGenericReset+0xcc>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	e009      	b.n	80065ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3310      	adds	r3, #16
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fef2 	bl	8006394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff feed 	bl	8006394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065ba:	f002 f903 	bl	80087c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08e      	sub	sp, #56	; 0x38
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <xQueueGenericCreateStatic+0x52>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <xQueueGenericCreateStatic+0x56>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueGenericCreateStatic+0x58>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	623b      	str	r3, [r7, #32]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <xQueueGenericCreateStatic+0x7e>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <xQueueGenericCreateStatic+0x82>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueGenericCreateStatic+0x84>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	61fb      	str	r3, [r7, #28]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800666a:	2350      	movs	r3, #80	; 0x50
 800666c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b50      	cmp	r3, #80	; 0x50
 8006672:	d00a      	beq.n	800668a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	61bb      	str	r3, [r7, #24]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800668a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800669e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f83f 	bl	8006730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3730      	adds	r7, #48	; 0x30
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3350      	adds	r3, #80	; 0x50
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 f957 	bl	80089a8 <pvPortMalloc>
 80066fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d011      	beq.n	8006726 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	3350      	adds	r3, #80	; 0x50
 800670a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006714:	79fa      	ldrb	r2, [r7, #7]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f805 	bl	8006730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006726:	69bb      	ldr	r3, [r7, #24]
	}
 8006728:	4618      	mov	r0, r3
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e002      	b.n	8006752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800675e:	2101      	movs	r1, #1
 8006760:	69b8      	ldr	r0, [r7, #24]
 8006762:	f7ff fecb 	bl	80064fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08e      	sub	sp, #56	; 0x38
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006786:	2300      	movs	r3, #0
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xQueueGenericSend+0x32>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d103      	bne.n	80067b8 <xQueueGenericSend+0x40>
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <xQueueGenericSend+0x44>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <xQueueGenericSend+0x46>
 80067bc:	2300      	movs	r3, #0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <xQueueGenericSend+0x60>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d103      	bne.n	80067e6 <xQueueGenericSend+0x6e>
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <xQueueGenericSend+0x72>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGenericSend+0x74>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGenericSend+0x8e>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	623b      	str	r3, [r7, #32]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006806:	f001 fa4f 	bl	8007ca8 <xTaskGetSchedulerState>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <xQueueGenericSend+0x9e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <xQueueGenericSend+0xa2>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueGenericSend+0xa4>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueGenericSend+0xbe>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	61fb      	str	r3, [r7, #28]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006836:	f001 ff95 	bl	8008764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <xQueueGenericSend+0xd4>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d129      	bne.n	80068a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006852:	f000 fa8b 	bl	8006d6c <prvCopyDataToQueue>
 8006856:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	3324      	adds	r3, #36	; 0x24
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f861 	bl	800792c <xTaskRemoveFromEventList>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d013      	beq.n	8006898 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006870:	4b3f      	ldr	r3, [pc, #252]	; (8006970 <xQueueGenericSend+0x1f8>)
 8006872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	e00a      	b.n	8006898 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d007      	beq.n	8006898 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006888:	4b39      	ldr	r3, [pc, #228]	; (8006970 <xQueueGenericSend+0x1f8>)
 800688a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006898:	f001 ff94 	bl	80087c4 <vPortExitCritical>
				return pdPASS;
 800689c:	2301      	movs	r3, #1
 800689e:	e063      	b.n	8006968 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068a6:	f001 ff8d 	bl	80087c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e05c      	b.n	8006968 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068b4:	f107 0314 	add.w	r3, r7, #20
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 f89b 	bl	80079f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068c2:	f001 ff7f 	bl	80087c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068c6:	f000 fdfb 	bl	80074c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ca:	f001 ff4b 	bl	8008764 <vPortEnterCritical>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d4:	b25b      	sxtb	r3, r3
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d103      	bne.n	80068e4 <xQueueGenericSend+0x16c>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d103      	bne.n	80068fa <xQueueGenericSend+0x182>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068fa:	f001 ff63 	bl	80087c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068fe:	1d3a      	adds	r2, r7, #4
 8006900:	f107 0314 	add.w	r3, r7, #20
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f88a 	bl	8007a20 <xTaskCheckForTimeOut>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d124      	bne.n	800695c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006914:	f000 fb22 	bl	8006f5c <prvIsQueueFull>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	3310      	adds	r3, #16
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f000 ffb0 	bl	800788c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800692c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692e:	f000 faad 	bl	8006e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006932:	f000 fdd3 	bl	80074dc <xTaskResumeAll>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f af7c 	bne.w	8006836 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <xQueueGenericSend+0x1f8>)
 8006940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	e772      	b.n	8006836 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006952:	f000 fa9b 	bl	8006e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006956:	f000 fdc1 	bl	80074dc <xTaskResumeAll>
 800695a:	e76c      	b.n	8006836 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800695c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695e:	f000 fa95 	bl	8006e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006962:	f000 fdbb 	bl	80074dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006968:	4618      	mov	r0, r3
 800696a:	3738      	adds	r7, #56	; 0x38
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b090      	sub	sp, #64	; 0x40
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <xQueueGenericSendFromISR+0x3c>
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <xQueueGenericSendFromISR+0x40>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <xQueueGenericSendFromISR+0x42>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d103      	bne.n	80069de <xQueueGenericSendFromISR+0x6a>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <xQueueGenericSendFromISR+0x6e>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericSendFromISR+0x70>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069fe:	f001 ff93 	bl	8008928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a02:	f3ef 8211 	mrs	r2, BASEPRI
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	61fa      	str	r2, [r7, #28]
 8006a18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <xQueueGenericSendFromISR+0xbc>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d12f      	bne.n	8006a90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a46:	f000 f991 	bl	8006d6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d112      	bne.n	8006a7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d016      	beq.n	8006a8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ff63 	bl	800792c <xTaskRemoveFromEventList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00e      	beq.n	8006a8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e007      	b.n	8006a8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	b25a      	sxtb	r2, r3
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a8e:	e001      	b.n	8006a94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3740      	adds	r7, #64	; 0x40
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08c      	sub	sp, #48	; 0x30
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <xQueueReceive+0x30>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	623b      	str	r3, [r7, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <xQueueReceive+0x3e>
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <xQueueReceive+0x42>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <xQueueReceive+0x44>
 8006aee:	2300      	movs	r3, #0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueReceive+0x5e>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61fb      	str	r3, [r7, #28]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b0a:	f001 f8cd 	bl	8007ca8 <xTaskGetSchedulerState>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <xQueueReceive+0x6e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <xQueueReceive+0x72>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <xQueueReceive+0x74>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <xQueueReceive+0x8e>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	61bb      	str	r3, [r7, #24]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b3a:	f001 fe13 	bl	8008764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01f      	beq.n	8006b8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4e:	f000 f977 	bl	8006e40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	3310      	adds	r3, #16
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fee0 	bl	800792c <xTaskRemoveFromEventList>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b72:	4b3d      	ldr	r3, [pc, #244]	; (8006c68 <xQueueReceive+0x1bc>)
 8006b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b82:	f001 fe1f 	bl	80087c4 <vPortExitCritical>
				return pdPASS;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e069      	b.n	8006c5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b90:	f001 fe18 	bl	80087c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e062      	b.n	8006c5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9e:	f107 0310 	add.w	r3, r7, #16
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ff26 	bl	80079f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bac:	f001 fe0a 	bl	80087c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb0:	f000 fc86 	bl	80074c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb4:	f001 fdd6 	bl	8008764 <vPortEnterCritical>
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d103      	bne.n	8006bce <xQueueReceive+0x122>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d103      	bne.n	8006be4 <xQueueReceive+0x138>
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be4:	f001 fdee 	bl	80087c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be8:	1d3a      	adds	r2, r7, #4
 8006bea:	f107 0310 	add.w	r3, r7, #16
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 ff15 	bl	8007a20 <xTaskCheckForTimeOut>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d123      	bne.n	8006c44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f000 f997 	bl	8006f30 <prvIsQueueEmpty>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fe3b 	bl	800788c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c18:	f000 f938 	bl	8006e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c1c:	f000 fc5e 	bl	80074dc <xTaskResumeAll>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d189      	bne.n	8006b3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <xQueueReceive+0x1bc>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	e780      	b.n	8006b3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3a:	f000 f927 	bl	8006e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c3e:	f000 fc4d 	bl	80074dc <xTaskResumeAll>
 8006c42:	e77a      	b.n	8006b3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c46:	f000 f921 	bl	8006e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c4a:	f000 fc47 	bl	80074dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c50:	f000 f96e 	bl	8006f30 <prvIsQueueEmpty>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f43f af6f 	beq.w	8006b3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3730      	adds	r7, #48	; 0x30
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08e      	sub	sp, #56	; 0x38
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	623b      	str	r3, [r7, #32]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <xQueueReceiveFromISR+0x3a>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <xQueueReceiveFromISR+0x3e>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueReceiveFromISR+0x40>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	61fb      	str	r3, [r7, #28]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cc6:	f001 fe2f 	bl	8008928 <vPortValidateInterruptPriority>
	__asm volatile
 8006cca:	f3ef 8211 	mrs	r2, BASEPRI
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61ba      	str	r2, [r7, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ce2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02f      	beq.n	8006d52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d00:	f000 f89e 	bl	8006e40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	1e5a      	subs	r2, r3, #1
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006d0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d112      	bne.n	8006d3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d016      	beq.n	8006d4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	3310      	adds	r3, #16
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fe02 	bl	800792c <xTaskRemoveFromEventList>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d40:	3301      	adds	r3, #1
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	b25a      	sxtb	r2, r3
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d50:	e001      	b.n	8006d56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f383 8811 	msr	BASEPRI, r3
}
 8006d60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3738      	adds	r7, #56	; 0x38
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d14d      	bne.n	8006e2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 ffa4 	bl	8007ce4 <xTaskPriorityDisinherit>
 8006d9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	e043      	b.n	8006e2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d119      	bne.n	8006de0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6858      	ldr	r0, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	461a      	mov	r2, r3
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	f002 fd41 	bl	800983e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d32b      	bcc.n	8006e2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]
 8006dde:	e026      	b.n	8006e2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68d8      	ldr	r0, [r3, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	f002 fd27 	bl	800983e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	425b      	negs	r3, r3
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d207      	bcs.n	8006e1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	425b      	negs	r3, r3
 8006e16:	441a      	add	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d105      	bne.n	8006e2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e36:	697b      	ldr	r3, [r7, #20]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d018      	beq.n	8006e84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	441a      	add	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d303      	bcc.n	8006e74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68d9      	ldr	r1, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6838      	ldr	r0, [r7, #0]
 8006e80:	f002 fcdd 	bl	800983e <memcpy>
	}
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e94:	f001 fc66 	bl	8008764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ea0:	e011      	b.n	8006ec6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3324      	adds	r3, #36	; 0x24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fd3c 	bl	800792c <xTaskRemoveFromEventList>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eba:	f000 fe13 	bl	8007ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dce9      	bgt.n	8006ea2 <prvUnlockQueue+0x16>
 8006ece:	e000      	b.n	8006ed2 <prvUnlockQueue+0x46>
					break;
 8006ed0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006eda:	f001 fc73 	bl	80087c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ede:	f001 fc41 	bl	8008764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eea:	e011      	b.n	8006f10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d012      	beq.n	8006f1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3310      	adds	r3, #16
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fd17 	bl	800792c <xTaskRemoveFromEventList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f04:	f000 fdee 	bl	8007ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dce9      	bgt.n	8006eec <prvUnlockQueue+0x60>
 8006f18:	e000      	b.n	8006f1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	22ff      	movs	r2, #255	; 0xff
 8006f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f24:	f001 fc4e 	bl	80087c4 <vPortExitCritical>
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f38:	f001 fc14 	bl	8008764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e001      	b.n	8006f4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f4e:	f001 fc39 	bl	80087c4 <vPortExitCritical>

	return xReturn;
 8006f52:	68fb      	ldr	r3, [r7, #12]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f64:	f001 fbfe 	bl	8008764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d102      	bne.n	8006f7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e001      	b.n	8006f7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f7e:	f001 fc21 	bl	80087c4 <vPortExitCritical>

	return xReturn;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e014      	b.n	8006fc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f9c:	4a0f      	ldr	r2, [pc, #60]	; (8006fdc <vQueueAddToRegistry+0x50>)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fa8:	490c      	ldr	r1, [pc, #48]	; (8006fdc <vQueueAddToRegistry+0x50>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fb2:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <vQueueAddToRegistry+0x50>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4413      	add	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fbe:	e006      	b.n	8006fce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b07      	cmp	r3, #7
 8006fca:	d9e7      	bls.n	8006f9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000908 	.word	0x20000908

08006fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ff0:	f001 fbb8 	bl	8008764 <vPortEnterCritical>
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d103      	bne.n	800700a <vQueueWaitForMessageRestricted+0x2a>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007010:	b25b      	sxtb	r3, r3
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d103      	bne.n	8007020 <vQueueWaitForMessageRestricted+0x40>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007020:	f001 fbd0 	bl	80087c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3324      	adds	r3, #36	; 0x24
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fc4d 	bl	80078d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800703a:	6978      	ldr	r0, [r7, #20]
 800703c:	f7ff ff26 	bl	8006e8c <prvUnlockQueue>
	}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08e      	sub	sp, #56	; 0x38
 800704c:	af04      	add	r7, sp, #16
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xTaskCreateStatic+0x2a>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskCreateStatic+0x46>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	61fb      	str	r3, [r7, #28]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800708e:	235c      	movs	r3, #92	; 0x5c
 8007090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b5c      	cmp	r3, #92	; 0x5c
 8007096:	d00a      	beq.n	80070ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	61bb      	str	r3, [r7, #24]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01e      	beq.n	80070f4 <xTaskCreateStatic+0xac>
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01b      	beq.n	80070f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	2202      	movs	r2, #2
 80070ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070ce:	2300      	movs	r3, #0
 80070d0:	9303      	str	r3, [sp, #12]
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	9302      	str	r3, [sp, #8]
 80070d6:	f107 0314 	add.w	r3, r7, #20
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f850 	bl	800718c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ee:	f000 f8dd 	bl	80072ac <prvAddNewTaskToReadyList>
 80070f2:	e001      	b.n	80070f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070f8:	697b      	ldr	r3, [r7, #20]
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3728      	adds	r7, #40	; 0x28
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08c      	sub	sp, #48	; 0x30
 8007106:	af04      	add	r7, sp, #16
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fc46 	bl	80089a8 <pvPortMalloc>
 800711c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007124:	205c      	movs	r0, #92	; 0x5c
 8007126:	f001 fc3f 	bl	80089a8 <pvPortMalloc>
 800712a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
 8007138:	e005      	b.n	8007146 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800713a:	6978      	ldr	r0, [r7, #20]
 800713c:	f001 fd00 	bl	8008b40 <vPortFree>
 8007140:	e001      	b.n	8007146 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d017      	beq.n	800717c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	2300      	movs	r3, #0
 8007158:	9303      	str	r3, [sp, #12]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	9302      	str	r3, [sp, #8]
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f80e 	bl	800718c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007170:	69f8      	ldr	r0, [r7, #28]
 8007172:	f000 f89b 	bl	80072ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007176:	2301      	movs	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e002      	b.n	8007182 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800717c:	f04f 33ff 	mov.w	r3, #4294967295
 8007180:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007182:	69bb      	ldr	r3, [r7, #24]
	}
 8007184:	4618      	mov	r0, r3
 8007186:	3720      	adds	r7, #32
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	461a      	mov	r2, r3
 80071a4:	21a5      	movs	r1, #165	; 0xa5
 80071a6:	f002 facf 	bl	8009748 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071b4:	3b01      	subs	r3, #1
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	617b      	str	r3, [r7, #20]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e012      	b.n	8007216 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	7819      	ldrb	r1, [r3, #0]
 80071f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	3334      	adds	r3, #52	; 0x34
 8007200:	460a      	mov	r2, r1
 8007202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d006      	beq.n	800721e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d9e9      	bls.n	80071f0 <prvInitialiseNewTask+0x64>
 800721c:	e000      	b.n	8007220 <prvInitialiseNewTask+0x94>
			{
				break;
 800721e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007228:	e003      	b.n	8007232 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	2b37      	cmp	r3, #55	; 0x37
 8007236:	d901      	bls.n	800723c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007238:	2337      	movs	r3, #55	; 0x37
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007246:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	2200      	movs	r2, #0
 800724c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff f8be 	bl	80063d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	3318      	adds	r3, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff f8b9 	bl	80063d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	2200      	movs	r2, #0
 800727c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f001 f93a 	bl	8008504 <pxPortInitialiseStack>
 8007290:	4602      	mov	r2, r0
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072b4:	f001 fa56 	bl	8008764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072b8:	4b2d      	ldr	r3, [pc, #180]	; (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3301      	adds	r3, #1
 80072be:	4a2c      	ldr	r2, [pc, #176]	; (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072c2:	4b2c      	ldr	r3, [pc, #176]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072ca:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072d0:	4b27      	ldr	r3, [pc, #156]	; (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d110      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072d8:	f000 fc28 	bl	8007b2c <prvInitialiseTaskLists>
 80072dc:	e00d      	b.n	80072fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072de:	4b26      	ldr	r3, [pc, #152]	; (8007378 <prvAddNewTaskToReadyList+0xcc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072e6:	4b23      	ldr	r3, [pc, #140]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d802      	bhi.n	80072fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072fa:	4b20      	ldr	r3, [pc, #128]	; (800737c <prvAddNewTaskToReadyList+0xd0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	4a1e      	ldr	r2, [pc, #120]	; (800737c <prvAddNewTaskToReadyList+0xd0>)
 8007302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <prvAddNewTaskToReadyList+0xd0>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <prvAddNewTaskToReadyList+0xd4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d903      	bls.n	8007320 <prvAddNewTaskToReadyList+0x74>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	4a18      	ldr	r2, [pc, #96]	; (8007380 <prvAddNewTaskToReadyList+0xd4>)
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4a15      	ldr	r2, [pc, #84]	; (8007384 <prvAddNewTaskToReadyList+0xd8>)
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f7ff f859 	bl	80063ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733c:	f001 fa42 	bl	80087c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <prvAddNewTaskToReadyList+0xcc>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	429a      	cmp	r2, r3
 8007354:	d207      	bcs.n	8007366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <prvAddNewTaskToReadyList+0xdc>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000e1c 	.word	0x20000e1c
 8007374:	20000948 	.word	0x20000948
 8007378:	20000e28 	.word	0x20000e28
 800737c:	20000e38 	.word	0x20000e38
 8007380:	20000e24 	.word	0x20000e24
 8007384:	2000094c 	.word	0x2000094c
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <vTaskDelay+0x60>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <vTaskDelay+0x30>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073bc:	f000 f880 	bl	80074c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcfc 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073c8:	f000 f888 	bl	80074dc <xTaskResumeAll>
 80073cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vTaskDelay+0x64>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000e44 	.word	0x20000e44
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007402:	463a      	mov	r2, r7
 8007404:	1d39      	adds	r1, r7, #4
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe ff8e 	bl	800632c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	9202      	str	r2, [sp, #8]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	2300      	movs	r3, #0
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	460a      	mov	r2, r1
 8007422:	4921      	ldr	r1, [pc, #132]	; (80074a8 <vTaskStartScheduler+0xb4>)
 8007424:	4821      	ldr	r0, [pc, #132]	; (80074ac <vTaskStartScheduler+0xb8>)
 8007426:	f7ff fe0f 	bl	8007048 <xTaskCreateStatic>
 800742a:	4603      	mov	r3, r0
 800742c:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <vTaskStartScheduler+0xbc>)
 800742e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007430:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <vTaskStartScheduler+0xbc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e001      	b.n	8007442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d102      	bne.n	800744e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007448:	f000 fd0e 	bl	8007e68 <xTimerCreateTimerTask>
 800744c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d116      	bne.n	8007482 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <vTaskStartScheduler+0xc0>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007470:	4b11      	ldr	r3, [pc, #68]	; (80074b8 <vTaskStartScheduler+0xc4>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <vTaskStartScheduler+0xc8>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747c:	f001 f8d0 	bl	8008620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007480:	e00e      	b.n	80074a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d10a      	bne.n	80074a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <vTaskStartScheduler+0xaa>
}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	0800a8dc 	.word	0x0800a8dc
 80074ac:	08007afd 	.word	0x08007afd
 80074b0:	20000e40 	.word	0x20000e40
 80074b4:	20000e3c 	.word	0x20000e3c
 80074b8:	20000e28 	.word	0x20000e28
 80074bc:	20000e20 	.word	0x20000e20

080074c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <vTaskSuspendAll+0x18>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	4a03      	ldr	r2, [pc, #12]	; (80074d8 <vTaskSuspendAll+0x18>)
 80074cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000e44 	.word	0x20000e44

080074dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ea:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <xTaskResumeAll+0x118>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <xTaskResumeAll+0x2c>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	603b      	str	r3, [r7, #0]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007508:	f001 f92c 	bl	8008764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800750c:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <xTaskResumeAll+0x118>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3b01      	subs	r3, #1
 8007512:	4a38      	ldr	r2, [pc, #224]	; (80075f4 <xTaskResumeAll+0x118>)
 8007514:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007516:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <xTaskResumeAll+0x118>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d162      	bne.n	80075e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800751e:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <xTaskResumeAll+0x11c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d05e      	beq.n	80075e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007526:	e02f      	b.n	8007588 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007528:	4b34      	ldr	r3, [pc, #208]	; (80075fc <xTaskResumeAll+0x120>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3318      	adds	r3, #24
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe ffb7 	bl	80064a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe ffb2 	bl	80064a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4b2d      	ldr	r3, [pc, #180]	; (8007600 <xTaskResumeAll+0x124>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d903      	bls.n	8007558 <xTaskResumeAll+0x7c>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <xTaskResumeAll+0x124>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <xTaskResumeAll+0x128>)
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fe ff3d 	bl	80063ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b23      	ldr	r3, [pc, #140]	; (8007608 <xTaskResumeAll+0x12c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007582:	4b22      	ldr	r3, [pc, #136]	; (800760c <xTaskResumeAll+0x130>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007588:	4b1c      	ldr	r3, [pc, #112]	; (80075fc <xTaskResumeAll+0x120>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1cb      	bne.n	8007528 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007596:	f000 fb67 	bl	8007c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800759a:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <xTaskResumeAll+0x134>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d010      	beq.n	80075c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075a6:	f000 f859 	bl	800765c <xTaskIncrementTick>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075b0:	4b16      	ldr	r3, [pc, #88]	; (800760c <xTaskResumeAll+0x130>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f1      	bne.n	80075a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <xTaskResumeAll+0x134>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <xTaskResumeAll+0x130>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075d4:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <xTaskResumeAll+0x138>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e4:	f001 f8ee 	bl	80087c4 <vPortExitCritical>

	return xAlreadyYielded;
 80075e8:	68bb      	ldr	r3, [r7, #8]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000e44 	.word	0x20000e44
 80075f8:	20000e1c 	.word	0x20000e1c
 80075fc:	20000ddc 	.word	0x20000ddc
 8007600:	20000e24 	.word	0x20000e24
 8007604:	2000094c 	.word	0x2000094c
 8007608:	20000948 	.word	0x20000948
 800760c:	20000e30 	.word	0x20000e30
 8007610:	20000e2c 	.word	0x20000e2c
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <xTaskGetTickCount+0x1c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007624:	687b      	ldr	r3, [r7, #4]
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000e20 	.word	0x20000e20

08007638 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800763e:	f001 f973 	bl	8008928 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007646:	4b04      	ldr	r3, [pc, #16]	; (8007658 <xTaskGetTickCountFromISR+0x20>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800764c:	683b      	ldr	r3, [r7, #0]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000e20 	.word	0x20000e20

0800765c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007666:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <xTaskIncrementTick+0x148>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f040 808f 	bne.w	800778e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007670:	4b4d      	ldr	r3, [pc, #308]	; (80077a8 <xTaskIncrementTick+0x14c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007678:	4a4b      	ldr	r2, [pc, #300]	; (80077a8 <xTaskIncrementTick+0x14c>)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d120      	bne.n	80076c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007684:	4b49      	ldr	r3, [pc, #292]	; (80077ac <xTaskIncrementTick+0x150>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	603b      	str	r3, [r7, #0]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xTaskIncrementTick+0x46>
 80076a4:	4b41      	ldr	r3, [pc, #260]	; (80077ac <xTaskIncrementTick+0x150>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b41      	ldr	r3, [pc, #260]	; (80077b0 <xTaskIncrementTick+0x154>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a3f      	ldr	r2, [pc, #252]	; (80077ac <xTaskIncrementTick+0x150>)
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	4a3f      	ldr	r2, [pc, #252]	; (80077b0 <xTaskIncrementTick+0x154>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <xTaskIncrementTick+0x158>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a3d      	ldr	r2, [pc, #244]	; (80077b4 <xTaskIncrementTick+0x158>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	f000 fad1 	bl	8007c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076c6:	4b3c      	ldr	r3, [pc, #240]	; (80077b8 <xTaskIncrementTick+0x15c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d349      	bcc.n	8007764 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d0:	4b36      	ldr	r3, [pc, #216]	; (80077ac <xTaskIncrementTick+0x150>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076da:	4b37      	ldr	r3, [pc, #220]	; (80077b8 <xTaskIncrementTick+0x15c>)
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	601a      	str	r2, [r3, #0]
					break;
 80076e2:	e03f      	b.n	8007764 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e4:	4b31      	ldr	r3, [pc, #196]	; (80077ac <xTaskIncrementTick+0x150>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d203      	bcs.n	8007704 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076fc:	4a2e      	ldr	r2, [pc, #184]	; (80077b8 <xTaskIncrementTick+0x15c>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007702:	e02f      	b.n	8007764 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fecd 	bl	80064a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	3318      	adds	r3, #24
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fec4 	bl	80064a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4b25      	ldr	r3, [pc, #148]	; (80077bc <xTaskIncrementTick+0x160>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d903      	bls.n	8007734 <xTaskIncrementTick+0xd8>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	4a22      	ldr	r2, [pc, #136]	; (80077bc <xTaskIncrementTick+0x160>)
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <xTaskIncrementTick+0x164>)
 8007742:	441a      	add	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fe fe4f 	bl	80063ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <xTaskIncrementTick+0x168>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	429a      	cmp	r2, r3
 800775c:	d3b8      	bcc.n	80076d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007762:	e7b5      	b.n	80076d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007764:	4b17      	ldr	r3, [pc, #92]	; (80077c4 <xTaskIncrementTick+0x168>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4915      	ldr	r1, [pc, #84]	; (80077c0 <xTaskIncrementTick+0x164>)
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d901      	bls.n	8007780 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007780:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <xTaskIncrementTick+0x16c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e004      	b.n	8007798 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800778e:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <xTaskIncrementTick+0x170>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3301      	adds	r3, #1
 8007794:	4a0d      	ldr	r2, [pc, #52]	; (80077cc <xTaskIncrementTick+0x170>)
 8007796:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007798:	697b      	ldr	r3, [r7, #20]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000e44 	.word	0x20000e44
 80077a8:	20000e20 	.word	0x20000e20
 80077ac:	20000dd4 	.word	0x20000dd4
 80077b0:	20000dd8 	.word	0x20000dd8
 80077b4:	20000e34 	.word	0x20000e34
 80077b8:	20000e3c 	.word	0x20000e3c
 80077bc:	20000e24 	.word	0x20000e24
 80077c0:	2000094c 	.word	0x2000094c
 80077c4:	20000948 	.word	0x20000948
 80077c8:	20000e30 	.word	0x20000e30
 80077cc:	20000e2c 	.word	0x20000e2c

080077d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077d6:	4b28      	ldr	r3, [pc, #160]	; (8007878 <vTaskSwitchContext+0xa8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077de:	4b27      	ldr	r3, [pc, #156]	; (800787c <vTaskSwitchContext+0xac>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077e4:	e041      	b.n	800786a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80077e6:	4b25      	ldr	r3, [pc, #148]	; (800787c <vTaskSwitchContext+0xac>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ec:	4b24      	ldr	r3, [pc, #144]	; (8007880 <vTaskSwitchContext+0xb0>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e010      	b.n	8007816 <vTaskSwitchContext+0x46>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <vTaskSwitchContext+0x40>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vTaskSwitchContext+0x3e>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3b01      	subs	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	491b      	ldr	r1, [pc, #108]	; (8007884 <vTaskSwitchContext+0xb4>)
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0e4      	beq.n	80077f4 <vTaskSwitchContext+0x24>
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a13      	ldr	r2, [pc, #76]	; (8007884 <vTaskSwitchContext+0xb4>)
 8007836:	4413      	add	r3, r2
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	605a      	str	r2, [r3, #4]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	3308      	adds	r3, #8
 800784c:	429a      	cmp	r2, r3
 800784e:	d104      	bne.n	800785a <vTaskSwitchContext+0x8a>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	605a      	str	r2, [r3, #4]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	4a09      	ldr	r2, [pc, #36]	; (8007888 <vTaskSwitchContext+0xb8>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	4a06      	ldr	r2, [pc, #24]	; (8007880 <vTaskSwitchContext+0xb0>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6013      	str	r3, [r2, #0]
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000e44 	.word	0x20000e44
 800787c:	20000e30 	.word	0x20000e30
 8007880:	20000e24 	.word	0x20000e24
 8007884:	2000094c 	.word	0x2000094c
 8007888:	20000948 	.word	0x20000948

0800788c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078b2:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <vTaskPlaceOnEventList+0x44>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3318      	adds	r3, #24
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fe fdbb 	bl	8006436 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078c0:	2101      	movs	r1, #1
 80078c2:	6838      	ldr	r0, [r7, #0]
 80078c4:	f000 fa7c 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000948 	.word	0x20000948

080078d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	617b      	str	r3, [r7, #20]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <vTaskPlaceOnEventListRestricted+0x54>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3318      	adds	r3, #24
 8007902:	4619      	mov	r1, r3
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7fe fd72 	bl	80063ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007910:	f04f 33ff 	mov.w	r3, #4294967295
 8007914:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	68b8      	ldr	r0, [r7, #8]
 800791a:	f000 fa51 	bl	8007dc0 <prvAddCurrentTaskToDelayedList>
	}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000948 	.word	0x20000948

0800792c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60fb      	str	r3, [r7, #12]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3318      	adds	r3, #24
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fda3 	bl	80064a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007962:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <xTaskRemoveFromEventList+0xb0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d11d      	bne.n	80079a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3304      	adds	r3, #4
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fd9a 	bl	80064a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	4b19      	ldr	r3, [pc, #100]	; (80079e0 <xTaskRemoveFromEventList+0xb4>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d903      	bls.n	8007988 <xTaskRemoveFromEventList+0x5c>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <xTaskRemoveFromEventList+0xb4>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <xTaskRemoveFromEventList+0xb8>)
 8007996:	441a      	add	r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe fd25 	bl	80063ee <vListInsertEnd>
 80079a4:	e005      	b.n	80079b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	3318      	adds	r3, #24
 80079aa:	4619      	mov	r1, r3
 80079ac:	480e      	ldr	r0, [pc, #56]	; (80079e8 <xTaskRemoveFromEventList+0xbc>)
 80079ae:	f7fe fd1e 	bl	80063ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <xTaskRemoveFromEventList+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	429a      	cmp	r2, r3
 80079be:	d905      	bls.n	80079cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079c4:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <xTaskRemoveFromEventList+0xc4>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e001      	b.n	80079d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079d0:	697b      	ldr	r3, [r7, #20]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000e44 	.word	0x20000e44
 80079e0:	20000e24 	.word	0x20000e24
 80079e4:	2000094c 	.word	0x2000094c
 80079e8:	20000ddc 	.word	0x20000ddc
 80079ec:	20000948 	.word	0x20000948
 80079f0:	20000e30 	.word	0x20000e30

080079f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <vTaskInternalSetTimeOutState+0x24>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <vTaskInternalSetTimeOutState+0x28>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	605a      	str	r2, [r3, #4]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	20000e34 	.word	0x20000e34
 8007a1c:	20000e20 	.word	0x20000e20

08007a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a62:	f000 fe7f 	bl	8008764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <xTaskCheckForTimeOut+0xbc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7e:	d102      	bne.n	8007a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	e023      	b.n	8007ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <xTaskCheckForTimeOut+0xc0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d007      	beq.n	8007aa2 <xTaskCheckForTimeOut+0x82>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e015      	b.n	8007ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d20b      	bcs.n	8007ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ff9b 	bl	80079f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	e004      	b.n	8007ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ace:	f000 fe79 	bl	80087c4 <vPortExitCritical>

	return xReturn;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000e20 	.word	0x20000e20
 8007ae0:	20000e34 	.word	0x20000e34

08007ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ae8:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <vTaskMissedYield+0x14>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
}
 8007aee:	bf00      	nop
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	20000e30 	.word	0x20000e30

08007afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b04:	f000 f852 	bl	8007bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <prvIdleTask+0x28>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d9f9      	bls.n	8007b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <prvIdleTask+0x2c>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b20:	e7f0      	b.n	8007b04 <prvIdleTask+0x8>
 8007b22:	bf00      	nop
 8007b24:	2000094c 	.word	0x2000094c
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b32:	2300      	movs	r3, #0
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e00c      	b.n	8007b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4a12      	ldr	r2, [pc, #72]	; (8007b8c <prvInitialiseTaskLists+0x60>)
 8007b44:	4413      	add	r3, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fc24 	bl	8006394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b37      	cmp	r3, #55	; 0x37
 8007b56:	d9ef      	bls.n	8007b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b58:	480d      	ldr	r0, [pc, #52]	; (8007b90 <prvInitialiseTaskLists+0x64>)
 8007b5a:	f7fe fc1b 	bl	8006394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b5e:	480d      	ldr	r0, [pc, #52]	; (8007b94 <prvInitialiseTaskLists+0x68>)
 8007b60:	f7fe fc18 	bl	8006394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b64:	480c      	ldr	r0, [pc, #48]	; (8007b98 <prvInitialiseTaskLists+0x6c>)
 8007b66:	f7fe fc15 	bl	8006394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b6a:	480c      	ldr	r0, [pc, #48]	; (8007b9c <prvInitialiseTaskLists+0x70>)
 8007b6c:	f7fe fc12 	bl	8006394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b70:	480b      	ldr	r0, [pc, #44]	; (8007ba0 <prvInitialiseTaskLists+0x74>)
 8007b72:	f7fe fc0f 	bl	8006394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <prvInitialiseTaskLists+0x78>)
 8007b78:	4a05      	ldr	r2, [pc, #20]	; (8007b90 <prvInitialiseTaskLists+0x64>)
 8007b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <prvInitialiseTaskLists+0x7c>)
 8007b7e:	4a05      	ldr	r2, [pc, #20]	; (8007b94 <prvInitialiseTaskLists+0x68>)
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000094c 	.word	0x2000094c
 8007b90:	20000dac 	.word	0x20000dac
 8007b94:	20000dc0 	.word	0x20000dc0
 8007b98:	20000ddc 	.word	0x20000ddc
 8007b9c:	20000df0 	.word	0x20000df0
 8007ba0:	20000e08 	.word	0x20000e08
 8007ba4:	20000dd4 	.word	0x20000dd4
 8007ba8:	20000dd8 	.word	0x20000dd8

08007bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb2:	e019      	b.n	8007be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bb4:	f000 fdd6 	bl	8008764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb8:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <prvCheckTasksWaitingTermination+0x50>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fc6f 	bl	80064a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bca:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <prvCheckTasksWaitingTermination+0x54>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	4a0b      	ldr	r2, [pc, #44]	; (8007c00 <prvCheckTasksWaitingTermination+0x54>)
 8007bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <prvCheckTasksWaitingTermination+0x58>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <prvCheckTasksWaitingTermination+0x58>)
 8007bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bde:	f000 fdf1 	bl	80087c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f810 	bl	8007c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <prvCheckTasksWaitingTermination+0x58>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e1      	bne.n	8007bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000df0 	.word	0x20000df0
 8007c00:	20000e1c 	.word	0x20000e1c
 8007c04:	20000e04 	.word	0x20000e04

08007c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d108      	bne.n	8007c2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 ff8e 	bl	8008b40 <vPortFree>
				vPortFree( pxTCB );
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 ff8b 	bl	8008b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c2a:	e018      	b.n	8007c5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d103      	bne.n	8007c3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 ff82 	bl	8008b40 <vPortFree>
	}
 8007c3c:	e00f      	b.n	8007c5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d00a      	beq.n	8007c5e <prvDeleteTCB+0x56>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	60fb      	str	r3, [r7, #12]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <prvDeleteTCB+0x54>
	}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <prvResetNextTaskUnblockTime+0x38>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c80:	e008      	b.n	8007c94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <prvResetNextTaskUnblockTime+0x38>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4a04      	ldr	r2, [pc, #16]	; (8007ca4 <prvResetNextTaskUnblockTime+0x3c>)
 8007c92:	6013      	str	r3, [r2, #0]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20000dd4 	.word	0x20000dd4
 8007ca4:	20000e3c 	.word	0x20000e3c

08007ca8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cae:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <xTaskGetSchedulerState+0x34>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	607b      	str	r3, [r7, #4]
 8007cba:	e008      	b.n	8007cce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <xTaskGetSchedulerState+0x38>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	e001      	b.n	8007cce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cce:	687b      	ldr	r3, [r7, #4]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20000e28 	.word	0x20000e28
 8007ce0:	20000e44 	.word	0x20000e44

08007ce4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d056      	beq.n	8007da8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cfa:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <xTaskPriorityDisinherit+0xd0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d00a      	beq.n	8007d1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60bb      	str	r3, [r7, #8]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	1e5a      	subs	r2, r3, #1
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d02c      	beq.n	8007da8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d128      	bne.n	8007da8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fba4 	bl	80064a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d78:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <xTaskPriorityDisinherit+0xd4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d903      	bls.n	8007d88 <xTaskPriorityDisinherit+0xa4>
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a0c      	ldr	r2, [pc, #48]	; (8007db8 <xTaskPriorityDisinherit+0xd4>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <xTaskPriorityDisinherit+0xd8>)
 8007d96:	441a      	add	r2, r3
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fe fb25 	bl	80063ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da8:	697b      	ldr	r3, [r7, #20]
	}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000948 	.word	0x20000948
 8007db8:	20000e24 	.word	0x20000e24
 8007dbc:	2000094c 	.word	0x2000094c

08007dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd0:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fb66 	bl	80064a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d10a      	bne.n	8007dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dea:	4b1a      	ldr	r3, [pc, #104]	; (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4819      	ldr	r0, [pc, #100]	; (8007e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8007df4:	f7fe fafb 	bl	80063ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007df8:	e026      	b.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4413      	add	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e02:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d209      	bcs.n	8007e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e12:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7fe fb09 	bl	8006436 <vListInsert>
}
 8007e24:	e010      	b.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f7fe faff 	bl	8006436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d202      	bcs.n	8007e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e42:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6013      	str	r3, [r2, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000e20 	.word	0x20000e20
 8007e54:	20000948 	.word	0x20000948
 8007e58:	20000e08 	.word	0x20000e08
 8007e5c:	20000dd8 	.word	0x20000dd8
 8007e60:	20000dd4 	.word	0x20000dd4
 8007e64:	20000e3c 	.word	0x20000e3c

08007e68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e72:	f000 fb07 	bl	8008484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e76:	4b1c      	ldr	r3, [pc, #112]	; (8007ee8 <xTimerCreateTimerTask+0x80>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d021      	beq.n	8007ec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e86:	1d3a      	adds	r2, r7, #4
 8007e88:	f107 0108 	add.w	r1, r7, #8
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fa65 	bl	8006360 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	9202      	str	r2, [sp, #8]
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	460a      	mov	r2, r1
 8007ea8:	4910      	ldr	r1, [pc, #64]	; (8007eec <xTimerCreateTimerTask+0x84>)
 8007eaa:	4811      	ldr	r0, [pc, #68]	; (8007ef0 <xTimerCreateTimerTask+0x88>)
 8007eac:	f7ff f8cc 	bl	8007048 <xTaskCreateStatic>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <xTimerCreateTimerTask+0x8c>)
 8007eb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <xTimerCreateTimerTask+0x8c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	613b      	str	r3, [r7, #16]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ede:	697b      	ldr	r3, [r7, #20]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000e78 	.word	0x20000e78
 8007eec:	0800a8e4 	.word	0x0800a8e4
 8007ef0:	0800802d 	.word	0x0800802d
 8007ef4:	20000e7c 	.word	0x20000e7c

08007ef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	623b      	str	r3, [r7, #32]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <xTimerGenericCommand+0x98>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d02a      	beq.n	8007f84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b05      	cmp	r3, #5
 8007f3e:	dc18      	bgt.n	8007f72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f40:	f7ff feb2 	bl	8007ca8 <xTaskGetSchedulerState>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d109      	bne.n	8007f5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f4a:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <xTimerGenericCommand+0x98>)
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	f107 0110 	add.w	r1, r7, #16
 8007f52:	2300      	movs	r3, #0
 8007f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f56:	f7fe fc0f 	bl	8006778 <xQueueGenericSend>
 8007f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f5c:	e012      	b.n	8007f84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <xTimerGenericCommand+0x98>)
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f107 0110 	add.w	r1, r7, #16
 8007f66:	2300      	movs	r3, #0
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f7fe fc05 	bl	8006778 <xQueueGenericSend>
 8007f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f70:	e008      	b.n	8007f84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f72:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <xTimerGenericCommand+0x98>)
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	f107 0110 	add.w	r1, r7, #16
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	f7fe fcf9 	bl	8006974 <xQueueGenericSendFromISR>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3728      	adds	r7, #40	; 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000e78 	.word	0x20000e78

08007f94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9e:	4b22      	ldr	r3, [pc, #136]	; (8008028 <prvProcessExpiredTimer+0x94>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fa7b 	bl	80064a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d022      	beq.n	8008006 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	18d1      	adds	r1, r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	6978      	ldr	r0, [r7, #20]
 8007fce:	f000 f8d1 	bl	8008174 <prvInsertTimerInActiveList>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01f      	beq.n	8008018 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	6978      	ldr	r0, [r7, #20]
 8007fe4:	f7ff ff88 	bl	8007ef8 <xTimerGenericCommand>
 8007fe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d113      	bne.n	8008018 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	b2da      	uxtb	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	6978      	ldr	r0, [r7, #20]
 800801e:	4798      	blx	r3
}
 8008020:	bf00      	nop
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000e70 	.word	0x20000e70

0800802c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f857 	bl	80080ec <prvGetNextExpireTime>
 800803e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f803 	bl	8008050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800804a:	f000 f8d5 	bl	80081f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800804e:	e7f1      	b.n	8008034 <prvTimerTask+0x8>

08008050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800805a:	f7ff fa31 	bl	80074c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800805e:	f107 0308 	add.w	r3, r7, #8
 8008062:	4618      	mov	r0, r3
 8008064:	f000 f866 	bl	8008134 <prvSampleTimeNow>
 8008068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d130      	bne.n	80080d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <prvProcessTimerOrBlockTask+0x3c>
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	429a      	cmp	r2, r3
 800807c:	d806      	bhi.n	800808c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800807e:	f7ff fa2d 	bl	80074dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff ff85 	bl	8007f94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800808a:	e024      	b.n	80080d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <prvProcessTimerOrBlockTask+0x90>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <prvProcessTimerOrBlockTask+0x50>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <prvProcessTimerOrBlockTask+0x52>
 80080a0:	2300      	movs	r3, #0
 80080a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <prvProcessTimerOrBlockTask+0x94>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4619      	mov	r1, r3
 80080b2:	f7fe ff95 	bl	8006fe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080b6:	f7ff fa11 	bl	80074dc <xTaskResumeAll>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <prvProcessTimerOrBlockTask+0x98>)
 80080c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	f3bf 8f6f 	isb	sy
}
 80080d0:	e001      	b.n	80080d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080d2:	f7ff fa03 	bl	80074dc <xTaskResumeAll>
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20000e74 	.word	0x20000e74
 80080e4:	20000e78 	.word	0x20000e78
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080f4:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <prvGetNextExpireTime+0x44>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <prvGetNextExpireTime+0x16>
 80080fe:	2201      	movs	r2, #1
 8008100:	e000      	b.n	8008104 <prvGetNextExpireTime+0x18>
 8008102:	2200      	movs	r2, #0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <prvGetNextExpireTime+0x44>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e001      	b.n	8008120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000e70 	.word	0x20000e70

08008134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800813c:	f7ff fa6c 	bl	8007618 <xTaskGetTickCount>
 8008140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <prvSampleTimeNow+0x3c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	429a      	cmp	r2, r3
 800814a:	d205      	bcs.n	8008158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800814c:	f000 f936 	bl	80083bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	e002      	b.n	800815e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800815e:	4a04      	ldr	r2, [pc, #16]	; (8008170 <prvSampleTimeNow+0x3c>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000e80 	.word	0x20000e80

08008174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d812      	bhi.n	80081c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d302      	bcc.n	80081ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e01b      	b.n	80081e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081ae:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <prvInsertTimerInActiveList+0x7c>)
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fe f93c 	bl	8006436 <vListInsert>
 80081be:	e012      	b.n	80081e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d206      	bcs.n	80081d6 <prvInsertTimerInActiveList+0x62>
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d302      	bcc.n	80081d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081d0:	2301      	movs	r3, #1
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e007      	b.n	80081e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <prvInsertTimerInActiveList+0x80>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fe f928 	bl	8006436 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081e6:	697b      	ldr	r3, [r7, #20]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000e74 	.word	0x20000e74
 80081f4:	20000e70 	.word	0x20000e70

080081f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08e      	sub	sp, #56	; 0x38
 80081fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081fe:	e0ca      	b.n	8008396 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	da18      	bge.n	8008238 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	3304      	adds	r3, #4
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61fb      	str	r3, [r7, #28]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822e:	6850      	ldr	r0, [r2, #4]
 8008230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008232:	6892      	ldr	r2, [r2, #8]
 8008234:	4611      	mov	r1, r2
 8008236:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f2c0 80ab 	blt.w	8008396 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe f929 	bl	80064a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008256:	463b      	mov	r3, r7
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff6b 	bl	8008134 <prvSampleTimeNow>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b09      	cmp	r3, #9
 8008264:	f200 8096 	bhi.w	8008394 <prvProcessReceivedCommands+0x19c>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <prvProcessReceivedCommands+0x78>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008299 	.word	0x08008299
 8008274:	08008299 	.word	0x08008299
 8008278:	08008299 	.word	0x08008299
 800827c:	0800830d 	.word	0x0800830d
 8008280:	08008321 	.word	0x08008321
 8008284:	0800836b 	.word	0x0800836b
 8008288:	08008299 	.word	0x08008299
 800828c:	08008299 	.word	0x08008299
 8008290:	0800830d 	.word	0x0800830d
 8008294:	08008321 	.word	0x08008321
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	18d1      	adds	r1, r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b8:	f7ff ff5c 	bl	8008174 <prvInsertTimerInActiveList>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d069      	beq.n	8008396 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d05e      	beq.n	8008396 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	441a      	add	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ea:	f7ff fe05 	bl	8007ef8 <xTimerGenericCommand>
 80082ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d14f      	bne.n	8008396 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	61bb      	str	r3, [r7, #24]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800831e:	e03a      	b.n	8008396 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	b2da      	uxtb	r2, r3
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	617b      	str	r3, [r7, #20]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	18d1      	adds	r1, r2, r3
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008364:	f7ff ff06 	bl	8008174 <prvInsertTimerInActiveList>
					break;
 8008368:	e015      	b.n	8008396 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837a:	f000 fbe1 	bl	8008b40 <vPortFree>
 800837e:	e00a      	b.n	8008396 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008392:	e000      	b.n	8008396 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008396:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <prvProcessReceivedCommands+0x1c0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	1d39      	adds	r1, r7, #4
 800839c:	2200      	movs	r2, #0
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fb84 	bl	8006aac <xQueueReceive>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f47f af2a 	bne.w	8008200 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	3730      	adds	r7, #48	; 0x30
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000e78 	.word	0x20000e78

080083bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083c2:	e048      	b.n	8008456 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083c4:	4b2d      	ldr	r3, [pc, #180]	; (800847c <prvSwitchTimerLists+0xc0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ce:	4b2b      	ldr	r3, [pc, #172]	; (800847c <prvSwitchTimerLists+0xc0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3304      	adds	r3, #4
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe f863 	bl	80064a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d02e      	beq.n	8008456 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4413      	add	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	429a      	cmp	r2, r3
 8008408:	d90e      	bls.n	8008428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008416:	4b19      	ldr	r3, [pc, #100]	; (800847c <prvSwitchTimerLists+0xc0>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fe f808 	bl	8006436 <vListInsert>
 8008426:	e016      	b.n	8008456 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	2100      	movs	r1, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff fd60 	bl	8007ef8 <xTimerGenericCommand>
 8008438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	603b      	str	r3, [r7, #0]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <prvSwitchTimerLists+0xc0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1b1      	bne.n	80083c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <prvSwitchTimerLists+0xc0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008466:	4b06      	ldr	r3, [pc, #24]	; (8008480 <prvSwitchTimerLists+0xc4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a04      	ldr	r2, [pc, #16]	; (800847c <prvSwitchTimerLists+0xc0>)
 800846c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800846e:	4a04      	ldr	r2, [pc, #16]	; (8008480 <prvSwitchTimerLists+0xc4>)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	6013      	str	r3, [r2, #0]
}
 8008474:	bf00      	nop
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000e70 	.word	0x20000e70
 8008480:	20000e74 	.word	0x20000e74

08008484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800848a:	f000 f96b 	bl	8008764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800848e:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <prvCheckForValidListAndQueue+0x60>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d120      	bne.n	80084d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008496:	4814      	ldr	r0, [pc, #80]	; (80084e8 <prvCheckForValidListAndQueue+0x64>)
 8008498:	f7fd ff7c 	bl	8006394 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800849c:	4813      	ldr	r0, [pc, #76]	; (80084ec <prvCheckForValidListAndQueue+0x68>)
 800849e:	f7fd ff79 	bl	8006394 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084a2:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <prvCheckForValidListAndQueue+0x6c>)
 80084a4:	4a10      	ldr	r2, [pc, #64]	; (80084e8 <prvCheckForValidListAndQueue+0x64>)
 80084a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <prvCheckForValidListAndQueue+0x70>)
 80084aa:	4a10      	ldr	r2, [pc, #64]	; (80084ec <prvCheckForValidListAndQueue+0x68>)
 80084ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084ae:	2300      	movs	r3, #0
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <prvCheckForValidListAndQueue+0x74>)
 80084b4:	4a11      	ldr	r2, [pc, #68]	; (80084fc <prvCheckForValidListAndQueue+0x78>)
 80084b6:	2110      	movs	r1, #16
 80084b8:	200a      	movs	r0, #10
 80084ba:	f7fe f887 	bl	80065cc <xQueueGenericCreateStatic>
 80084be:	4603      	mov	r3, r0
 80084c0:	4a08      	ldr	r2, [pc, #32]	; (80084e4 <prvCheckForValidListAndQueue+0x60>)
 80084c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <prvCheckForValidListAndQueue+0x60>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <prvCheckForValidListAndQueue+0x60>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	490b      	ldr	r1, [pc, #44]	; (8008500 <prvCheckForValidListAndQueue+0x7c>)
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fd5a 	bl	8006f8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084d8:	f000 f974 	bl	80087c4 <vPortExitCritical>
}
 80084dc:	bf00      	nop
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000e78 	.word	0x20000e78
 80084e8:	20000e48 	.word	0x20000e48
 80084ec:	20000e5c 	.word	0x20000e5c
 80084f0:	20000e70 	.word	0x20000e70
 80084f4:	20000e74 	.word	0x20000e74
 80084f8:	20000f24 	.word	0x20000f24
 80084fc:	20000e84 	.word	0x20000e84
 8008500:	0800a8ec 	.word	0x0800a8ec

08008504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3b04      	subs	r3, #4
 8008514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800851c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3b04      	subs	r3, #4
 8008522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f023 0201 	bic.w	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3b04      	subs	r3, #4
 8008532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008534:	4a0c      	ldr	r2, [pc, #48]	; (8008568 <pxPortInitialiseStack+0x64>)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3b14      	subs	r3, #20
 800853e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3b04      	subs	r3, #4
 800854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f06f 0202 	mvn.w	r2, #2
 8008552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3b20      	subs	r3, #32
 8008558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800855a:	68fb      	ldr	r3, [r7, #12]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	0800856d 	.word	0x0800856d

0800856c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <prvTaskExitError+0x54>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d00a      	beq.n	8008596 <prvTaskExitError+0x2a>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvTaskExitError+0x28>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60bb      	str	r3, [r7, #8]
}
 80085a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085aa:	bf00      	nop
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0fc      	beq.n	80085ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	20000010 	.word	0x20000010
	...

080085d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <pxCurrentTCBConst2>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	f380 8809 	msr	PSP, r0
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8811 	msr	BASEPRI, r0
 80085ea:	4770      	bx	lr
 80085ec:	f3af 8000 	nop.w

080085f0 <pxCurrentTCBConst2>:
 80085f0:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085f8:	4808      	ldr	r0, [pc, #32]	; (800861c <prvPortStartFirstTask+0x24>)
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	6800      	ldr	r0, [r0, #0]
 80085fe:	f380 8808 	msr	MSP, r0
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f380 8814 	msr	CONTROL, r0
 800860a:	b662      	cpsie	i
 800860c:	b661      	cpsie	f
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	df00      	svc	0
 8008618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800861a:	bf00      	nop
 800861c:	e000ed08 	.word	0xe000ed08

08008620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008626:	4b46      	ldr	r3, [pc, #280]	; (8008740 <xPortStartScheduler+0x120>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a46      	ldr	r2, [pc, #280]	; (8008744 <xPortStartScheduler+0x124>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d10a      	bne.n	8008646 <xPortStartScheduler+0x26>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	613b      	str	r3, [r7, #16]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008646:	4b3e      	ldr	r3, [pc, #248]	; (8008740 <xPortStartScheduler+0x120>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a3f      	ldr	r2, [pc, #252]	; (8008748 <xPortStartScheduler+0x128>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10a      	bne.n	8008666 <xPortStartScheduler+0x46>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	60fb      	str	r3, [r7, #12]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008666:	4b39      	ldr	r3, [pc, #228]	; (800874c <xPortStartScheduler+0x12c>)
 8008668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	22ff      	movs	r2, #255	; 0xff
 8008676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008688:	b2da      	uxtb	r2, r3
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <xPortStartScheduler+0x130>)
 800868c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800868e:	4b31      	ldr	r3, [pc, #196]	; (8008754 <xPortStartScheduler+0x134>)
 8008690:	2207      	movs	r2, #7
 8008692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008694:	e009      	b.n	80086aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008696:	4b2f      	ldr	r3, [pc, #188]	; (8008754 <xPortStartScheduler+0x134>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3b01      	subs	r3, #1
 800869c:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <xPortStartScheduler+0x134>)
 800869e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d0ef      	beq.n	8008696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086b6:	4b27      	ldr	r3, [pc, #156]	; (8008754 <xPortStartScheduler+0x134>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f1c3 0307 	rsb	r3, r3, #7
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d00a      	beq.n	80086d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086d8:	4b1e      	ldr	r3, [pc, #120]	; (8008754 <xPortStartScheduler+0x134>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <xPortStartScheduler+0x134>)
 80086e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086e2:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <xPortStartScheduler+0x134>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <xPortStartScheduler+0x134>)
 80086ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086f6:	4b18      	ldr	r3, [pc, #96]	; (8008758 <xPortStartScheduler+0x138>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a17      	ldr	r2, [pc, #92]	; (8008758 <xPortStartScheduler+0x138>)
 80086fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008702:	4b15      	ldr	r3, [pc, #84]	; (8008758 <xPortStartScheduler+0x138>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a14      	ldr	r2, [pc, #80]	; (8008758 <xPortStartScheduler+0x138>)
 8008708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800870c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800870e:	f000 f8dd 	bl	80088cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008712:	4b12      	ldr	r3, [pc, #72]	; (800875c <xPortStartScheduler+0x13c>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008718:	f000 f8fc 	bl	8008914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800871c:	4b10      	ldr	r3, [pc, #64]	; (8008760 <xPortStartScheduler+0x140>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a0f      	ldr	r2, [pc, #60]	; (8008760 <xPortStartScheduler+0x140>)
 8008722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008728:	f7ff ff66 	bl	80085f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800872c:	f7ff f850 	bl	80077d0 <vTaskSwitchContext>
	prvTaskExitError();
 8008730:	f7ff ff1c 	bl	800856c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	e000ed00 	.word	0xe000ed00
 8008744:	410fc271 	.word	0x410fc271
 8008748:	410fc270 	.word	0x410fc270
 800874c:	e000e400 	.word	0xe000e400
 8008750:	20000f74 	.word	0x20000f74
 8008754:	20000f78 	.word	0x20000f78
 8008758:	e000ed20 	.word	0xe000ed20
 800875c:	20000010 	.word	0x20000010
 8008760:	e000ef34 	.word	0xe000ef34

08008764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	607b      	str	r3, [r7, #4]
}
 800877c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <vPortEnterCritical+0x58>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <vPortEnterCritical+0x58>)
 8008786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <vPortEnterCritical+0x58>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d10f      	bne.n	80087b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <vPortEnterCritical+0x5c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	603b      	str	r3, [r7, #0]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <vPortEnterCritical+0x4a>
	}
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20000010 	.word	0x20000010
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <vPortExitCritical+0x50>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <vPortExitCritical+0x24>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	607b      	str	r3, [r7, #4]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <vPortExitCritical+0x50>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	4a09      	ldr	r2, [pc, #36]	; (8008814 <vPortExitCritical+0x50>)
 80087f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <vPortExitCritical+0x50>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <vPortExitCritical+0x42>
 80087fa:	2300      	movs	r3, #0
 80087fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	f383 8811 	msr	BASEPRI, r3
}
 8008804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000010 	.word	0x20000010
	...

08008820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008820:	f3ef 8009 	mrs	r0, PSP
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	4b15      	ldr	r3, [pc, #84]	; (8008880 <pxCurrentTCBConst>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f01e 0f10 	tst.w	lr, #16
 8008830:	bf08      	it	eq
 8008832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	6010      	str	r0, [r2, #0]
 800883c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008844:	f380 8811 	msr	BASEPRI, r0
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f7fe ffbe 	bl	80077d0 <vTaskSwitchContext>
 8008854:	f04f 0000 	mov.w	r0, #0
 8008858:	f380 8811 	msr	BASEPRI, r0
 800885c:	bc09      	pop	{r0, r3}
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	6808      	ldr	r0, [r1, #0]
 8008862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008866:	f01e 0f10 	tst.w	lr, #16
 800886a:	bf08      	it	eq
 800886c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008870:	f380 8809 	msr	PSP, r0
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	f3af 8000 	nop.w

08008880 <pxCurrentTCBConst>:
 8008880:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop

08008888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	607b      	str	r3, [r7, #4]
}
 80088a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088a2:	f7fe fedb 	bl	800765c <xTaskIncrementTick>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <xPortSysTickHandler+0x40>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	f383 8811 	msr	BASEPRI, r3
}
 80088be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <vPortSetupTimerInterrupt+0x34>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <vPortSetupTimerInterrupt+0x38>)
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <vPortSetupTimerInterrupt+0x3c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <vPortSetupTimerInterrupt+0x40>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	099b      	lsrs	r3, r3, #6
 80088e8:	4a09      	ldr	r2, [pc, #36]	; (8008910 <vPortSetupTimerInterrupt+0x44>)
 80088ea:	3b01      	subs	r3, #1
 80088ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088ee:	4b04      	ldr	r3, [pc, #16]	; (8008900 <vPortSetupTimerInterrupt+0x34>)
 80088f0:	2207      	movs	r2, #7
 80088f2:	601a      	str	r2, [r3, #0]
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	e000e010 	.word	0xe000e010
 8008904:	e000e018 	.word	0xe000e018
 8008908:	20000000 	.word	0x20000000
 800890c:	10624dd3 	.word	0x10624dd3
 8008910:	e000e014 	.word	0xe000e014

08008914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008924 <vPortEnableVFP+0x10>
 8008918:	6801      	ldr	r1, [r0, #0]
 800891a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800891e:	6001      	str	r1, [r0, #0]
 8008920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008922:	bf00      	nop
 8008924:	e000ed88 	.word	0xe000ed88

08008928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800892e:	f3ef 8305 	mrs	r3, IPSR
 8008932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b0f      	cmp	r3, #15
 8008938:	d914      	bls.n	8008964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800893a:	4a17      	ldr	r2, [pc, #92]	; (8008998 <vPortValidateInterruptPriority+0x70>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008944:	4b15      	ldr	r3, [pc, #84]	; (800899c <vPortValidateInterruptPriority+0x74>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	7afa      	ldrb	r2, [r7, #11]
 800894a:	429a      	cmp	r2, r3
 800894c:	d20a      	bcs.n	8008964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008964:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <vPortValidateInterruptPriority+0x78>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800896c:	4b0d      	ldr	r3, [pc, #52]	; (80089a4 <vPortValidateInterruptPriority+0x7c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	429a      	cmp	r2, r3
 8008972:	d90a      	bls.n	800898a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	603b      	str	r3, [r7, #0]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <vPortValidateInterruptPriority+0x60>
	}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	e000e3f0 	.word	0xe000e3f0
 800899c:	20000f74 	.word	0x20000f74
 80089a0:	e000ed0c 	.word	0xe000ed0c
 80089a4:	20000f78 	.word	0x20000f78

080089a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089b4:	f7fe fd84 	bl	80074c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089b8:	4b5b      	ldr	r3, [pc, #364]	; (8008b28 <pvPortMalloc+0x180>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089c0:	f000 f920 	bl	8008c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089c4:	4b59      	ldr	r3, [pc, #356]	; (8008b2c <pvPortMalloc+0x184>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8093 	bne.w	8008af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01d      	beq.n	8008a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80089d8:	2208      	movs	r2, #8
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d014      	beq.n	8008a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f023 0307 	bic.w	r3, r3, #7
 80089f0:	3308      	adds	r3, #8
 80089f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <pvPortMalloc+0x6c>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	617b      	str	r3, [r7, #20]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d06e      	beq.n	8008af8 <pvPortMalloc+0x150>
 8008a1a:	4b45      	ldr	r3, [pc, #276]	; (8008b30 <pvPortMalloc+0x188>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d869      	bhi.n	8008af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a24:	4b43      	ldr	r3, [pc, #268]	; (8008b34 <pvPortMalloc+0x18c>)
 8008a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a28:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <pvPortMalloc+0x18c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a2e:	e004      	b.n	8008a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d903      	bls.n	8008a4c <pvPortMalloc+0xa4>
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f1      	bne.n	8008a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <pvPortMalloc+0x180>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d050      	beq.n	8008af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	2308      	movs	r3, #8
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d91f      	bls.n	8008ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	613b      	str	r3, [r7, #16]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	1ad2      	subs	r2, r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ab2:	69b8      	ldr	r0, [r7, #24]
 8008ab4:	f000 f908 	bl	8008cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ab8:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <pvPortMalloc+0x188>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <pvPortMalloc+0x188>)
 8008ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <pvPortMalloc+0x188>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <pvPortMalloc+0x190>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d203      	bcs.n	8008ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <pvPortMalloc+0x188>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <pvPortMalloc+0x190>)
 8008ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <pvPortMalloc+0x184>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <pvPortMalloc+0x194>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <pvPortMalloc+0x194>)
 8008af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008af8:	f7fe fcf0 	bl	80074dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <pvPortMalloc+0x174>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60fb      	str	r3, [r7, #12]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <pvPortMalloc+0x172>
	return pvReturn;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3728      	adds	r7, #40	; 0x28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20004b84 	.word	0x20004b84
 8008b2c:	20004b98 	.word	0x20004b98
 8008b30:	20004b88 	.word	0x20004b88
 8008b34:	20004b7c 	.word	0x20004b7c
 8008b38:	20004b8c 	.word	0x20004b8c
 8008b3c:	20004b90 	.word	0x20004b90

08008b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04d      	beq.n	8008bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b52:	2308      	movs	r3, #8
 8008b54:	425b      	negs	r3, r3
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4413      	add	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <vPortFree+0xb8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <vPortFree+0x44>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60fb      	str	r3, [r7, #12]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00a      	beq.n	8008ba2 <vPortFree+0x62>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60bb      	str	r3, [r7, #8]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <vPortFree+0xb8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01e      	beq.n	8008bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d11a      	bne.n	8008bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <vPortFree+0xb8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bc8:	f7fe fc7a 	bl	80074c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <vPortFree+0xbc>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <vPortFree+0xbc>)
 8008bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f000 f874 	bl	8008cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <vPortFree+0xc0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	4a06      	ldr	r2, [pc, #24]	; (8008c00 <vPortFree+0xc0>)
 8008be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bea:	f7fe fc77 	bl	80074dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bee:	bf00      	nop
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20004b98 	.word	0x20004b98
 8008bfc:	20004b88 	.word	0x20004b88
 8008c00:	20004b94 	.word	0x20004b94

08008c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <prvHeapInit+0xac>)
 8008c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3307      	adds	r3, #7
 8008c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <prvHeapInit+0xac>)
 8008c34:	4413      	add	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <prvHeapInit+0xb0>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c42:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <prvHeapInit+0xb0>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c50:	2208      	movs	r2, #8
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <prvHeapInit+0xb4>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <prvHeapInit+0xb8>)
 8008c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4a09      	ldr	r2, [pc, #36]	; (8008cc0 <prvHeapInit+0xbc>)
 8008c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <prvHeapInit+0xc0>)
 8008c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ca2:	601a      	str	r2, [r3, #0]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20000f7c 	.word	0x20000f7c
 8008cb4:	20004b7c 	.word	0x20004b7c
 8008cb8:	20004b84 	.word	0x20004b84
 8008cbc:	20004b8c 	.word	0x20004b8c
 8008cc0:	20004b88 	.word	0x20004b88
 8008cc4:	20004b98 	.word	0x20004b98

08008cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cd0:	4b28      	ldr	r3, [pc, #160]	; (8008d74 <prvInsertBlockIntoFreeList+0xac>)
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e002      	b.n	8008cdc <prvInsertBlockIntoFreeList+0x14>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d8f7      	bhi.n	8008cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d108      	bne.n	8008d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	441a      	add	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d118      	bne.n	8008d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <prvInsertBlockIntoFreeList+0xb0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d00d      	beq.n	8008d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	441a      	add	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e008      	b.n	8008d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvInsertBlockIntoFreeList+0xb0>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e003      	b.n	8008d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d002      	beq.n	8008d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20004b7c 	.word	0x20004b7c
 8008d78:	20004b84 	.word	0x20004b84

08008d7c <findslot>:
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <findslot+0x2c>)
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	4604      	mov	r4, r0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	b118      	cbz	r0, 8008d8e <findslot+0x12>
 8008d86:	6a03      	ldr	r3, [r0, #32]
 8008d88:	b90b      	cbnz	r3, 8008d8e <findslot+0x12>
 8008d8a:	f000 fb25 	bl	80093d8 <__sinit>
 8008d8e:	2c13      	cmp	r4, #19
 8008d90:	d807      	bhi.n	8008da2 <findslot+0x26>
 8008d92:	4806      	ldr	r0, [pc, #24]	; (8008dac <findslot+0x30>)
 8008d94:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8008d98:	3201      	adds	r2, #1
 8008d9a:	d002      	beq.n	8008da2 <findslot+0x26>
 8008d9c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	2000      	movs	r0, #0
 8008da4:	e7fc      	b.n	8008da0 <findslot+0x24>
 8008da6:	bf00      	nop
 8008da8:	20000074 	.word	0x20000074
 8008dac:	20004ba8 	.word	0x20004ba8

08008db0 <error>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f000 fd16 	bl	80097e4 <__errno>
 8008db8:	2613      	movs	r6, #19
 8008dba:	4605      	mov	r5, r0
 8008dbc:	2700      	movs	r7, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	beab      	bkpt	0x00ab
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	602e      	str	r6, [r5, #0]
 8008dc8:	4620      	mov	r0, r4
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008dcc <checkerror>:
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d101      	bne.n	8008dd4 <checkerror+0x8>
 8008dd0:	f7ff bfee 	b.w	8008db0 <error>
 8008dd4:	4770      	bx	lr

08008dd6 <_swiread>:
 8008dd6:	b530      	push	{r4, r5, lr}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008dde:	9203      	str	r2, [sp, #12]
 8008de0:	2406      	movs	r4, #6
 8008de2:	ad01      	add	r5, sp, #4
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	beab      	bkpt	0x00ab
 8008dea:	4604      	mov	r4, r0
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff ffed 	bl	8008dcc <checkerror>
 8008df2:	b005      	add	sp, #20
 8008df4:	bd30      	pop	{r4, r5, pc}

08008df6 <_read>:
 8008df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df8:	4615      	mov	r5, r2
 8008dfa:	9101      	str	r1, [sp, #4]
 8008dfc:	f7ff ffbe 	bl	8008d7c <findslot>
 8008e00:	9901      	ldr	r1, [sp, #4]
 8008e02:	4604      	mov	r4, r0
 8008e04:	b938      	cbnz	r0, 8008e16 <_read+0x20>
 8008e06:	f000 fced 	bl	80097e4 <__errno>
 8008e0a:	2309      	movs	r3, #9
 8008e0c:	6003      	str	r3, [r0, #0]
 8008e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e12:	b003      	add	sp, #12
 8008e14:	bd30      	pop	{r4, r5, pc}
 8008e16:	6800      	ldr	r0, [r0, #0]
 8008e18:	462a      	mov	r2, r5
 8008e1a:	f7ff ffdc 	bl	8008dd6 <_swiread>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d0f7      	beq.n	8008e12 <_read+0x1c>
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	1a2a      	subs	r2, r5, r0
 8008e26:	4413      	add	r3, r2
 8008e28:	6063      	str	r3, [r4, #4]
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	e7f1      	b.n	8008e12 <_read+0x1c>

08008e2e <_swilseek>:
 8008e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e30:	460c      	mov	r4, r1
 8008e32:	4616      	mov	r6, r2
 8008e34:	f7ff ffa2 	bl	8008d7c <findslot>
 8008e38:	4605      	mov	r5, r0
 8008e3a:	b940      	cbnz	r0, 8008e4e <_swilseek+0x20>
 8008e3c:	f000 fcd2 	bl	80097e4 <__errno>
 8008e40:	2309      	movs	r3, #9
 8008e42:	6003      	str	r3, [r0, #0]
 8008e44:	f04f 34ff 	mov.w	r4, #4294967295
 8008e48:	4620      	mov	r0, r4
 8008e4a:	b003      	add	sp, #12
 8008e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4e:	2e02      	cmp	r6, #2
 8008e50:	d903      	bls.n	8008e5a <_swilseek+0x2c>
 8008e52:	f000 fcc7 	bl	80097e4 <__errno>
 8008e56:	2316      	movs	r3, #22
 8008e58:	e7f3      	b.n	8008e42 <_swilseek+0x14>
 8008e5a:	2e01      	cmp	r6, #1
 8008e5c:	d112      	bne.n	8008e84 <_swilseek+0x56>
 8008e5e:	6843      	ldr	r3, [r0, #4]
 8008e60:	18e4      	adds	r4, r4, r3
 8008e62:	d4f6      	bmi.n	8008e52 <_swilseek+0x24>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	260a      	movs	r6, #10
 8008e68:	e9cd 3400 	strd	r3, r4, [sp]
 8008e6c:	466f      	mov	r7, sp
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	beab      	bkpt	0x00ab
 8008e74:	4606      	mov	r6, r0
 8008e76:	4630      	mov	r0, r6
 8008e78:	f7ff ffa8 	bl	8008dcc <checkerror>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	dbe1      	blt.n	8008e44 <_swilseek+0x16>
 8008e80:	606c      	str	r4, [r5, #4]
 8008e82:	e7e1      	b.n	8008e48 <_swilseek+0x1a>
 8008e84:	2e02      	cmp	r6, #2
 8008e86:	6803      	ldr	r3, [r0, #0]
 8008e88:	d1ec      	bne.n	8008e64 <_swilseek+0x36>
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	260c      	movs	r6, #12
 8008e8e:	466f      	mov	r7, sp
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	beab      	bkpt	0x00ab
 8008e96:	4606      	mov	r6, r0
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7ff ff97 	bl	8008dcc <checkerror>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	d0d0      	beq.n	8008e44 <_swilseek+0x16>
 8008ea2:	4404      	add	r4, r0
 8008ea4:	e7de      	b.n	8008e64 <_swilseek+0x36>

08008ea6 <_lseek>:
 8008ea6:	f7ff bfc2 	b.w	8008e2e <_swilseek>

08008eaa <_swiwrite>:
 8008eaa:	b530      	push	{r4, r5, lr}
 8008eac:	b085      	sub	sp, #20
 8008eae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8008eb2:	9203      	str	r2, [sp, #12]
 8008eb4:	2405      	movs	r4, #5
 8008eb6:	ad01      	add	r5, sp, #4
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	beab      	bkpt	0x00ab
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7ff ff83 	bl	8008dcc <checkerror>
 8008ec6:	b005      	add	sp, #20
 8008ec8:	bd30      	pop	{r4, r5, pc}

08008eca <_write>:
 8008eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ecc:	4615      	mov	r5, r2
 8008ece:	9101      	str	r1, [sp, #4]
 8008ed0:	f7ff ff54 	bl	8008d7c <findslot>
 8008ed4:	9901      	ldr	r1, [sp, #4]
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	b930      	cbnz	r0, 8008ee8 <_write+0x1e>
 8008eda:	f000 fc83 	bl	80097e4 <__errno>
 8008ede:	2309      	movs	r3, #9
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	e012      	b.n	8008f0e <_write+0x44>
 8008ee8:	6800      	ldr	r0, [r0, #0]
 8008eea:	462a      	mov	r2, r5
 8008eec:	f7ff ffdd 	bl	8008eaa <_swiwrite>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dbf6      	blt.n	8008ee2 <_write+0x18>
 8008ef4:	6862      	ldr	r2, [r4, #4]
 8008ef6:	1a2b      	subs	r3, r5, r0
 8008ef8:	441a      	add	r2, r3
 8008efa:	42a8      	cmp	r0, r5
 8008efc:	6062      	str	r2, [r4, #4]
 8008efe:	d105      	bne.n	8008f0c <_write+0x42>
 8008f00:	2000      	movs	r0, #0
 8008f02:	b003      	add	sp, #12
 8008f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f08:	f7ff bf52 	b.w	8008db0 <error>
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	b003      	add	sp, #12
 8008f10:	bd30      	pop	{r4, r5, pc}

08008f12 <_swiclose>:
 8008f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f14:	2402      	movs	r4, #2
 8008f16:	9001      	str	r0, [sp, #4]
 8008f18:	ad01      	add	r5, sp, #4
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	beab      	bkpt	0x00ab
 8008f20:	4604      	mov	r4, r0
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7ff ff52 	bl	8008dcc <checkerror>
 8008f28:	b003      	add	sp, #12
 8008f2a:	bd30      	pop	{r4, r5, pc}

08008f2c <_close>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4605      	mov	r5, r0
 8008f30:	f7ff ff24 	bl	8008d7c <findslot>
 8008f34:	4604      	mov	r4, r0
 8008f36:	b930      	cbnz	r0, 8008f46 <_close+0x1a>
 8008f38:	f000 fc54 	bl	80097e4 <__errno>
 8008f3c:	2309      	movs	r3, #9
 8008f3e:	6003      	str	r3, [r0, #0]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	3d01      	subs	r5, #1
 8008f48:	2d01      	cmp	r5, #1
 8008f4a:	d809      	bhi.n	8008f60 <_close+0x34>
 8008f4c:	4b09      	ldr	r3, [pc, #36]	; (8008f74 <_close+0x48>)
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d104      	bne.n	8008f60 <_close+0x34>
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5a:	6003      	str	r3, [r0, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e7f1      	b.n	8008f44 <_close+0x18>
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	f7ff ffd6 	bl	8008f12 <_swiclose>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d1ec      	bne.n	8008f44 <_close+0x18>
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	e7e8      	b.n	8008f44 <_close+0x18>
 8008f72:	bf00      	nop
 8008f74:	20004ba8 	.word	0x20004ba8

08008f78 <_swistat>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	f7ff fefe 	bl	8008d7c <findslot>
 8008f80:	4605      	mov	r5, r0
 8008f82:	b930      	cbnz	r0, 8008f92 <_swistat+0x1a>
 8008f84:	f000 fc2e 	bl	80097e4 <__errno>
 8008f88:	2309      	movs	r3, #9
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f9e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008fa0:	260c      	movs	r6, #12
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	beab      	bkpt	0x00ab
 8008fa8:	4605      	mov	r5, r0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f7ff ff0e 	bl	8008dcc <checkerror>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	bf1c      	itt	ne
 8008fb4:	6120      	strne	r0, [r4, #16]
 8008fb6:	2000      	movne	r0, #0
 8008fb8:	e7ea      	b.n	8008f90 <_swistat+0x18>

08008fba <_fstat>:
 8008fba:	460b      	mov	r3, r1
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2258      	movs	r2, #88	; 0x58
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fbbf 	bl	8009748 <memset>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd2:	f7ff bfd1 	b.w	8008f78 <_swistat>

08008fd6 <_stat>:
 8008fd6:	b538      	push	{r3, r4, r5, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	4604      	mov	r4, r0
 8008fdc:	2258      	movs	r2, #88	; 0x58
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 fbb1 	bl	8009748 <memset>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	2100      	movs	r1, #0
 8008fea:	f000 f811 	bl	8009010 <_swiopen>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	d00b      	beq.n	800900c <_stat+0x36>
 8008ff4:	686b      	ldr	r3, [r5, #4]
 8008ff6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ffa:	606b      	str	r3, [r5, #4]
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7ff ffbb 	bl	8008f78 <_swistat>
 8009002:	4605      	mov	r5, r0
 8009004:	4620      	mov	r0, r4
 8009006:	f7ff ff91 	bl	8008f2c <_close>
 800900a:	462c      	mov	r4, r5
 800900c:	4620      	mov	r0, r4
 800900e:	bd38      	pop	{r3, r4, r5, pc}

08009010 <_swiopen>:
 8009010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009014:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80090c0 <_swiopen+0xb0>
 8009018:	b097      	sub	sp, #92	; 0x5c
 800901a:	4607      	mov	r7, r0
 800901c:	460e      	mov	r6, r1
 800901e:	2500      	movs	r5, #0
 8009020:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8009024:	1c61      	adds	r1, r4, #1
 8009026:	d037      	beq.n	8009098 <_swiopen+0x88>
 8009028:	3501      	adds	r5, #1
 800902a:	2d14      	cmp	r5, #20
 800902c:	d1f8      	bne.n	8009020 <_swiopen+0x10>
 800902e:	f000 fbd9 	bl	80097e4 <__errno>
 8009032:	2318      	movs	r3, #24
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 34ff 	mov.w	r4, #4294967295
 800903a:	e03d      	b.n	80090b8 <_swiopen+0xa8>
 800903c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8009040:	f240 6301 	movw	r3, #1537	; 0x601
 8009044:	07b2      	lsls	r2, r6, #30
 8009046:	bf48      	it	mi
 8009048:	f044 0402 	orrmi.w	r4, r4, #2
 800904c:	421e      	tst	r6, r3
 800904e:	bf18      	it	ne
 8009050:	f044 0404 	orrne.w	r4, r4, #4
 8009054:	0733      	lsls	r3, r6, #28
 8009056:	bf48      	it	mi
 8009058:	f024 0404 	bicmi.w	r4, r4, #4
 800905c:	4638      	mov	r0, r7
 800905e:	bf48      	it	mi
 8009060:	f044 0408 	orrmi.w	r4, r4, #8
 8009064:	9700      	str	r7, [sp, #0]
 8009066:	f7f7 f8bb 	bl	80001e0 <strlen>
 800906a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800906e:	2401      	movs	r4, #1
 8009070:	4620      	mov	r0, r4
 8009072:	4649      	mov	r1, r9
 8009074:	beab      	bkpt	0x00ab
 8009076:	4604      	mov	r4, r0
 8009078:	2c00      	cmp	r4, #0
 800907a:	db08      	blt.n	800908e <_swiopen+0x7e>
 800907c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8009080:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8009084:	2300      	movs	r3, #0
 8009086:	f8c8 3004 	str.w	r3, [r8, #4]
 800908a:	462c      	mov	r4, r5
 800908c:	e014      	b.n	80090b8 <_swiopen+0xa8>
 800908e:	4620      	mov	r0, r4
 8009090:	f7ff fe8e 	bl	8008db0 <error>
 8009094:	4604      	mov	r4, r0
 8009096:	e00f      	b.n	80090b8 <_swiopen+0xa8>
 8009098:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800909c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80090a0:	46e9      	mov	r9, sp
 80090a2:	d1cb      	bne.n	800903c <_swiopen+0x2c>
 80090a4:	4649      	mov	r1, r9
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff ff95 	bl	8008fd6 <_stat>
 80090ac:	3001      	adds	r0, #1
 80090ae:	d0c5      	beq.n	800903c <_swiopen+0x2c>
 80090b0:	f000 fb98 	bl	80097e4 <__errno>
 80090b4:	2311      	movs	r3, #17
 80090b6:	6003      	str	r3, [r0, #0]
 80090b8:	4620      	mov	r0, r4
 80090ba:	b017      	add	sp, #92	; 0x5c
 80090bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090c0:	20004ba8 	.word	0x20004ba8

080090c4 <_get_semihosting_exts>:
 80090c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	4606      	mov	r6, r0
 80090ca:	460f      	mov	r7, r1
 80090cc:	482a      	ldr	r0, [pc, #168]	; (8009178 <_get_semihosting_exts+0xb4>)
 80090ce:	2100      	movs	r1, #0
 80090d0:	4615      	mov	r5, r2
 80090d2:	f7ff ff9d 	bl	8009010 <_swiopen>
 80090d6:	462a      	mov	r2, r5
 80090d8:	4604      	mov	r4, r0
 80090da:	2100      	movs	r1, #0
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 fb33 	bl	8009748 <memset>
 80090e2:	1c63      	adds	r3, r4, #1
 80090e4:	d016      	beq.n	8009114 <_get_semihosting_exts+0x50>
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7ff fe48 	bl	8008d7c <findslot>
 80090ec:	f04f 080c 	mov.w	r8, #12
 80090f0:	4681      	mov	r9, r0
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	beab      	bkpt	0x00ab
 80090f8:	4680      	mov	r8, r0
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff fe66 	bl	8008dcc <checkerror>
 8009100:	2803      	cmp	r0, #3
 8009102:	dd02      	ble.n	800910a <_get_semihosting_exts+0x46>
 8009104:	1ec3      	subs	r3, r0, #3
 8009106:	42ab      	cmp	r3, r5
 8009108:	dc08      	bgt.n	800911c <_get_semihosting_exts+0x58>
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff ff0e 	bl	8008f2c <_close>
 8009110:	f04f 34ff 	mov.w	r4, #4294967295
 8009114:	4620      	mov	r0, r4
 8009116:	b003      	add	sp, #12
 8009118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800911c:	2204      	movs	r2, #4
 800911e:	eb0d 0102 	add.w	r1, sp, r2
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff fe67 	bl	8008df6 <_read>
 8009128:	2803      	cmp	r0, #3
 800912a:	ddee      	ble.n	800910a <_get_semihosting_exts+0x46>
 800912c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009130:	2b53      	cmp	r3, #83	; 0x53
 8009132:	d1ea      	bne.n	800910a <_get_semihosting_exts+0x46>
 8009134:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009138:	2b48      	cmp	r3, #72	; 0x48
 800913a:	d1e6      	bne.n	800910a <_get_semihosting_exts+0x46>
 800913c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009140:	2b46      	cmp	r3, #70	; 0x46
 8009142:	d1e2      	bne.n	800910a <_get_semihosting_exts+0x46>
 8009144:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009148:	2b42      	cmp	r3, #66	; 0x42
 800914a:	d1de      	bne.n	800910a <_get_semihosting_exts+0x46>
 800914c:	2201      	movs	r2, #1
 800914e:	4639      	mov	r1, r7
 8009150:	4620      	mov	r0, r4
 8009152:	f7ff fe6c 	bl	8008e2e <_swilseek>
 8009156:	2800      	cmp	r0, #0
 8009158:	dbd7      	blt.n	800910a <_get_semihosting_exts+0x46>
 800915a:	462a      	mov	r2, r5
 800915c:	4631      	mov	r1, r6
 800915e:	4620      	mov	r0, r4
 8009160:	f7ff fe49 	bl	8008df6 <_read>
 8009164:	4605      	mov	r5, r0
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff fee0 	bl	8008f2c <_close>
 800916c:	4628      	mov	r0, r5
 800916e:	f7ff fe2d 	bl	8008dcc <checkerror>
 8009172:	4604      	mov	r4, r0
 8009174:	e7ce      	b.n	8009114 <_get_semihosting_exts+0x50>
 8009176:	bf00      	nop
 8009178:	0800a98c 	.word	0x0800a98c

0800917c <initialise_semihosting_exts>:
 800917c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800917e:	4d0a      	ldr	r5, [pc, #40]	; (80091a8 <initialise_semihosting_exts+0x2c>)
 8009180:	4c0a      	ldr	r4, [pc, #40]	; (80091ac <initialise_semihosting_exts+0x30>)
 8009182:	2100      	movs	r1, #0
 8009184:	2201      	movs	r2, #1
 8009186:	a801      	add	r0, sp, #4
 8009188:	6029      	str	r1, [r5, #0]
 800918a:	6022      	str	r2, [r4, #0]
 800918c:	f7ff ff9a 	bl	80090c4 <_get_semihosting_exts>
 8009190:	2800      	cmp	r0, #0
 8009192:	dd07      	ble.n	80091a4 <initialise_semihosting_exts+0x28>
 8009194:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009198:	f003 0201 	and.w	r2, r3, #1
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	b003      	add	sp, #12
 80091a6:	bd30      	pop	{r4, r5, pc}
 80091a8:	20000014 	.word	0x20000014
 80091ac:	20000018 	.word	0x20000018

080091b0 <_has_ext_stdout_stderr>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4c04      	ldr	r4, [pc, #16]	; (80091c4 <_has_ext_stdout_stderr+0x14>)
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da01      	bge.n	80091be <_has_ext_stdout_stderr+0xe>
 80091ba:	f7ff ffdf 	bl	800917c <initialise_semihosting_exts>
 80091be:	6820      	ldr	r0, [r4, #0]
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	20000018 	.word	0x20000018

080091c8 <initialise_monitor_handles>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	b085      	sub	sp, #20
 80091ce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8009280 <initialise_monitor_handles+0xb8>
 80091d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80091d6:	2303      	movs	r3, #3
 80091d8:	2400      	movs	r4, #0
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	af01      	add	r7, sp, #4
 80091de:	9402      	str	r4, [sp, #8]
 80091e0:	2501      	movs	r5, #1
 80091e2:	4628      	mov	r0, r5
 80091e4:	4639      	mov	r1, r7
 80091e6:	beab      	bkpt	0x00ab
 80091e8:	4605      	mov	r5, r0
 80091ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009284 <initialise_monitor_handles+0xbc>
 80091ee:	4623      	mov	r3, r4
 80091f0:	4c20      	ldr	r4, [pc, #128]	; (8009274 <initialise_monitor_handles+0xac>)
 80091f2:	f8c8 5000 	str.w	r5, [r8]
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295
 80091fa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80091fe:	3301      	adds	r3, #1
 8009200:	2b14      	cmp	r3, #20
 8009202:	d1fa      	bne.n	80091fa <initialise_monitor_handles+0x32>
 8009204:	f7ff ffd4 	bl	80091b0 <_has_ext_stdout_stderr>
 8009208:	4d1b      	ldr	r5, [pc, #108]	; (8009278 <initialise_monitor_handles+0xb0>)
 800920a:	b1d0      	cbz	r0, 8009242 <initialise_monitor_handles+0x7a>
 800920c:	f04f 0a03 	mov.w	sl, #3
 8009210:	2304      	movs	r3, #4
 8009212:	f8cd 9004 	str.w	r9, [sp, #4]
 8009216:	2601      	movs	r6, #1
 8009218:	f8cd a00c 	str.w	sl, [sp, #12]
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	beab      	bkpt	0x00ab
 8009224:	4683      	mov	fp, r0
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <initialise_monitor_handles+0xb4>)
 8009228:	f8cd 9004 	str.w	r9, [sp, #4]
 800922c:	f8c3 b000 	str.w	fp, [r3]
 8009230:	2308      	movs	r3, #8
 8009232:	f8cd a00c 	str.w	sl, [sp, #12]
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	beab      	bkpt	0x00ab
 800923e:	4606      	mov	r6, r0
 8009240:	602e      	str	r6, [r5, #0]
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	bf02      	ittt	eq
 8009248:	4b0c      	ldreq	r3, [pc, #48]	; (800927c <initialise_monitor_handles+0xb4>)
 800924a:	681b      	ldreq	r3, [r3, #0]
 800924c:	602b      	streq	r3, [r5, #0]
 800924e:	2600      	movs	r6, #0
 8009250:	f8d8 3000 	ldr.w	r3, [r8]
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	6066      	str	r6, [r4, #4]
 8009258:	f7ff ffaa 	bl	80091b0 <_has_ext_stdout_stderr>
 800925c:	b130      	cbz	r0, 800926c <initialise_monitor_handles+0xa4>
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <initialise_monitor_handles+0xb4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8009266:	682b      	ldr	r3, [r5, #0]
 8009268:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800926c:	b005      	add	sp, #20
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009272:	bf00      	nop
 8009274:	20004ba8 	.word	0x20004ba8
 8009278:	20004b9c 	.word	0x20004b9c
 800927c:	20004ba4 	.word	0x20004ba4
 8009280:	0800a9a2 	.word	0x0800a9a2
 8009284:	20004ba0 	.word	0x20004ba0

08009288 <_isatty>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	f7ff fd77 	bl	8008d7c <findslot>
 800928e:	2509      	movs	r5, #9
 8009290:	4604      	mov	r4, r0
 8009292:	b920      	cbnz	r0, 800929e <_isatty+0x16>
 8009294:	f000 faa6 	bl	80097e4 <__errno>
 8009298:	6005      	str	r5, [r0, #0]
 800929a:	4620      	mov	r0, r4
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	4628      	mov	r0, r5
 80092a0:	4621      	mov	r1, r4
 80092a2:	beab      	bkpt	0x00ab
 80092a4:	4604      	mov	r4, r0
 80092a6:	2c01      	cmp	r4, #1
 80092a8:	d0f7      	beq.n	800929a <_isatty+0x12>
 80092aa:	f000 fa9b 	bl	80097e4 <__errno>
 80092ae:	2400      	movs	r4, #0
 80092b0:	4605      	mov	r5, r0
 80092b2:	2613      	movs	r6, #19
 80092b4:	4630      	mov	r0, r6
 80092b6:	4621      	mov	r1, r4
 80092b8:	beab      	bkpt	0x00ab
 80092ba:	4606      	mov	r6, r0
 80092bc:	602e      	str	r6, [r5, #0]
 80092be:	e7ec      	b.n	800929a <_isatty+0x12>

080092c0 <std>:
 80092c0:	2300      	movs	r3, #0
 80092c2:	b510      	push	{r4, lr}
 80092c4:	4604      	mov	r4, r0
 80092c6:	e9c0 3300 	strd	r3, r3, [r0]
 80092ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092ce:	6083      	str	r3, [r0, #8]
 80092d0:	8181      	strh	r1, [r0, #12]
 80092d2:	6643      	str	r3, [r0, #100]	; 0x64
 80092d4:	81c2      	strh	r2, [r0, #14]
 80092d6:	6183      	str	r3, [r0, #24]
 80092d8:	4619      	mov	r1, r3
 80092da:	2208      	movs	r2, #8
 80092dc:	305c      	adds	r0, #92	; 0x5c
 80092de:	f000 fa33 	bl	8009748 <memset>
 80092e2:	4b0d      	ldr	r3, [pc, #52]	; (8009318 <std+0x58>)
 80092e4:	6263      	str	r3, [r4, #36]	; 0x24
 80092e6:	4b0d      	ldr	r3, [pc, #52]	; (800931c <std+0x5c>)
 80092e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ea:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <std+0x60>)
 80092ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <std+0x64>)
 80092f0:	6323      	str	r3, [r4, #48]	; 0x30
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <std+0x68>)
 80092f4:	6224      	str	r4, [r4, #32]
 80092f6:	429c      	cmp	r4, r3
 80092f8:	d006      	beq.n	8009308 <std+0x48>
 80092fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092fe:	4294      	cmp	r4, r2
 8009300:	d002      	beq.n	8009308 <std+0x48>
 8009302:	33d0      	adds	r3, #208	; 0xd0
 8009304:	429c      	cmp	r4, r3
 8009306:	d105      	bne.n	8009314 <std+0x54>
 8009308:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009310:	f000 ba92 	b.w	8009838 <__retarget_lock_init_recursive>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	bf00      	nop
 8009318:	08009599 	.word	0x08009599
 800931c:	080095bb 	.word	0x080095bb
 8009320:	080095f3 	.word	0x080095f3
 8009324:	08009617 	.word	0x08009617
 8009328:	20004c48 	.word	0x20004c48

0800932c <stdio_exit_handler>:
 800932c:	4a02      	ldr	r2, [pc, #8]	; (8009338 <stdio_exit_handler+0xc>)
 800932e:	4903      	ldr	r1, [pc, #12]	; (800933c <stdio_exit_handler+0x10>)
 8009330:	4803      	ldr	r0, [pc, #12]	; (8009340 <stdio_exit_handler+0x14>)
 8009332:	f000 b869 	b.w	8009408 <_fwalk_sglue>
 8009336:	bf00      	nop
 8009338:	2000001c 	.word	0x2000001c
 800933c:	0800a3b1 	.word	0x0800a3b1
 8009340:	20000028 	.word	0x20000028

08009344 <cleanup_stdio>:
 8009344:	6841      	ldr	r1, [r0, #4]
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <cleanup_stdio+0x34>)
 8009348:	4299      	cmp	r1, r3
 800934a:	b510      	push	{r4, lr}
 800934c:	4604      	mov	r4, r0
 800934e:	d001      	beq.n	8009354 <cleanup_stdio+0x10>
 8009350:	f001 f82e 	bl	800a3b0 <_fflush_r>
 8009354:	68a1      	ldr	r1, [r4, #8]
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <cleanup_stdio+0x38>)
 8009358:	4299      	cmp	r1, r3
 800935a:	d002      	beq.n	8009362 <cleanup_stdio+0x1e>
 800935c:	4620      	mov	r0, r4
 800935e:	f001 f827 	bl	800a3b0 <_fflush_r>
 8009362:	68e1      	ldr	r1, [r4, #12]
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <cleanup_stdio+0x3c>)
 8009366:	4299      	cmp	r1, r3
 8009368:	d004      	beq.n	8009374 <cleanup_stdio+0x30>
 800936a:	4620      	mov	r0, r4
 800936c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009370:	f001 b81e 	b.w	800a3b0 <_fflush_r>
 8009374:	bd10      	pop	{r4, pc}
 8009376:	bf00      	nop
 8009378:	20004c48 	.word	0x20004c48
 800937c:	20004cb0 	.word	0x20004cb0
 8009380:	20004d18 	.word	0x20004d18

08009384 <global_stdio_init.part.0>:
 8009384:	b510      	push	{r4, lr}
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <global_stdio_init.part.0+0x30>)
 8009388:	4c0b      	ldr	r4, [pc, #44]	; (80093b8 <global_stdio_init.part.0+0x34>)
 800938a:	4a0c      	ldr	r2, [pc, #48]	; (80093bc <global_stdio_init.part.0+0x38>)
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	4620      	mov	r0, r4
 8009390:	2200      	movs	r2, #0
 8009392:	2104      	movs	r1, #4
 8009394:	f7ff ff94 	bl	80092c0 <std>
 8009398:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800939c:	2201      	movs	r2, #1
 800939e:	2109      	movs	r1, #9
 80093a0:	f7ff ff8e 	bl	80092c0 <std>
 80093a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093a8:	2202      	movs	r2, #2
 80093aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ae:	2112      	movs	r1, #18
 80093b0:	f7ff bf86 	b.w	80092c0 <std>
 80093b4:	20004d80 	.word	0x20004d80
 80093b8:	20004c48 	.word	0x20004c48
 80093bc:	0800932d 	.word	0x0800932d

080093c0 <__sfp_lock_acquire>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sfp_lock_acquire+0x8>)
 80093c2:	f000 ba3a 	b.w	800983a <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	20004d89 	.word	0x20004d89

080093cc <__sfp_lock_release>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__sfp_lock_release+0x8>)
 80093ce:	f000 ba35 	b.w	800983c <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	20004d89 	.word	0x20004d89

080093d8 <__sinit>:
 80093d8:	b510      	push	{r4, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	f7ff fff0 	bl	80093c0 <__sfp_lock_acquire>
 80093e0:	6a23      	ldr	r3, [r4, #32]
 80093e2:	b11b      	cbz	r3, 80093ec <__sinit+0x14>
 80093e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e8:	f7ff bff0 	b.w	80093cc <__sfp_lock_release>
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <__sinit+0x28>)
 80093ee:	6223      	str	r3, [r4, #32]
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <__sinit+0x2c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f5      	bne.n	80093e4 <__sinit+0xc>
 80093f8:	f7ff ffc4 	bl	8009384 <global_stdio_init.part.0>
 80093fc:	e7f2      	b.n	80093e4 <__sinit+0xc>
 80093fe:	bf00      	nop
 8009400:	08009345 	.word	0x08009345
 8009404:	20004d80 	.word	0x20004d80

08009408 <_fwalk_sglue>:
 8009408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800940c:	4607      	mov	r7, r0
 800940e:	4688      	mov	r8, r1
 8009410:	4614      	mov	r4, r2
 8009412:	2600      	movs	r6, #0
 8009414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009418:	f1b9 0901 	subs.w	r9, r9, #1
 800941c:	d505      	bpl.n	800942a <_fwalk_sglue+0x22>
 800941e:	6824      	ldr	r4, [r4, #0]
 8009420:	2c00      	cmp	r4, #0
 8009422:	d1f7      	bne.n	8009414 <_fwalk_sglue+0xc>
 8009424:	4630      	mov	r0, r6
 8009426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d907      	bls.n	8009440 <_fwalk_sglue+0x38>
 8009430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009434:	3301      	adds	r3, #1
 8009436:	d003      	beq.n	8009440 <_fwalk_sglue+0x38>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	47c0      	blx	r8
 800943e:	4306      	orrs	r6, r0
 8009440:	3568      	adds	r5, #104	; 0x68
 8009442:	e7e9      	b.n	8009418 <_fwalk_sglue+0x10>

08009444 <iprintf>:
 8009444:	b40f      	push	{r0, r1, r2, r3}
 8009446:	b507      	push	{r0, r1, r2, lr}
 8009448:	4906      	ldr	r1, [pc, #24]	; (8009464 <iprintf+0x20>)
 800944a:	ab04      	add	r3, sp, #16
 800944c:	6808      	ldr	r0, [r1, #0]
 800944e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009452:	6881      	ldr	r1, [r0, #8]
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	f000 fc7b 	bl	8009d50 <_vfiprintf_r>
 800945a:	b003      	add	sp, #12
 800945c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009460:	b004      	add	sp, #16
 8009462:	4770      	bx	lr
 8009464:	20000074 	.word	0x20000074

08009468 <putchar>:
 8009468:	4b02      	ldr	r3, [pc, #8]	; (8009474 <putchar+0xc>)
 800946a:	4601      	mov	r1, r0
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	6882      	ldr	r2, [r0, #8]
 8009470:	f001 b828 	b.w	800a4c4 <_putc_r>
 8009474:	20000074 	.word	0x20000074

08009478 <_puts_r>:
 8009478:	6a03      	ldr	r3, [r0, #32]
 800947a:	b570      	push	{r4, r5, r6, lr}
 800947c:	6884      	ldr	r4, [r0, #8]
 800947e:	4605      	mov	r5, r0
 8009480:	460e      	mov	r6, r1
 8009482:	b90b      	cbnz	r3, 8009488 <_puts_r+0x10>
 8009484:	f7ff ffa8 	bl	80093d8 <__sinit>
 8009488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800948a:	07db      	lsls	r3, r3, #31
 800948c:	d405      	bmi.n	800949a <_puts_r+0x22>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	0598      	lsls	r0, r3, #22
 8009492:	d402      	bmi.n	800949a <_puts_r+0x22>
 8009494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009496:	f000 f9d0 	bl	800983a <__retarget_lock_acquire_recursive>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	0719      	lsls	r1, r3, #28
 800949e:	d513      	bpl.n	80094c8 <_puts_r+0x50>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b18b      	cbz	r3, 80094c8 <_puts_r+0x50>
 80094a4:	3e01      	subs	r6, #1
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094ac:	3b01      	subs	r3, #1
 80094ae:	60a3      	str	r3, [r4, #8]
 80094b0:	b9e9      	cbnz	r1, 80094ee <_puts_r+0x76>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da2e      	bge.n	8009514 <_puts_r+0x9c>
 80094b6:	4622      	mov	r2, r4
 80094b8:	210a      	movs	r1, #10
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f8af 	bl	800961e <__swbuf_r>
 80094c0:	3001      	adds	r0, #1
 80094c2:	d007      	beq.n	80094d4 <_puts_r+0x5c>
 80094c4:	250a      	movs	r5, #10
 80094c6:	e007      	b.n	80094d8 <_puts_r+0x60>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f8e4 	bl	8009698 <__swsetup_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0e7      	beq.n	80094a4 <_puts_r+0x2c>
 80094d4:	f04f 35ff 	mov.w	r5, #4294967295
 80094d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094da:	07da      	lsls	r2, r3, #31
 80094dc:	d405      	bmi.n	80094ea <_puts_r+0x72>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	059b      	lsls	r3, r3, #22
 80094e2:	d402      	bmi.n	80094ea <_puts_r+0x72>
 80094e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094e6:	f000 f9a9 	bl	800983c <__retarget_lock_release_recursive>
 80094ea:	4628      	mov	r0, r5
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da04      	bge.n	80094fc <_puts_r+0x84>
 80094f2:	69a2      	ldr	r2, [r4, #24]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	dc06      	bgt.n	8009506 <_puts_r+0x8e>
 80094f8:	290a      	cmp	r1, #10
 80094fa:	d004      	beq.n	8009506 <_puts_r+0x8e>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	7019      	strb	r1, [r3, #0]
 8009504:	e7cf      	b.n	80094a6 <_puts_r+0x2e>
 8009506:	4622      	mov	r2, r4
 8009508:	4628      	mov	r0, r5
 800950a:	f000 f888 	bl	800961e <__swbuf_r>
 800950e:	3001      	adds	r0, #1
 8009510:	d1c9      	bne.n	80094a6 <_puts_r+0x2e>
 8009512:	e7df      	b.n	80094d4 <_puts_r+0x5c>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	250a      	movs	r5, #10
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	6022      	str	r2, [r4, #0]
 800951c:	701d      	strb	r5, [r3, #0]
 800951e:	e7db      	b.n	80094d8 <_puts_r+0x60>

08009520 <puts>:
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <puts+0xc>)
 8009522:	4601      	mov	r1, r0
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	f7ff bfa7 	b.w	8009478 <_puts_r>
 800952a:	bf00      	nop
 800952c:	20000074 	.word	0x20000074

08009530 <sniprintf>:
 8009530:	b40c      	push	{r2, r3}
 8009532:	b530      	push	{r4, r5, lr}
 8009534:	4b17      	ldr	r3, [pc, #92]	; (8009594 <sniprintf+0x64>)
 8009536:	1e0c      	subs	r4, r1, #0
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	b09d      	sub	sp, #116	; 0x74
 800953c:	da08      	bge.n	8009550 <sniprintf+0x20>
 800953e:	238b      	movs	r3, #139	; 0x8b
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	f04f 30ff 	mov.w	r0, #4294967295
 8009546:	b01d      	add	sp, #116	; 0x74
 8009548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800954c:	b002      	add	sp, #8
 800954e:	4770      	bx	lr
 8009550:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009558:	bf14      	ite	ne
 800955a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800955e:	4623      	moveq	r3, r4
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	9307      	str	r3, [sp, #28]
 8009564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009568:	9002      	str	r0, [sp, #8]
 800956a:	9006      	str	r0, [sp, #24]
 800956c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009570:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009572:	ab21      	add	r3, sp, #132	; 0x84
 8009574:	a902      	add	r1, sp, #8
 8009576:	4628      	mov	r0, r5
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	f000 fac1 	bl	8009b00 <_svfiprintf_r>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	bfbc      	itt	lt
 8009582:	238b      	movlt	r3, #139	; 0x8b
 8009584:	602b      	strlt	r3, [r5, #0]
 8009586:	2c00      	cmp	r4, #0
 8009588:	d0dd      	beq.n	8009546 <sniprintf+0x16>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	e7d9      	b.n	8009546 <sniprintf+0x16>
 8009592:	bf00      	nop
 8009594:	20000074 	.word	0x20000074

08009598 <__sread>:
 8009598:	b510      	push	{r4, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a0:	f000 f8fc 	bl	800979c <_read_r>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	bfab      	itete	ge
 80095a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095aa:	89a3      	ldrhlt	r3, [r4, #12]
 80095ac:	181b      	addge	r3, r3, r0
 80095ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095b2:	bfac      	ite	ge
 80095b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80095b6:	81a3      	strhlt	r3, [r4, #12]
 80095b8:	bd10      	pop	{r4, pc}

080095ba <__swrite>:
 80095ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095be:	461f      	mov	r7, r3
 80095c0:	898b      	ldrh	r3, [r1, #12]
 80095c2:	05db      	lsls	r3, r3, #23
 80095c4:	4605      	mov	r5, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	4616      	mov	r6, r2
 80095ca:	d505      	bpl.n	80095d8 <__swrite+0x1e>
 80095cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d0:	2302      	movs	r3, #2
 80095d2:	2200      	movs	r2, #0
 80095d4:	f000 f8d0 	bl	8009778 <_lseek_r>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	4632      	mov	r2, r6
 80095e6:	463b      	mov	r3, r7
 80095e8:	4628      	mov	r0, r5
 80095ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ee:	f000 b8e7 	b.w	80097c0 <_write_r>

080095f2 <__sseek>:
 80095f2:	b510      	push	{r4, lr}
 80095f4:	460c      	mov	r4, r1
 80095f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fa:	f000 f8bd 	bl	8009778 <_lseek_r>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	bf15      	itete	ne
 8009604:	6560      	strne	r0, [r4, #84]	; 0x54
 8009606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800960a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800960e:	81a3      	strheq	r3, [r4, #12]
 8009610:	bf18      	it	ne
 8009612:	81a3      	strhne	r3, [r4, #12]
 8009614:	bd10      	pop	{r4, pc}

08009616 <__sclose>:
 8009616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961a:	f000 b89d 	b.w	8009758 <_close_r>

0800961e <__swbuf_r>:
 800961e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009620:	460e      	mov	r6, r1
 8009622:	4614      	mov	r4, r2
 8009624:	4605      	mov	r5, r0
 8009626:	b118      	cbz	r0, 8009630 <__swbuf_r+0x12>
 8009628:	6a03      	ldr	r3, [r0, #32]
 800962a:	b90b      	cbnz	r3, 8009630 <__swbuf_r+0x12>
 800962c:	f7ff fed4 	bl	80093d8 <__sinit>
 8009630:	69a3      	ldr	r3, [r4, #24]
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	071a      	lsls	r2, r3, #28
 8009638:	d525      	bpl.n	8009686 <__swbuf_r+0x68>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	b31b      	cbz	r3, 8009686 <__swbuf_r+0x68>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	1a98      	subs	r0, r3, r2
 8009644:	6963      	ldr	r3, [r4, #20]
 8009646:	b2f6      	uxtb	r6, r6
 8009648:	4283      	cmp	r3, r0
 800964a:	4637      	mov	r7, r6
 800964c:	dc04      	bgt.n	8009658 <__swbuf_r+0x3a>
 800964e:	4621      	mov	r1, r4
 8009650:	4628      	mov	r0, r5
 8009652:	f000 fead 	bl	800a3b0 <_fflush_r>
 8009656:	b9e0      	cbnz	r0, 8009692 <__swbuf_r+0x74>
 8009658:	68a3      	ldr	r3, [r4, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	6022      	str	r2, [r4, #0]
 8009664:	701e      	strb	r6, [r3, #0]
 8009666:	6962      	ldr	r2, [r4, #20]
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	429a      	cmp	r2, r3
 800966c:	d004      	beq.n	8009678 <__swbuf_r+0x5a>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	07db      	lsls	r3, r3, #31
 8009672:	d506      	bpl.n	8009682 <__swbuf_r+0x64>
 8009674:	2e0a      	cmp	r6, #10
 8009676:	d104      	bne.n	8009682 <__swbuf_r+0x64>
 8009678:	4621      	mov	r1, r4
 800967a:	4628      	mov	r0, r5
 800967c:	f000 fe98 	bl	800a3b0 <_fflush_r>
 8009680:	b938      	cbnz	r0, 8009692 <__swbuf_r+0x74>
 8009682:	4638      	mov	r0, r7
 8009684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009686:	4621      	mov	r1, r4
 8009688:	4628      	mov	r0, r5
 800968a:	f000 f805 	bl	8009698 <__swsetup_r>
 800968e:	2800      	cmp	r0, #0
 8009690:	d0d5      	beq.n	800963e <__swbuf_r+0x20>
 8009692:	f04f 37ff 	mov.w	r7, #4294967295
 8009696:	e7f4      	b.n	8009682 <__swbuf_r+0x64>

08009698 <__swsetup_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4b2a      	ldr	r3, [pc, #168]	; (8009744 <__swsetup_r+0xac>)
 800969c:	4605      	mov	r5, r0
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	460c      	mov	r4, r1
 80096a2:	b118      	cbz	r0, 80096ac <__swsetup_r+0x14>
 80096a4:	6a03      	ldr	r3, [r0, #32]
 80096a6:	b90b      	cbnz	r3, 80096ac <__swsetup_r+0x14>
 80096a8:	f7ff fe96 	bl	80093d8 <__sinit>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096b2:	0718      	lsls	r0, r3, #28
 80096b4:	d422      	bmi.n	80096fc <__swsetup_r+0x64>
 80096b6:	06d9      	lsls	r1, r3, #27
 80096b8:	d407      	bmi.n	80096ca <__swsetup_r+0x32>
 80096ba:	2309      	movs	r3, #9
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	e034      	b.n	8009734 <__swsetup_r+0x9c>
 80096ca:	0758      	lsls	r0, r3, #29
 80096cc:	d512      	bpl.n	80096f4 <__swsetup_r+0x5c>
 80096ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096d0:	b141      	cbz	r1, 80096e4 <__swsetup_r+0x4c>
 80096d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d002      	beq.n	80096e0 <__swsetup_r+0x48>
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f8be 	bl	800985c <_free_r>
 80096e0:	2300      	movs	r3, #0
 80096e2:	6363      	str	r3, [r4, #52]	; 0x34
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	2300      	movs	r3, #0
 80096ee:	6063      	str	r3, [r4, #4]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f043 0308 	orr.w	r3, r3, #8
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	b94b      	cbnz	r3, 8009714 <__swsetup_r+0x7c>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800970a:	d003      	beq.n	8009714 <__swsetup_r+0x7c>
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 fe9c 	bl	800a44c <__smakebuf_r>
 8009714:	89a0      	ldrh	r0, [r4, #12]
 8009716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800971a:	f010 0301 	ands.w	r3, r0, #1
 800971e:	d00a      	beq.n	8009736 <__swsetup_r+0x9e>
 8009720:	2300      	movs	r3, #0
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	6963      	ldr	r3, [r4, #20]
 8009726:	425b      	negs	r3, r3
 8009728:	61a3      	str	r3, [r4, #24]
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	b943      	cbnz	r3, 8009740 <__swsetup_r+0xa8>
 800972e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009732:	d1c4      	bne.n	80096be <__swsetup_r+0x26>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	0781      	lsls	r1, r0, #30
 8009738:	bf58      	it	pl
 800973a:	6963      	ldrpl	r3, [r4, #20]
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	e7f4      	b.n	800972a <__swsetup_r+0x92>
 8009740:	2000      	movs	r0, #0
 8009742:	e7f7      	b.n	8009734 <__swsetup_r+0x9c>
 8009744:	20000074 	.word	0x20000074

08009748 <memset>:
 8009748:	4402      	add	r2, r0
 800974a:	4603      	mov	r3, r0
 800974c:	4293      	cmp	r3, r2
 800974e:	d100      	bne.n	8009752 <memset+0xa>
 8009750:	4770      	bx	lr
 8009752:	f803 1b01 	strb.w	r1, [r3], #1
 8009756:	e7f9      	b.n	800974c <memset+0x4>

08009758 <_close_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_close_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7ff fbe2 	bl	8008f2c <_close>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_close_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_close_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20004d84 	.word	0x20004d84

08009778 <_lseek_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d07      	ldr	r5, [pc, #28]	; (8009798 <_lseek_r+0x20>)
 800977c:	4604      	mov	r4, r0
 800977e:	4608      	mov	r0, r1
 8009780:	4611      	mov	r1, r2
 8009782:	2200      	movs	r2, #0
 8009784:	602a      	str	r2, [r5, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	f7ff fb8d 	bl	8008ea6 <_lseek>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_lseek_r+0x1e>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_lseek_r+0x1e>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20004d84 	.word	0x20004d84

0800979c <_read_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_read_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7ff fb23 	bl	8008df6 <_read>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_read_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_read_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20004d84 	.word	0x20004d84

080097c0 <_write_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	; (80097e0 <_write_r+0x20>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	602a      	str	r2, [r5, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7ff fb7b 	bl	8008eca <_write>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_write_r+0x1e>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_write_r+0x1e>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20004d84 	.word	0x20004d84

080097e4 <__errno>:
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <__errno+0x8>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000074 	.word	0x20000074

080097f0 <__libc_init_array>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4d0d      	ldr	r5, [pc, #52]	; (8009828 <__libc_init_array+0x38>)
 80097f4:	4c0d      	ldr	r4, [pc, #52]	; (800982c <__libc_init_array+0x3c>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	2600      	movs	r6, #0
 80097fc:	42a6      	cmp	r6, r4
 80097fe:	d109      	bne.n	8009814 <__libc_init_array+0x24>
 8009800:	4d0b      	ldr	r5, [pc, #44]	; (8009830 <__libc_init_array+0x40>)
 8009802:	4c0c      	ldr	r4, [pc, #48]	; (8009834 <__libc_init_array+0x44>)
 8009804:	f000 ff16 	bl	800a634 <_init>
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	2600      	movs	r6, #0
 800980e:	42a6      	cmp	r6, r4
 8009810:	d105      	bne.n	800981e <__libc_init_array+0x2e>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f855 3b04 	ldr.w	r3, [r5], #4
 8009818:	4798      	blx	r3
 800981a:	3601      	adds	r6, #1
 800981c:	e7ee      	b.n	80097fc <__libc_init_array+0xc>
 800981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009822:	4798      	blx	r3
 8009824:	3601      	adds	r6, #1
 8009826:	e7f2      	b.n	800980e <__libc_init_array+0x1e>
 8009828:	0800a9e4 	.word	0x0800a9e4
 800982c:	0800a9e4 	.word	0x0800a9e4
 8009830:	0800a9e4 	.word	0x0800a9e4
 8009834:	0800a9e8 	.word	0x0800a9e8

08009838 <__retarget_lock_init_recursive>:
 8009838:	4770      	bx	lr

0800983a <__retarget_lock_acquire_recursive>:
 800983a:	4770      	bx	lr

0800983c <__retarget_lock_release_recursive>:
 800983c:	4770      	bx	lr

0800983e <memcpy>:
 800983e:	440a      	add	r2, r1
 8009840:	4291      	cmp	r1, r2
 8009842:	f100 33ff 	add.w	r3, r0, #4294967295
 8009846:	d100      	bne.n	800984a <memcpy+0xc>
 8009848:	4770      	bx	lr
 800984a:	b510      	push	{r4, lr}
 800984c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009854:	4291      	cmp	r1, r2
 8009856:	d1f9      	bne.n	800984c <memcpy+0xe>
 8009858:	bd10      	pop	{r4, pc}
	...

0800985c <_free_r>:
 800985c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800985e:	2900      	cmp	r1, #0
 8009860:	d044      	beq.n	80098ec <_free_r+0x90>
 8009862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009866:	9001      	str	r0, [sp, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f1a1 0404 	sub.w	r4, r1, #4
 800986e:	bfb8      	it	lt
 8009870:	18e4      	addlt	r4, r4, r3
 8009872:	f000 f8df 	bl	8009a34 <__malloc_lock>
 8009876:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <_free_r+0x94>)
 8009878:	9801      	ldr	r0, [sp, #4]
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	b933      	cbnz	r3, 800988c <_free_r+0x30>
 800987e:	6063      	str	r3, [r4, #4]
 8009880:	6014      	str	r4, [r2, #0]
 8009882:	b003      	add	sp, #12
 8009884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009888:	f000 b8da 	b.w	8009a40 <__malloc_unlock>
 800988c:	42a3      	cmp	r3, r4
 800988e:	d908      	bls.n	80098a2 <_free_r+0x46>
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	1961      	adds	r1, r4, r5
 8009894:	428b      	cmp	r3, r1
 8009896:	bf01      	itttt	eq
 8009898:	6819      	ldreq	r1, [r3, #0]
 800989a:	685b      	ldreq	r3, [r3, #4]
 800989c:	1949      	addeq	r1, r1, r5
 800989e:	6021      	streq	r1, [r4, #0]
 80098a0:	e7ed      	b.n	800987e <_free_r+0x22>
 80098a2:	461a      	mov	r2, r3
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	b10b      	cbz	r3, 80098ac <_free_r+0x50>
 80098a8:	42a3      	cmp	r3, r4
 80098aa:	d9fa      	bls.n	80098a2 <_free_r+0x46>
 80098ac:	6811      	ldr	r1, [r2, #0]
 80098ae:	1855      	adds	r5, r2, r1
 80098b0:	42a5      	cmp	r5, r4
 80098b2:	d10b      	bne.n	80098cc <_free_r+0x70>
 80098b4:	6824      	ldr	r4, [r4, #0]
 80098b6:	4421      	add	r1, r4
 80098b8:	1854      	adds	r4, r2, r1
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	d1e0      	bne.n	8009882 <_free_r+0x26>
 80098c0:	681c      	ldr	r4, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	6053      	str	r3, [r2, #4]
 80098c6:	440c      	add	r4, r1
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	e7da      	b.n	8009882 <_free_r+0x26>
 80098cc:	d902      	bls.n	80098d4 <_free_r+0x78>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	e7d6      	b.n	8009882 <_free_r+0x26>
 80098d4:	6825      	ldr	r5, [r4, #0]
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	428b      	cmp	r3, r1
 80098da:	bf04      	itt	eq
 80098dc:	6819      	ldreq	r1, [r3, #0]
 80098de:	685b      	ldreq	r3, [r3, #4]
 80098e0:	6063      	str	r3, [r4, #4]
 80098e2:	bf04      	itt	eq
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	6054      	str	r4, [r2, #4]
 80098ea:	e7ca      	b.n	8009882 <_free_r+0x26>
 80098ec:	b003      	add	sp, #12
 80098ee:	bd30      	pop	{r4, r5, pc}
 80098f0:	20004d8c 	.word	0x20004d8c

080098f4 <sbrk_aligned>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	4e0e      	ldr	r6, [pc, #56]	; (8009930 <sbrk_aligned+0x3c>)
 80098f8:	460c      	mov	r4, r1
 80098fa:	6831      	ldr	r1, [r6, #0]
 80098fc:	4605      	mov	r5, r0
 80098fe:	b911      	cbnz	r1, 8009906 <sbrk_aligned+0x12>
 8009900:	f000 fe50 	bl	800a5a4 <_sbrk_r>
 8009904:	6030      	str	r0, [r6, #0]
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	f000 fe4b 	bl	800a5a4 <_sbrk_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d00a      	beq.n	8009928 <sbrk_aligned+0x34>
 8009912:	1cc4      	adds	r4, r0, #3
 8009914:	f024 0403 	bic.w	r4, r4, #3
 8009918:	42a0      	cmp	r0, r4
 800991a:	d007      	beq.n	800992c <sbrk_aligned+0x38>
 800991c:	1a21      	subs	r1, r4, r0
 800991e:	4628      	mov	r0, r5
 8009920:	f000 fe40 	bl	800a5a4 <_sbrk_r>
 8009924:	3001      	adds	r0, #1
 8009926:	d101      	bne.n	800992c <sbrk_aligned+0x38>
 8009928:	f04f 34ff 	mov.w	r4, #4294967295
 800992c:	4620      	mov	r0, r4
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	20004d90 	.word	0x20004d90

08009934 <_malloc_r>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	1ccd      	adds	r5, r1, #3
 800993a:	f025 0503 	bic.w	r5, r5, #3
 800993e:	3508      	adds	r5, #8
 8009940:	2d0c      	cmp	r5, #12
 8009942:	bf38      	it	cc
 8009944:	250c      	movcc	r5, #12
 8009946:	2d00      	cmp	r5, #0
 8009948:	4607      	mov	r7, r0
 800994a:	db01      	blt.n	8009950 <_malloc_r+0x1c>
 800994c:	42a9      	cmp	r1, r5
 800994e:	d905      	bls.n	800995c <_malloc_r+0x28>
 8009950:	230c      	movs	r3, #12
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	2600      	movs	r6, #0
 8009956:	4630      	mov	r0, r6
 8009958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a30 <_malloc_r+0xfc>
 8009960:	f000 f868 	bl	8009a34 <__malloc_lock>
 8009964:	f8d8 3000 	ldr.w	r3, [r8]
 8009968:	461c      	mov	r4, r3
 800996a:	bb5c      	cbnz	r4, 80099c4 <_malloc_r+0x90>
 800996c:	4629      	mov	r1, r5
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff ffc0 	bl	80098f4 <sbrk_aligned>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	4604      	mov	r4, r0
 8009978:	d155      	bne.n	8009a26 <_malloc_r+0xf2>
 800997a:	f8d8 4000 	ldr.w	r4, [r8]
 800997e:	4626      	mov	r6, r4
 8009980:	2e00      	cmp	r6, #0
 8009982:	d145      	bne.n	8009a10 <_malloc_r+0xdc>
 8009984:	2c00      	cmp	r4, #0
 8009986:	d048      	beq.n	8009a1a <_malloc_r+0xe6>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	4631      	mov	r1, r6
 800998c:	4638      	mov	r0, r7
 800998e:	eb04 0903 	add.w	r9, r4, r3
 8009992:	f000 fe07 	bl	800a5a4 <_sbrk_r>
 8009996:	4581      	cmp	r9, r0
 8009998:	d13f      	bne.n	8009a1a <_malloc_r+0xe6>
 800999a:	6821      	ldr	r1, [r4, #0]
 800999c:	1a6d      	subs	r5, r5, r1
 800999e:	4629      	mov	r1, r5
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff ffa7 	bl	80098f4 <sbrk_aligned>
 80099a6:	3001      	adds	r0, #1
 80099a8:	d037      	beq.n	8009a1a <_malloc_r+0xe6>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	442b      	add	r3, r5
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	f8d8 3000 	ldr.w	r3, [r8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d038      	beq.n	8009a2a <_malloc_r+0xf6>
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	42a2      	cmp	r2, r4
 80099bc:	d12b      	bne.n	8009a16 <_malloc_r+0xe2>
 80099be:	2200      	movs	r2, #0
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	e00f      	b.n	80099e4 <_malloc_r+0xb0>
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	1b52      	subs	r2, r2, r5
 80099c8:	d41f      	bmi.n	8009a0a <_malloc_r+0xd6>
 80099ca:	2a0b      	cmp	r2, #11
 80099cc:	d917      	bls.n	80099fe <_malloc_r+0xca>
 80099ce:	1961      	adds	r1, r4, r5
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	6025      	str	r5, [r4, #0]
 80099d4:	bf18      	it	ne
 80099d6:	6059      	strne	r1, [r3, #4]
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	bf08      	it	eq
 80099dc:	f8c8 1000 	streq.w	r1, [r8]
 80099e0:	5162      	str	r2, [r4, r5]
 80099e2:	604b      	str	r3, [r1, #4]
 80099e4:	4638      	mov	r0, r7
 80099e6:	f104 060b 	add.w	r6, r4, #11
 80099ea:	f000 f829 	bl	8009a40 <__malloc_unlock>
 80099ee:	f026 0607 	bic.w	r6, r6, #7
 80099f2:	1d23      	adds	r3, r4, #4
 80099f4:	1af2      	subs	r2, r6, r3
 80099f6:	d0ae      	beq.n	8009956 <_malloc_r+0x22>
 80099f8:	1b9b      	subs	r3, r3, r6
 80099fa:	50a3      	str	r3, [r4, r2]
 80099fc:	e7ab      	b.n	8009956 <_malloc_r+0x22>
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	6862      	ldr	r2, [r4, #4]
 8009a02:	d1dd      	bne.n	80099c0 <_malloc_r+0x8c>
 8009a04:	f8c8 2000 	str.w	r2, [r8]
 8009a08:	e7ec      	b.n	80099e4 <_malloc_r+0xb0>
 8009a0a:	4623      	mov	r3, r4
 8009a0c:	6864      	ldr	r4, [r4, #4]
 8009a0e:	e7ac      	b.n	800996a <_malloc_r+0x36>
 8009a10:	4634      	mov	r4, r6
 8009a12:	6876      	ldr	r6, [r6, #4]
 8009a14:	e7b4      	b.n	8009980 <_malloc_r+0x4c>
 8009a16:	4613      	mov	r3, r2
 8009a18:	e7cc      	b.n	80099b4 <_malloc_r+0x80>
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	603b      	str	r3, [r7, #0]
 8009a1e:	4638      	mov	r0, r7
 8009a20:	f000 f80e 	bl	8009a40 <__malloc_unlock>
 8009a24:	e797      	b.n	8009956 <_malloc_r+0x22>
 8009a26:	6025      	str	r5, [r4, #0]
 8009a28:	e7dc      	b.n	80099e4 <_malloc_r+0xb0>
 8009a2a:	605b      	str	r3, [r3, #4]
 8009a2c:	deff      	udf	#255	; 0xff
 8009a2e:	bf00      	nop
 8009a30:	20004d8c 	.word	0x20004d8c

08009a34 <__malloc_lock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__malloc_lock+0x8>)
 8009a36:	f7ff bf00 	b.w	800983a <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20004d88 	.word	0x20004d88

08009a40 <__malloc_unlock>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__malloc_unlock+0x8>)
 8009a42:	f7ff befb 	b.w	800983c <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	20004d88 	.word	0x20004d88

08009a4c <__ssputs_r>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	688e      	ldr	r6, [r1, #8]
 8009a52:	461f      	mov	r7, r3
 8009a54:	42be      	cmp	r6, r7
 8009a56:	680b      	ldr	r3, [r1, #0]
 8009a58:	4682      	mov	sl, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	4690      	mov	r8, r2
 8009a5e:	d82c      	bhi.n	8009aba <__ssputs_r+0x6e>
 8009a60:	898a      	ldrh	r2, [r1, #12]
 8009a62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a66:	d026      	beq.n	8009ab6 <__ssputs_r+0x6a>
 8009a68:	6965      	ldr	r5, [r4, #20]
 8009a6a:	6909      	ldr	r1, [r1, #16]
 8009a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a70:	eba3 0901 	sub.w	r9, r3, r1
 8009a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a78:	1c7b      	adds	r3, r7, #1
 8009a7a:	444b      	add	r3, r9
 8009a7c:	106d      	asrs	r5, r5, #1
 8009a7e:	429d      	cmp	r5, r3
 8009a80:	bf38      	it	cc
 8009a82:	461d      	movcc	r5, r3
 8009a84:	0553      	lsls	r3, r2, #21
 8009a86:	d527      	bpl.n	8009ad8 <__ssputs_r+0x8c>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7ff ff53 	bl	8009934 <_malloc_r>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	b360      	cbz	r0, 8009aec <__ssputs_r+0xa0>
 8009a92:	6921      	ldr	r1, [r4, #16]
 8009a94:	464a      	mov	r2, r9
 8009a96:	f7ff fed2 	bl	800983e <memcpy>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	6126      	str	r6, [r4, #16]
 8009aa8:	6165      	str	r5, [r4, #20]
 8009aaa:	444e      	add	r6, r9
 8009aac:	eba5 0509 	sub.w	r5, r5, r9
 8009ab0:	6026      	str	r6, [r4, #0]
 8009ab2:	60a5      	str	r5, [r4, #8]
 8009ab4:	463e      	mov	r6, r7
 8009ab6:	42be      	cmp	r6, r7
 8009ab8:	d900      	bls.n	8009abc <__ssputs_r+0x70>
 8009aba:	463e      	mov	r6, r7
 8009abc:	6820      	ldr	r0, [r4, #0]
 8009abe:	4632      	mov	r2, r6
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	f000 fd33 	bl	800a52c <memmove>
 8009ac6:	68a3      	ldr	r3, [r4, #8]
 8009ac8:	1b9b      	subs	r3, r3, r6
 8009aca:	60a3      	str	r3, [r4, #8]
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	4433      	add	r3, r6
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad8:	462a      	mov	r2, r5
 8009ada:	f000 fd73 	bl	800a5c4 <_realloc_r>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1e0      	bne.n	8009aa6 <__ssputs_r+0x5a>
 8009ae4:	6921      	ldr	r1, [r4, #16]
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	f7ff feb8 	bl	800985c <_free_r>
 8009aec:	230c      	movs	r3, #12
 8009aee:	f8ca 3000 	str.w	r3, [sl]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	e7e9      	b.n	8009ad4 <__ssputs_r+0x88>

08009b00 <_svfiprintf_r>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4698      	mov	r8, r3
 8009b06:	898b      	ldrh	r3, [r1, #12]
 8009b08:	061b      	lsls	r3, r3, #24
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	d50e      	bpl.n	8009b32 <_svfiprintf_r+0x32>
 8009b14:	690b      	ldr	r3, [r1, #16]
 8009b16:	b963      	cbnz	r3, 8009b32 <_svfiprintf_r+0x32>
 8009b18:	2140      	movs	r1, #64	; 0x40
 8009b1a:	f7ff ff0b 	bl	8009934 <_malloc_r>
 8009b1e:	6028      	str	r0, [r5, #0]
 8009b20:	6128      	str	r0, [r5, #16]
 8009b22:	b920      	cbnz	r0, 8009b2e <_svfiprintf_r+0x2e>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e0d0      	b.n	8009cd0 <_svfiprintf_r+0x1d0>
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	616b      	str	r3, [r5, #20]
 8009b32:	2300      	movs	r3, #0
 8009b34:	9309      	str	r3, [sp, #36]	; 0x24
 8009b36:	2320      	movs	r3, #32
 8009b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b40:	2330      	movs	r3, #48	; 0x30
 8009b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ce8 <_svfiprintf_r+0x1e8>
 8009b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4a:	f04f 0901 	mov.w	r9, #1
 8009b4e:	4623      	mov	r3, r4
 8009b50:	469a      	mov	sl, r3
 8009b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b56:	b10a      	cbz	r2, 8009b5c <_svfiprintf_r+0x5c>
 8009b58:	2a25      	cmp	r2, #37	; 0x25
 8009b5a:	d1f9      	bne.n	8009b50 <_svfiprintf_r+0x50>
 8009b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b60:	d00b      	beq.n	8009b7a <_svfiprintf_r+0x7a>
 8009b62:	465b      	mov	r3, fp
 8009b64:	4622      	mov	r2, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7ff ff6f 	bl	8009a4c <__ssputs_r>
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f000 80a9 	beq.w	8009cc6 <_svfiprintf_r+0x1c6>
 8009b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b76:	445a      	add	r2, fp
 8009b78:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80a1 	beq.w	8009cc6 <_svfiprintf_r+0x1c6>
 8009b84:	2300      	movs	r3, #0
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8e:	f10a 0a01 	add.w	sl, sl, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9c:	4654      	mov	r4, sl
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba4:	4850      	ldr	r0, [pc, #320]	; (8009ce8 <_svfiprintf_r+0x1e8>)
 8009ba6:	f7f6 fb23 	bl	80001f0 <memchr>
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	b9d8      	cbnz	r0, 8009be6 <_svfiprintf_r+0xe6>
 8009bae:	06d0      	lsls	r0, r2, #27
 8009bb0:	bf44      	itt	mi
 8009bb2:	2320      	movmi	r3, #32
 8009bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb8:	0711      	lsls	r1, r2, #28
 8009bba:	bf44      	itt	mi
 8009bbc:	232b      	movmi	r3, #43	; 0x2b
 8009bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d015      	beq.n	8009bf6 <_svfiprintf_r+0xf6>
 8009bca:	9a07      	ldr	r2, [sp, #28]
 8009bcc:	4654      	mov	r4, sl
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bda:	3b30      	subs	r3, #48	; 0x30
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d94d      	bls.n	8009c7c <_svfiprintf_r+0x17c>
 8009be0:	b1b0      	cbz	r0, 8009c10 <_svfiprintf_r+0x110>
 8009be2:	9207      	str	r2, [sp, #28]
 8009be4:	e014      	b.n	8009c10 <_svfiprintf_r+0x110>
 8009be6:	eba0 0308 	sub.w	r3, r0, r8
 8009bea:	fa09 f303 	lsl.w	r3, r9, r3
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	46a2      	mov	sl, r4
 8009bf4:	e7d2      	b.n	8009b9c <_svfiprintf_r+0x9c>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	1d19      	adds	r1, r3, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	9103      	str	r1, [sp, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfbb      	ittet	lt
 8009c02:	425b      	neglt	r3, r3
 8009c04:	f042 0202 	orrlt.w	r2, r2, #2
 8009c08:	9307      	strge	r3, [sp, #28]
 8009c0a:	9307      	strlt	r3, [sp, #28]
 8009c0c:	bfb8      	it	lt
 8009c0e:	9204      	strlt	r2, [sp, #16]
 8009c10:	7823      	ldrb	r3, [r4, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d10c      	bne.n	8009c30 <_svfiprintf_r+0x130>
 8009c16:	7863      	ldrb	r3, [r4, #1]
 8009c18:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1a:	d134      	bne.n	8009c86 <_svfiprintf_r+0x186>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb8      	it	lt
 8009c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c2c:	3402      	adds	r4, #2
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009cf8 <_svfiprintf_r+0x1f8>
 8009c34:	7821      	ldrb	r1, [r4, #0]
 8009c36:	2203      	movs	r2, #3
 8009c38:	4650      	mov	r0, sl
 8009c3a:	f7f6 fad9 	bl	80001f0 <memchr>
 8009c3e:	b138      	cbz	r0, 8009c50 <_svfiprintf_r+0x150>
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	eba0 000a 	sub.w	r0, r0, sl
 8009c46:	2240      	movs	r2, #64	; 0x40
 8009c48:	4082      	lsls	r2, r0
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c54:	4825      	ldr	r0, [pc, #148]	; (8009cec <_svfiprintf_r+0x1ec>)
 8009c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5a:	2206      	movs	r2, #6
 8009c5c:	f7f6 fac8 	bl	80001f0 <memchr>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d038      	beq.n	8009cd6 <_svfiprintf_r+0x1d6>
 8009c64:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <_svfiprintf_r+0x1f0>)
 8009c66:	bb1b      	cbnz	r3, 8009cb0 <_svfiprintf_r+0x1b0>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	3307      	adds	r3, #7
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	3308      	adds	r3, #8
 8009c72:	9303      	str	r3, [sp, #12]
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	4433      	add	r3, r6
 8009c78:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7a:	e768      	b.n	8009b4e <_svfiprintf_r+0x4e>
 8009c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c80:	460c      	mov	r4, r1
 8009c82:	2001      	movs	r0, #1
 8009c84:	e7a6      	b.n	8009bd4 <_svfiprintf_r+0xd4>
 8009c86:	2300      	movs	r3, #0
 8009c88:	3401      	adds	r4, #1
 8009c8a:	9305      	str	r3, [sp, #20]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f04f 0c0a 	mov.w	ip, #10
 8009c92:	4620      	mov	r0, r4
 8009c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c98:	3a30      	subs	r2, #48	; 0x30
 8009c9a:	2a09      	cmp	r2, #9
 8009c9c:	d903      	bls.n	8009ca6 <_svfiprintf_r+0x1a6>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0c6      	beq.n	8009c30 <_svfiprintf_r+0x130>
 8009ca2:	9105      	str	r1, [sp, #20]
 8009ca4:	e7c4      	b.n	8009c30 <_svfiprintf_r+0x130>
 8009ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009caa:	4604      	mov	r4, r0
 8009cac:	2301      	movs	r3, #1
 8009cae:	e7f0      	b.n	8009c92 <_svfiprintf_r+0x192>
 8009cb0:	ab03      	add	r3, sp, #12
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <_svfiprintf_r+0x1f4>)
 8009cb8:	a904      	add	r1, sp, #16
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f3af 8000 	nop.w
 8009cc0:	1c42      	adds	r2, r0, #1
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	d1d6      	bne.n	8009c74 <_svfiprintf_r+0x174>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	065b      	lsls	r3, r3, #25
 8009cca:	f53f af2d 	bmi.w	8009b28 <_svfiprintf_r+0x28>
 8009cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd0:	b01d      	add	sp, #116	; 0x74
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <_svfiprintf_r+0x1f4>)
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f000 f9bd 	bl	800a060 <_printf_i>
 8009ce6:	e7eb      	b.n	8009cc0 <_svfiprintf_r+0x1c0>
 8009ce8:	0800a9a6 	.word	0x0800a9a6
 8009cec:	0800a9b0 	.word	0x0800a9b0
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	08009a4d 	.word	0x08009a4d
 8009cf8:	0800a9ac 	.word	0x0800a9ac

08009cfc <__sfputc_r>:
 8009cfc:	6893      	ldr	r3, [r2, #8]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	b410      	push	{r4}
 8009d04:	6093      	str	r3, [r2, #8]
 8009d06:	da08      	bge.n	8009d1a <__sfputc_r+0x1e>
 8009d08:	6994      	ldr	r4, [r2, #24]
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	db01      	blt.n	8009d12 <__sfputc_r+0x16>
 8009d0e:	290a      	cmp	r1, #10
 8009d10:	d103      	bne.n	8009d1a <__sfputc_r+0x1e>
 8009d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d16:	f7ff bc82 	b.w	800961e <__swbuf_r>
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	1c58      	adds	r0, r3, #1
 8009d1e:	6010      	str	r0, [r2, #0]
 8009d20:	7019      	strb	r1, [r3, #0]
 8009d22:	4608      	mov	r0, r1
 8009d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <__sfputs_r>:
 8009d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	460f      	mov	r7, r1
 8009d30:	4614      	mov	r4, r2
 8009d32:	18d5      	adds	r5, r2, r3
 8009d34:	42ac      	cmp	r4, r5
 8009d36:	d101      	bne.n	8009d3c <__sfputs_r+0x12>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e007      	b.n	8009d4c <__sfputs_r+0x22>
 8009d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d40:	463a      	mov	r2, r7
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ffda 	bl	8009cfc <__sfputc_r>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d1f3      	bne.n	8009d34 <__sfputs_r+0xa>
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d50 <_vfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	460d      	mov	r5, r1
 8009d56:	b09d      	sub	sp, #116	; 0x74
 8009d58:	4614      	mov	r4, r2
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	b118      	cbz	r0, 8009d68 <_vfiprintf_r+0x18>
 8009d60:	6a03      	ldr	r3, [r0, #32]
 8009d62:	b90b      	cbnz	r3, 8009d68 <_vfiprintf_r+0x18>
 8009d64:	f7ff fb38 	bl	80093d8 <__sinit>
 8009d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d76:	f7ff fd60 	bl	800983a <__retarget_lock_acquire_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	071b      	lsls	r3, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <_vfiprintf_r+0x34>
 8009d80:	692b      	ldr	r3, [r5, #16]
 8009d82:	b99b      	cbnz	r3, 8009dac <_vfiprintf_r+0x5c>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7ff fc86 	bl	8009698 <__swsetup_r>
 8009d8c:	b170      	cbz	r0, 8009dac <_vfiprintf_r+0x5c>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d90:	07dc      	lsls	r4, r3, #31
 8009d92:	d504      	bpl.n	8009d9e <_vfiprintf_r+0x4e>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b01d      	add	sp, #116	; 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d4f7      	bmi.n	8009d94 <_vfiprintf_r+0x44>
 8009da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009da6:	f7ff fd49 	bl	800983c <__retarget_lock_release_recursive>
 8009daa:	e7f3      	b.n	8009d94 <_vfiprintf_r+0x44>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	; 0x24
 8009db0:	2320      	movs	r3, #32
 8009db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dba:	2330      	movs	r3, #48	; 0x30
 8009dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f70 <_vfiprintf_r+0x220>
 8009dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	4623      	mov	r3, r4
 8009dca:	469a      	mov	sl, r3
 8009dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_vfiprintf_r+0x86>
 8009dd2:	2a25      	cmp	r2, #37	; 0x25
 8009dd4:	d1f9      	bne.n	8009dca <_vfiprintf_r+0x7a>
 8009dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dda:	d00b      	beq.n	8009df4 <_vfiprintf_r+0xa4>
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4622      	mov	r2, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffa1 	bl	8009d2a <__sfputs_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	f000 80a9 	beq.w	8009f40 <_vfiprintf_r+0x1f0>
 8009dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df0:	445a      	add	r2, fp
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80a1 	beq.w	8009f40 <_vfiprintf_r+0x1f0>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e08:	f10a 0a01 	add.w	sl, sl, #1
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e14:	931a      	str	r3, [sp, #104]	; 0x68
 8009e16:	4654      	mov	r4, sl
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4854      	ldr	r0, [pc, #336]	; (8009f70 <_vfiprintf_r+0x220>)
 8009e20:	f7f6 f9e6 	bl	80001f0 <memchr>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	b9d8      	cbnz	r0, 8009e60 <_vfiprintf_r+0x110>
 8009e28:	06d1      	lsls	r1, r2, #27
 8009e2a:	bf44      	itt	mi
 8009e2c:	2320      	movmi	r3, #32
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e32:	0713      	lsls	r3, r2, #28
 8009e34:	bf44      	itt	mi
 8009e36:	232b      	movmi	r3, #43	; 0x2b
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d015      	beq.n	8009e70 <_vfiprintf_r+0x120>
 8009e44:	9a07      	ldr	r2, [sp, #28]
 8009e46:	4654      	mov	r4, sl
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	; 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94d      	bls.n	8009ef6 <_vfiprintf_r+0x1a6>
 8009e5a:	b1b0      	cbz	r0, 8009e8a <_vfiprintf_r+0x13a>
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	e014      	b.n	8009e8a <_vfiprintf_r+0x13a>
 8009e60:	eba0 0308 	sub.w	r3, r0, r8
 8009e64:	fa09 f303 	lsl.w	r3, r9, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	e7d2      	b.n	8009e16 <_vfiprintf_r+0xc6>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9103      	str	r1, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	425b      	neglt	r3, r3
 8009e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e82:	9307      	strge	r3, [sp, #28]
 8009e84:	9307      	strlt	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	9204      	strlt	r2, [sp, #16]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8e:	d10c      	bne.n	8009eaa <_vfiprintf_r+0x15a>
 8009e90:	7863      	ldrb	r3, [r4, #1]
 8009e92:	2b2a      	cmp	r3, #42	; 0x2a
 8009e94:	d134      	bne.n	8009f00 <_vfiprintf_r+0x1b0>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea6:	3402      	adds	r4, #2
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f80 <_vfiprintf_r+0x230>
 8009eae:	7821      	ldrb	r1, [r4, #0]
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	f7f6 f99c 	bl	80001f0 <memchr>
 8009eb8:	b138      	cbz	r0, 8009eca <_vfiprintf_r+0x17a>
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	eba0 000a 	sub.w	r0, r0, sl
 8009ec0:	2240      	movs	r2, #64	; 0x40
 8009ec2:	4082      	lsls	r2, r0
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	3401      	adds	r4, #1
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ece:	4829      	ldr	r0, [pc, #164]	; (8009f74 <_vfiprintf_r+0x224>)
 8009ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed4:	2206      	movs	r2, #6
 8009ed6:	f7f6 f98b 	bl	80001f0 <memchr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d03f      	beq.n	8009f5e <_vfiprintf_r+0x20e>
 8009ede:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <_vfiprintf_r+0x228>)
 8009ee0:	bb1b      	cbnz	r3, 8009f2a <_vfiprintf_r+0x1da>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	3307      	adds	r3, #7
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	3308      	adds	r3, #8
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	443b      	add	r3, r7
 8009ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef4:	e768      	b.n	8009dc8 <_vfiprintf_r+0x78>
 8009ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efa:	460c      	mov	r4, r1
 8009efc:	2001      	movs	r0, #1
 8009efe:	e7a6      	b.n	8009e4e <_vfiprintf_r+0xfe>
 8009f00:	2300      	movs	r3, #0
 8009f02:	3401      	adds	r4, #1
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	4619      	mov	r1, r3
 8009f08:	f04f 0c0a 	mov.w	ip, #10
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f12:	3a30      	subs	r2, #48	; 0x30
 8009f14:	2a09      	cmp	r2, #9
 8009f16:	d903      	bls.n	8009f20 <_vfiprintf_r+0x1d0>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d0c6      	beq.n	8009eaa <_vfiprintf_r+0x15a>
 8009f1c:	9105      	str	r1, [sp, #20]
 8009f1e:	e7c4      	b.n	8009eaa <_vfiprintf_r+0x15a>
 8009f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f24:	4604      	mov	r4, r0
 8009f26:	2301      	movs	r3, #1
 8009f28:	e7f0      	b.n	8009f0c <_vfiprintf_r+0x1bc>
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <_vfiprintf_r+0x22c>)
 8009f32:	a904      	add	r1, sp, #16
 8009f34:	4630      	mov	r0, r6
 8009f36:	f3af 8000 	nop.w
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	1c78      	adds	r0, r7, #1
 8009f3e:	d1d6      	bne.n	8009eee <_vfiprintf_r+0x19e>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x202>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x202>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7ff fc75 	bl	800983c <__retarget_lock_release_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	065b      	lsls	r3, r3, #25
 8009f56:	f53f af1d 	bmi.w	8009d94 <_vfiprintf_r+0x44>
 8009f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5c:	e71c      	b.n	8009d98 <_vfiprintf_r+0x48>
 8009f5e:	ab03      	add	r3, sp, #12
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	462a      	mov	r2, r5
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <_vfiprintf_r+0x22c>)
 8009f66:	a904      	add	r1, sp, #16
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 f879 	bl	800a060 <_printf_i>
 8009f6e:	e7e4      	b.n	8009f3a <_vfiprintf_r+0x1ea>
 8009f70:	0800a9a6 	.word	0x0800a9a6
 8009f74:	0800a9b0 	.word	0x0800a9b0
 8009f78:	00000000 	.word	0x00000000
 8009f7c:	08009d2b 	.word	0x08009d2b
 8009f80:	0800a9ac 	.word	0x0800a9ac

08009f84 <_printf_common>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	4616      	mov	r6, r2
 8009f8a:	4699      	mov	r9, r3
 8009f8c:	688a      	ldr	r2, [r1, #8]
 8009f8e:	690b      	ldr	r3, [r1, #16]
 8009f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	bfb8      	it	lt
 8009f98:	4613      	movlt	r3, r2
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	b10a      	cbz	r2, 8009faa <_printf_common+0x26>
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	6033      	str	r3, [r6, #0]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	0699      	lsls	r1, r3, #26
 8009fae:	bf42      	ittt	mi
 8009fb0:	6833      	ldrmi	r3, [r6, #0]
 8009fb2:	3302      	addmi	r3, #2
 8009fb4:	6033      	strmi	r3, [r6, #0]
 8009fb6:	6825      	ldr	r5, [r4, #0]
 8009fb8:	f015 0506 	ands.w	r5, r5, #6
 8009fbc:	d106      	bne.n	8009fcc <_printf_common+0x48>
 8009fbe:	f104 0a19 	add.w	sl, r4, #25
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	6832      	ldr	r2, [r6, #0]
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	42ab      	cmp	r3, r5
 8009fca:	dc26      	bgt.n	800a01a <_printf_common+0x96>
 8009fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fd0:	1e13      	subs	r3, r2, #0
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	bf18      	it	ne
 8009fd6:	2301      	movne	r3, #1
 8009fd8:	0692      	lsls	r2, r2, #26
 8009fda:	d42b      	bmi.n	800a034 <_printf_common+0xb0>
 8009fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c0      	blx	r8
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d01e      	beq.n	800a028 <_printf_common+0xa4>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	f003 0306 	and.w	r3, r3, #6
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	bf02      	ittt	eq
 8009ff6:	68e5      	ldreq	r5, [r4, #12]
 8009ff8:	6833      	ldreq	r3, [r6, #0]
 8009ffa:	1aed      	subeq	r5, r5, r3
 8009ffc:	68a3      	ldr	r3, [r4, #8]
 8009ffe:	bf0c      	ite	eq
 800a000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a004:	2500      	movne	r5, #0
 800a006:	4293      	cmp	r3, r2
 800a008:	bfc4      	itt	gt
 800a00a:	1a9b      	subgt	r3, r3, r2
 800a00c:	18ed      	addgt	r5, r5, r3
 800a00e:	2600      	movs	r6, #0
 800a010:	341a      	adds	r4, #26
 800a012:	42b5      	cmp	r5, r6
 800a014:	d11a      	bne.n	800a04c <_printf_common+0xc8>
 800a016:	2000      	movs	r0, #0
 800a018:	e008      	b.n	800a02c <_printf_common+0xa8>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4652      	mov	r2, sl
 800a01e:	4649      	mov	r1, r9
 800a020:	4638      	mov	r0, r7
 800a022:	47c0      	blx	r8
 800a024:	3001      	adds	r0, #1
 800a026:	d103      	bne.n	800a030 <_printf_common+0xac>
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	3501      	adds	r5, #1
 800a032:	e7c6      	b.n	8009fc2 <_printf_common+0x3e>
 800a034:	18e1      	adds	r1, r4, r3
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	2030      	movs	r0, #48	; 0x30
 800a03a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a03e:	4422      	add	r2, r4
 800a040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a048:	3302      	adds	r3, #2
 800a04a:	e7c7      	b.n	8009fdc <_printf_common+0x58>
 800a04c:	2301      	movs	r3, #1
 800a04e:	4622      	mov	r2, r4
 800a050:	4649      	mov	r1, r9
 800a052:	4638      	mov	r0, r7
 800a054:	47c0      	blx	r8
 800a056:	3001      	adds	r0, #1
 800a058:	d0e6      	beq.n	800a028 <_printf_common+0xa4>
 800a05a:	3601      	adds	r6, #1
 800a05c:	e7d9      	b.n	800a012 <_printf_common+0x8e>
	...

0800a060 <_printf_i>:
 800a060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	7e0f      	ldrb	r7, [r1, #24]
 800a066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a068:	2f78      	cmp	r7, #120	; 0x78
 800a06a:	4691      	mov	r9, r2
 800a06c:	4680      	mov	r8, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	469a      	mov	sl, r3
 800a072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a076:	d807      	bhi.n	800a088 <_printf_i+0x28>
 800a078:	2f62      	cmp	r7, #98	; 0x62
 800a07a:	d80a      	bhi.n	800a092 <_printf_i+0x32>
 800a07c:	2f00      	cmp	r7, #0
 800a07e:	f000 80d4 	beq.w	800a22a <_printf_i+0x1ca>
 800a082:	2f58      	cmp	r7, #88	; 0x58
 800a084:	f000 80c0 	beq.w	800a208 <_printf_i+0x1a8>
 800a088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a08c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a090:	e03a      	b.n	800a108 <_printf_i+0xa8>
 800a092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a096:	2b15      	cmp	r3, #21
 800a098:	d8f6      	bhi.n	800a088 <_printf_i+0x28>
 800a09a:	a101      	add	r1, pc, #4	; (adr r1, 800a0a0 <_printf_i+0x40>)
 800a09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0a0:	0800a0f9 	.word	0x0800a0f9
 800a0a4:	0800a10d 	.word	0x0800a10d
 800a0a8:	0800a089 	.word	0x0800a089
 800a0ac:	0800a089 	.word	0x0800a089
 800a0b0:	0800a089 	.word	0x0800a089
 800a0b4:	0800a089 	.word	0x0800a089
 800a0b8:	0800a10d 	.word	0x0800a10d
 800a0bc:	0800a089 	.word	0x0800a089
 800a0c0:	0800a089 	.word	0x0800a089
 800a0c4:	0800a089 	.word	0x0800a089
 800a0c8:	0800a089 	.word	0x0800a089
 800a0cc:	0800a211 	.word	0x0800a211
 800a0d0:	0800a139 	.word	0x0800a139
 800a0d4:	0800a1cb 	.word	0x0800a1cb
 800a0d8:	0800a089 	.word	0x0800a089
 800a0dc:	0800a089 	.word	0x0800a089
 800a0e0:	0800a233 	.word	0x0800a233
 800a0e4:	0800a089 	.word	0x0800a089
 800a0e8:	0800a139 	.word	0x0800a139
 800a0ec:	0800a089 	.word	0x0800a089
 800a0f0:	0800a089 	.word	0x0800a089
 800a0f4:	0800a1d3 	.word	0x0800a1d3
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	1d1a      	adds	r2, r3, #4
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a108:	2301      	movs	r3, #1
 800a10a:	e09f      	b.n	800a24c <_printf_i+0x1ec>
 800a10c:	6820      	ldr	r0, [r4, #0]
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	0607      	lsls	r7, r0, #24
 800a112:	f103 0104 	add.w	r1, r3, #4
 800a116:	6029      	str	r1, [r5, #0]
 800a118:	d501      	bpl.n	800a11e <_printf_i+0xbe>
 800a11a:	681e      	ldr	r6, [r3, #0]
 800a11c:	e003      	b.n	800a126 <_printf_i+0xc6>
 800a11e:	0646      	lsls	r6, r0, #25
 800a120:	d5fb      	bpl.n	800a11a <_printf_i+0xba>
 800a122:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a126:	2e00      	cmp	r6, #0
 800a128:	da03      	bge.n	800a132 <_printf_i+0xd2>
 800a12a:	232d      	movs	r3, #45	; 0x2d
 800a12c:	4276      	negs	r6, r6
 800a12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a132:	485a      	ldr	r0, [pc, #360]	; (800a29c <_printf_i+0x23c>)
 800a134:	230a      	movs	r3, #10
 800a136:	e012      	b.n	800a15e <_printf_i+0xfe>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	1d19      	adds	r1, r3, #4
 800a13e:	6029      	str	r1, [r5, #0]
 800a140:	0605      	lsls	r5, r0, #24
 800a142:	d501      	bpl.n	800a148 <_printf_i+0xe8>
 800a144:	681e      	ldr	r6, [r3, #0]
 800a146:	e002      	b.n	800a14e <_printf_i+0xee>
 800a148:	0641      	lsls	r1, r0, #25
 800a14a:	d5fb      	bpl.n	800a144 <_printf_i+0xe4>
 800a14c:	881e      	ldrh	r6, [r3, #0]
 800a14e:	4853      	ldr	r0, [pc, #332]	; (800a29c <_printf_i+0x23c>)
 800a150:	2f6f      	cmp	r7, #111	; 0x6f
 800a152:	bf0c      	ite	eq
 800a154:	2308      	moveq	r3, #8
 800a156:	230a      	movne	r3, #10
 800a158:	2100      	movs	r1, #0
 800a15a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a15e:	6865      	ldr	r5, [r4, #4]
 800a160:	60a5      	str	r5, [r4, #8]
 800a162:	2d00      	cmp	r5, #0
 800a164:	bfa2      	ittt	ge
 800a166:	6821      	ldrge	r1, [r4, #0]
 800a168:	f021 0104 	bicge.w	r1, r1, #4
 800a16c:	6021      	strge	r1, [r4, #0]
 800a16e:	b90e      	cbnz	r6, 800a174 <_printf_i+0x114>
 800a170:	2d00      	cmp	r5, #0
 800a172:	d04b      	beq.n	800a20c <_printf_i+0x1ac>
 800a174:	4615      	mov	r5, r2
 800a176:	fbb6 f1f3 	udiv	r1, r6, r3
 800a17a:	fb03 6711 	mls	r7, r3, r1, r6
 800a17e:	5dc7      	ldrb	r7, [r0, r7]
 800a180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a184:	4637      	mov	r7, r6
 800a186:	42bb      	cmp	r3, r7
 800a188:	460e      	mov	r6, r1
 800a18a:	d9f4      	bls.n	800a176 <_printf_i+0x116>
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d10b      	bne.n	800a1a8 <_printf_i+0x148>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	07de      	lsls	r6, r3, #31
 800a194:	d508      	bpl.n	800a1a8 <_printf_i+0x148>
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	6861      	ldr	r1, [r4, #4]
 800a19a:	4299      	cmp	r1, r3
 800a19c:	bfde      	ittt	le
 800a19e:	2330      	movle	r3, #48	; 0x30
 800a1a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1a8:	1b52      	subs	r2, r2, r5
 800a1aa:	6122      	str	r2, [r4, #16]
 800a1ac:	f8cd a000 	str.w	sl, [sp]
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	aa03      	add	r2, sp, #12
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7ff fee4 	bl	8009f84 <_printf_common>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d14a      	bne.n	800a256 <_printf_i+0x1f6>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	b004      	add	sp, #16
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	f043 0320 	orr.w	r3, r3, #32
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	4833      	ldr	r0, [pc, #204]	; (800a2a0 <_printf_i+0x240>)
 800a1d4:	2778      	movs	r7, #120	; 0x78
 800a1d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	6829      	ldr	r1, [r5, #0]
 800a1de:	061f      	lsls	r7, r3, #24
 800a1e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1e4:	d402      	bmi.n	800a1ec <_printf_i+0x18c>
 800a1e6:	065f      	lsls	r7, r3, #25
 800a1e8:	bf48      	it	mi
 800a1ea:	b2b6      	uxthmi	r6, r6
 800a1ec:	07df      	lsls	r7, r3, #31
 800a1ee:	bf48      	it	mi
 800a1f0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1f4:	6029      	str	r1, [r5, #0]
 800a1f6:	bf48      	it	mi
 800a1f8:	6023      	strmi	r3, [r4, #0]
 800a1fa:	b91e      	cbnz	r6, 800a204 <_printf_i+0x1a4>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	f023 0320 	bic.w	r3, r3, #32
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	2310      	movs	r3, #16
 800a206:	e7a7      	b.n	800a158 <_printf_i+0xf8>
 800a208:	4824      	ldr	r0, [pc, #144]	; (800a29c <_printf_i+0x23c>)
 800a20a:	e7e4      	b.n	800a1d6 <_printf_i+0x176>
 800a20c:	4615      	mov	r5, r2
 800a20e:	e7bd      	b.n	800a18c <_printf_i+0x12c>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	6826      	ldr	r6, [r4, #0]
 800a214:	6961      	ldr	r1, [r4, #20]
 800a216:	1d18      	adds	r0, r3, #4
 800a218:	6028      	str	r0, [r5, #0]
 800a21a:	0635      	lsls	r5, r6, #24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	d501      	bpl.n	800a224 <_printf_i+0x1c4>
 800a220:	6019      	str	r1, [r3, #0]
 800a222:	e002      	b.n	800a22a <_printf_i+0x1ca>
 800a224:	0670      	lsls	r0, r6, #25
 800a226:	d5fb      	bpl.n	800a220 <_printf_i+0x1c0>
 800a228:	8019      	strh	r1, [r3, #0]
 800a22a:	2300      	movs	r3, #0
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	4615      	mov	r5, r2
 800a230:	e7bc      	b.n	800a1ac <_printf_i+0x14c>
 800a232:	682b      	ldr	r3, [r5, #0]
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	602a      	str	r2, [r5, #0]
 800a238:	681d      	ldr	r5, [r3, #0]
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	2100      	movs	r1, #0
 800a23e:	4628      	mov	r0, r5
 800a240:	f7f5 ffd6 	bl	80001f0 <memchr>
 800a244:	b108      	cbz	r0, 800a24a <_printf_i+0x1ea>
 800a246:	1b40      	subs	r0, r0, r5
 800a248:	6060      	str	r0, [r4, #4]
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	2300      	movs	r3, #0
 800a250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a254:	e7aa      	b.n	800a1ac <_printf_i+0x14c>
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	462a      	mov	r2, r5
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	47d0      	blx	sl
 800a260:	3001      	adds	r0, #1
 800a262:	d0ad      	beq.n	800a1c0 <_printf_i+0x160>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	079b      	lsls	r3, r3, #30
 800a268:	d413      	bmi.n	800a292 <_printf_i+0x232>
 800a26a:	68e0      	ldr	r0, [r4, #12]
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	4298      	cmp	r0, r3
 800a270:	bfb8      	it	lt
 800a272:	4618      	movlt	r0, r3
 800a274:	e7a6      	b.n	800a1c4 <_printf_i+0x164>
 800a276:	2301      	movs	r3, #1
 800a278:	4632      	mov	r2, r6
 800a27a:	4649      	mov	r1, r9
 800a27c:	4640      	mov	r0, r8
 800a27e:	47d0      	blx	sl
 800a280:	3001      	adds	r0, #1
 800a282:	d09d      	beq.n	800a1c0 <_printf_i+0x160>
 800a284:	3501      	adds	r5, #1
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	9903      	ldr	r1, [sp, #12]
 800a28a:	1a5b      	subs	r3, r3, r1
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dcf2      	bgt.n	800a276 <_printf_i+0x216>
 800a290:	e7eb      	b.n	800a26a <_printf_i+0x20a>
 800a292:	2500      	movs	r5, #0
 800a294:	f104 0619 	add.w	r6, r4, #25
 800a298:	e7f5      	b.n	800a286 <_printf_i+0x226>
 800a29a:	bf00      	nop
 800a29c:	0800a9b7 	.word	0x0800a9b7
 800a2a0:	0800a9c8 	.word	0x0800a9c8

0800a2a4 <__sflush_r>:
 800a2a4:	898a      	ldrh	r2, [r1, #12]
 800a2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	0710      	lsls	r0, r2, #28
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	d458      	bmi.n	800a364 <__sflush_r+0xc0>
 800a2b2:	684b      	ldr	r3, [r1, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	dc05      	bgt.n	800a2c4 <__sflush_r+0x20>
 800a2b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	dc02      	bgt.n	800a2c4 <__sflush_r+0x20>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c6:	2e00      	cmp	r6, #0
 800a2c8:	d0f9      	beq.n	800a2be <__sflush_r+0x1a>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2d0:	682f      	ldr	r7, [r5, #0]
 800a2d2:	6a21      	ldr	r1, [r4, #32]
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	d032      	beq.n	800a33e <__sflush_r+0x9a>
 800a2d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	075a      	lsls	r2, r3, #29
 800a2de:	d505      	bpl.n	800a2ec <__sflush_r+0x48>
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	1ac0      	subs	r0, r0, r3
 800a2e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2e6:	b10b      	cbz	r3, 800a2ec <__sflush_r+0x48>
 800a2e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ea:	1ac0      	subs	r0, r0, r3
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2f2:	6a21      	ldr	r1, [r4, #32]
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	47b0      	blx	r6
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	d106      	bne.n	800a30c <__sflush_r+0x68>
 800a2fe:	6829      	ldr	r1, [r5, #0]
 800a300:	291d      	cmp	r1, #29
 800a302:	d82b      	bhi.n	800a35c <__sflush_r+0xb8>
 800a304:	4a29      	ldr	r2, [pc, #164]	; (800a3ac <__sflush_r+0x108>)
 800a306:	410a      	asrs	r2, r1
 800a308:	07d6      	lsls	r6, r2, #31
 800a30a:	d427      	bmi.n	800a35c <__sflush_r+0xb8>
 800a30c:	2200      	movs	r2, #0
 800a30e:	6062      	str	r2, [r4, #4]
 800a310:	04d9      	lsls	r1, r3, #19
 800a312:	6922      	ldr	r2, [r4, #16]
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	d504      	bpl.n	800a322 <__sflush_r+0x7e>
 800a318:	1c42      	adds	r2, r0, #1
 800a31a:	d101      	bne.n	800a320 <__sflush_r+0x7c>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b903      	cbnz	r3, 800a322 <__sflush_r+0x7e>
 800a320:	6560      	str	r0, [r4, #84]	; 0x54
 800a322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a324:	602f      	str	r7, [r5, #0]
 800a326:	2900      	cmp	r1, #0
 800a328:	d0c9      	beq.n	800a2be <__sflush_r+0x1a>
 800a32a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a32e:	4299      	cmp	r1, r3
 800a330:	d002      	beq.n	800a338 <__sflush_r+0x94>
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff fa92 	bl	800985c <_free_r>
 800a338:	2000      	movs	r0, #0
 800a33a:	6360      	str	r0, [r4, #52]	; 0x34
 800a33c:	e7c0      	b.n	800a2c0 <__sflush_r+0x1c>
 800a33e:	2301      	movs	r3, #1
 800a340:	4628      	mov	r0, r5
 800a342:	47b0      	blx	r6
 800a344:	1c41      	adds	r1, r0, #1
 800a346:	d1c8      	bne.n	800a2da <__sflush_r+0x36>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0c5      	beq.n	800a2da <__sflush_r+0x36>
 800a34e:	2b1d      	cmp	r3, #29
 800a350:	d001      	beq.n	800a356 <__sflush_r+0xb2>
 800a352:	2b16      	cmp	r3, #22
 800a354:	d101      	bne.n	800a35a <__sflush_r+0xb6>
 800a356:	602f      	str	r7, [r5, #0]
 800a358:	e7b1      	b.n	800a2be <__sflush_r+0x1a>
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	e7ad      	b.n	800a2c0 <__sflush_r+0x1c>
 800a364:	690f      	ldr	r7, [r1, #16]
 800a366:	2f00      	cmp	r7, #0
 800a368:	d0a9      	beq.n	800a2be <__sflush_r+0x1a>
 800a36a:	0793      	lsls	r3, r2, #30
 800a36c:	680e      	ldr	r6, [r1, #0]
 800a36e:	bf08      	it	eq
 800a370:	694b      	ldreq	r3, [r1, #20]
 800a372:	600f      	str	r7, [r1, #0]
 800a374:	bf18      	it	ne
 800a376:	2300      	movne	r3, #0
 800a378:	eba6 0807 	sub.w	r8, r6, r7
 800a37c:	608b      	str	r3, [r1, #8]
 800a37e:	f1b8 0f00 	cmp.w	r8, #0
 800a382:	dd9c      	ble.n	800a2be <__sflush_r+0x1a>
 800a384:	6a21      	ldr	r1, [r4, #32]
 800a386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a388:	4643      	mov	r3, r8
 800a38a:	463a      	mov	r2, r7
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b0      	blx	r6
 800a390:	2800      	cmp	r0, #0
 800a392:	dc06      	bgt.n	800a3a2 <__sflush_r+0xfe>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a0:	e78e      	b.n	800a2c0 <__sflush_r+0x1c>
 800a3a2:	4407      	add	r7, r0
 800a3a4:	eba8 0800 	sub.w	r8, r8, r0
 800a3a8:	e7e9      	b.n	800a37e <__sflush_r+0xda>
 800a3aa:	bf00      	nop
 800a3ac:	dfbffffe 	.word	0xdfbffffe

0800a3b0 <_fflush_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	690b      	ldr	r3, [r1, #16]
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	b913      	cbnz	r3, 800a3c0 <_fflush_r+0x10>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	4628      	mov	r0, r5
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	b118      	cbz	r0, 800a3ca <_fflush_r+0x1a>
 800a3c2:	6a03      	ldr	r3, [r0, #32]
 800a3c4:	b90b      	cbnz	r3, 800a3ca <_fflush_r+0x1a>
 800a3c6:	f7ff f807 	bl	80093d8 <__sinit>
 800a3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d0f3      	beq.n	800a3ba <_fflush_r+0xa>
 800a3d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3d4:	07d0      	lsls	r0, r2, #31
 800a3d6:	d404      	bmi.n	800a3e2 <_fflush_r+0x32>
 800a3d8:	0599      	lsls	r1, r3, #22
 800a3da:	d402      	bmi.n	800a3e2 <_fflush_r+0x32>
 800a3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3de:	f7ff fa2c 	bl	800983a <__retarget_lock_acquire_recursive>
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	f7ff ff5d 	bl	800a2a4 <__sflush_r>
 800a3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ec:	07da      	lsls	r2, r3, #31
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	d4e4      	bmi.n	800a3bc <_fflush_r+0xc>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	059b      	lsls	r3, r3, #22
 800a3f6:	d4e1      	bmi.n	800a3bc <_fflush_r+0xc>
 800a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fa:	f7ff fa1f 	bl	800983c <__retarget_lock_release_recursive>
 800a3fe:	e7dd      	b.n	800a3bc <_fflush_r+0xc>

0800a400 <__swhatbuf_r>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	460c      	mov	r4, r1
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	2900      	cmp	r1, #0
 800a40a:	b096      	sub	sp, #88	; 0x58
 800a40c:	4615      	mov	r5, r2
 800a40e:	461e      	mov	r6, r3
 800a410:	da0d      	bge.n	800a42e <__swhatbuf_r+0x2e>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a418:	f04f 0100 	mov.w	r1, #0
 800a41c:	bf0c      	ite	eq
 800a41e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a422:	2340      	movne	r3, #64	; 0x40
 800a424:	2000      	movs	r0, #0
 800a426:	6031      	str	r1, [r6, #0]
 800a428:	602b      	str	r3, [r5, #0]
 800a42a:	b016      	add	sp, #88	; 0x58
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
 800a42e:	466a      	mov	r2, sp
 800a430:	f000 f896 	bl	800a560 <_fstat_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	dbec      	blt.n	800a412 <__swhatbuf_r+0x12>
 800a438:	9901      	ldr	r1, [sp, #4]
 800a43a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a43e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a442:	4259      	negs	r1, r3
 800a444:	4159      	adcs	r1, r3
 800a446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a44a:	e7eb      	b.n	800a424 <__swhatbuf_r+0x24>

0800a44c <__smakebuf_r>:
 800a44c:	898b      	ldrh	r3, [r1, #12]
 800a44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a450:	079d      	lsls	r5, r3, #30
 800a452:	4606      	mov	r6, r0
 800a454:	460c      	mov	r4, r1
 800a456:	d507      	bpl.n	800a468 <__smakebuf_r+0x1c>
 800a458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	6123      	str	r3, [r4, #16]
 800a460:	2301      	movs	r3, #1
 800a462:	6163      	str	r3, [r4, #20]
 800a464:	b002      	add	sp, #8
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	ab01      	add	r3, sp, #4
 800a46a:	466a      	mov	r2, sp
 800a46c:	f7ff ffc8 	bl	800a400 <__swhatbuf_r>
 800a470:	9900      	ldr	r1, [sp, #0]
 800a472:	4605      	mov	r5, r0
 800a474:	4630      	mov	r0, r6
 800a476:	f7ff fa5d 	bl	8009934 <_malloc_r>
 800a47a:	b948      	cbnz	r0, 800a490 <__smakebuf_r+0x44>
 800a47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a480:	059a      	lsls	r2, r3, #22
 800a482:	d4ef      	bmi.n	800a464 <__smakebuf_r+0x18>
 800a484:	f023 0303 	bic.w	r3, r3, #3
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	e7e3      	b.n	800a458 <__smakebuf_r+0xc>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	6020      	str	r0, [r4, #0]
 800a494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	9b00      	ldr	r3, [sp, #0]
 800a49c:	6163      	str	r3, [r4, #20]
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	6120      	str	r0, [r4, #16]
 800a4a2:	b15b      	cbz	r3, 800a4bc <__smakebuf_r+0x70>
 800a4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f000 f86b 	bl	800a584 <_isatty_r>
 800a4ae:	b128      	cbz	r0, 800a4bc <__smakebuf_r+0x70>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f023 0303 	bic.w	r3, r3, #3
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	81a3      	strh	r3, [r4, #12]
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	431d      	orrs	r5, r3
 800a4c0:	81a5      	strh	r5, [r4, #12]
 800a4c2:	e7cf      	b.n	800a464 <__smakebuf_r+0x18>

0800a4c4 <_putc_r>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	b118      	cbz	r0, 800a4d6 <_putc_r+0x12>
 800a4ce:	6a03      	ldr	r3, [r0, #32]
 800a4d0:	b90b      	cbnz	r3, 800a4d6 <_putc_r+0x12>
 800a4d2:	f7fe ff81 	bl	80093d8 <__sinit>
 800a4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4d8:	07d8      	lsls	r0, r3, #31
 800a4da:	d405      	bmi.n	800a4e8 <_putc_r+0x24>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	0599      	lsls	r1, r3, #22
 800a4e0:	d402      	bmi.n	800a4e8 <_putc_r+0x24>
 800a4e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e4:	f7ff f9a9 	bl	800983a <__retarget_lock_acquire_recursive>
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	da05      	bge.n	800a4fe <_putc_r+0x3a>
 800a4f2:	69a2      	ldr	r2, [r4, #24]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	db12      	blt.n	800a51e <_putc_r+0x5a>
 800a4f8:	b2eb      	uxtb	r3, r5
 800a4fa:	2b0a      	cmp	r3, #10
 800a4fc:	d00f      	beq.n	800a51e <_putc_r+0x5a>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	6022      	str	r2, [r4, #0]
 800a504:	701d      	strb	r5, [r3, #0]
 800a506:	b2ed      	uxtb	r5, r5
 800a508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a50a:	07da      	lsls	r2, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_putc_r+0x56>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	059b      	lsls	r3, r3, #22
 800a512:	d402      	bmi.n	800a51a <_putc_r+0x56>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f7ff f991 	bl	800983c <__retarget_lock_release_recursive>
 800a51a:	4628      	mov	r0, r5
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	4629      	mov	r1, r5
 800a520:	4622      	mov	r2, r4
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff f87b 	bl	800961e <__swbuf_r>
 800a528:	4605      	mov	r5, r0
 800a52a:	e7ed      	b.n	800a508 <_putc_r+0x44>

0800a52c <memmove>:
 800a52c:	4288      	cmp	r0, r1
 800a52e:	b510      	push	{r4, lr}
 800a530:	eb01 0402 	add.w	r4, r1, r2
 800a534:	d902      	bls.n	800a53c <memmove+0x10>
 800a536:	4284      	cmp	r4, r0
 800a538:	4623      	mov	r3, r4
 800a53a:	d807      	bhi.n	800a54c <memmove+0x20>
 800a53c:	1e43      	subs	r3, r0, #1
 800a53e:	42a1      	cmp	r1, r4
 800a540:	d008      	beq.n	800a554 <memmove+0x28>
 800a542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a54a:	e7f8      	b.n	800a53e <memmove+0x12>
 800a54c:	4402      	add	r2, r0
 800a54e:	4601      	mov	r1, r0
 800a550:	428a      	cmp	r2, r1
 800a552:	d100      	bne.n	800a556 <memmove+0x2a>
 800a554:	bd10      	pop	{r4, pc}
 800a556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a55e:	e7f7      	b.n	800a550 <memmove+0x24>

0800a560 <_fstat_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_fstat_r+0x20>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	f7fe fd24 	bl	8008fba <_fstat>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d102      	bne.n	800a57c <_fstat_r+0x1c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	b103      	cbz	r3, 800a57c <_fstat_r+0x1c>
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	bf00      	nop
 800a580:	20004d84 	.word	0x20004d84

0800a584 <_isatty_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d06      	ldr	r5, [pc, #24]	; (800a5a0 <_isatty_r+0x1c>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	602b      	str	r3, [r5, #0]
 800a590:	f7fe fe7a 	bl	8009288 <_isatty>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_isatty_r+0x1a>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_isatty_r+0x1a>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20004d84 	.word	0x20004d84

0800a5a4 <_sbrk_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d06      	ldr	r5, [pc, #24]	; (800a5c0 <_sbrk_r+0x1c>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	f7f6 fa1a 	bl	80009e8 <_sbrk>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_sbrk_r+0x1a>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_sbrk_r+0x1a>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20004d84 	.word	0x20004d84

0800a5c4 <_realloc_r>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	460e      	mov	r6, r1
 800a5ce:	b921      	cbnz	r1, 800a5da <_realloc_r+0x16>
 800a5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	f7ff b9ad 	b.w	8009934 <_malloc_r>
 800a5da:	b92a      	cbnz	r2, 800a5e8 <_realloc_r+0x24>
 800a5dc:	f7ff f93e 	bl	800985c <_free_r>
 800a5e0:	4625      	mov	r5, r4
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	f000 f81b 	bl	800a622 <_malloc_usable_size_r>
 800a5ec:	4284      	cmp	r4, r0
 800a5ee:	4607      	mov	r7, r0
 800a5f0:	d802      	bhi.n	800a5f8 <_realloc_r+0x34>
 800a5f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5f6:	d812      	bhi.n	800a61e <_realloc_r+0x5a>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7ff f99a 	bl	8009934 <_malloc_r>
 800a600:	4605      	mov	r5, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d0ed      	beq.n	800a5e2 <_realloc_r+0x1e>
 800a606:	42bc      	cmp	r4, r7
 800a608:	4622      	mov	r2, r4
 800a60a:	4631      	mov	r1, r6
 800a60c:	bf28      	it	cs
 800a60e:	463a      	movcs	r2, r7
 800a610:	f7ff f915 	bl	800983e <memcpy>
 800a614:	4631      	mov	r1, r6
 800a616:	4640      	mov	r0, r8
 800a618:	f7ff f920 	bl	800985c <_free_r>
 800a61c:	e7e1      	b.n	800a5e2 <_realloc_r+0x1e>
 800a61e:	4635      	mov	r5, r6
 800a620:	e7df      	b.n	800a5e2 <_realloc_r+0x1e>

0800a622 <_malloc_usable_size_r>:
 800a622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a626:	1f18      	subs	r0, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	580b      	ldrlt	r3, [r1, r0]
 800a62e:	18c0      	addlt	r0, r0, r3
 800a630:	4770      	bx	lr
	...

0800a634 <_init>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr

0800a640 <_fini>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	bf00      	nop
 800a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a646:	bc08      	pop	{r3}
 800a648:	469e      	mov	lr, r3
 800a64a:	4770      	bx	lr
